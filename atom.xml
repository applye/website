<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小橙</title>
  
  <subtitle>小橙个人博客网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//website.cwzcfj.cn/"/>
  <updated>2022-09-04T09:38:21.223Z</updated>
  <id>//website.cwzcfj.cn/</id>
  
  <author>
    <name>xiao cheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="//website.cwzcfj.cn/2021/08/27/tab%E5%AF%BC%E8%88%AA%E7%BB%84%E4%BB%B6/"/>
    <id>//website.cwzcfj.cn/2021/08/27/tab导航组件/</id>
    <published>2021-08-27T15:21:15.292Z</published>
    <updated>2022-09-04T09:38:21.223Z</updated>
    
    <content type="html"><![CDATA[<hr><p>abbrlink: 1<br>title: React-native之开源Tab导航组件<br>categories: ‘前端’<br>tags:</p><ul><li>‘前端’</li><li>‘react-native’<br>comments: false<br>date: 2019-04-15 22:12:38<br>img: ‘<a href="https://raw.githubusercontent.com/879733672/images/cdn/img/202209041737718.jpg&#39;" target="_blank" rel="noopener">https://raw.githubusercontent.com/879733672/images/cdn/img/202209041737718.jpg&#39;</a><h2 id="React-native之开源Tab导航组件"><a href="#React-native之开源Tab导航组件" class="headerlink" title="React-native之开源Tab导航组件"></a>React-native之开源Tab导航组件</h2></li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>大多数应用都会有导航进行页面切换，React Native原生的控件仅有TabBarIOS可供iOS平台使用，如果想同时适配Android和IOS,最好使用第三方控件，比如:react-native-tab-navigator<br>地址:<a href="https://github.com/exponent/react-native-tab-navigator" target="_blank">https://github.com/exponent/react-native-tab-navigator</a></p><h3 id="二-使用"><a href="#二-使用" class="headerlink" title="二. 使用"></a>二. 使用</h3><p>(1).安装<br>    项目根目录下 使用命令行安装<br>    <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> react-<span class="keyword">native</span>-tab-navigator <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>(2).导入<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> TabNavigator <span class="keyword">from</span> <span class="string">'react-native-tab-navigator'</span>;</span><br></pre></td></tr></table></figure></p><p>(3).代码<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">   AppRegistry,</span><br><span class="line">   StyleSheet,</span><br><span class="line">   Text,</span><br><span class="line">   View,</span><br><span class="line">   Image,</span><br><span class="line">   WebView,</span><br><span class="line">   ListView,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"><span class="keyword">import</span> TabNavigator <span class="keyword">from</span> <span class="string">'react-native-tab-navigator'</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * TabNavigator 使用示例</span></span><br><span class="line"><span class="comment"> * @export HomeUI</span></span><br><span class="line"><span class="comment"> * @class HomeUI</span></span><br><span class="line"><span class="comment"> * @extends &#123;Component&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeUI</span> <span class="keyword">extends</span> <span class="title">Component</span> &#123;</span></span><br><span class="line">   constructor(props) &#123;</span><br><span class="line">       <span class="keyword">super</span>(props);</span><br><span class="line">       <span class="keyword">this</span>.state = &#123;</span><br><span class="line">           selectedTab: <span class="string">'home'</span>,</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @returns </span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * @memberOf HomeUI</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   render() &#123;</span><br><span class="line">       <span class="keyword">const</span> homeView = (</span><br><span class="line">           &lt;View style=&#123;[styles.flex, styles.center, &#123; backgroundColor: <span class="string">'#ffff0044'</span> &#125;]&#125;&gt;</span><br><span class="line">               &lt;Text style=&#123;&#123; fontSize: <span class="number">22</span> &#125;&#125;&gt;我是主页&lt;/Text&gt;</span><br><span class="line">           &lt;/View&gt;</span><br><span class="line">       )</span><br><span class="line">       <span class="keyword">const</span> settingView = (</span><br><span class="line">           &lt;View style=&#123;[styles.flex, styles.center, &#123; backgroundColor: <span class="string">'#ffff0044'</span> &#125;]&#125;&gt;</span><br><span class="line">               &lt;Text style=&#123;&#123; fontSize: <span class="number">22</span> &#125;&#125;&gt;我是设置页面&lt;/Text&gt;</span><br><span class="line">           &lt;/View&gt;</span><br><span class="line">       )</span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">          <span class="string">' &lt;TabNavigator</span></span><br><span class="line"><span class="string">               hidesTabTouch=&#123;true&#125;</span></span><br><span class="line"><span class="string">               tabBarStyle=&#123;&#123; height: 60 &#125;&#125;</span></span><br><span class="line"><span class="string">           &gt;</span></span><br><span class="line"><span class="string">               &lt;TabNavigator.Item</span></span><br><span class="line"><span class="string">                   selected=&#123;this.state.selectedTab === '</span>home<span class="string">'&#125;</span></span><br><span class="line"><span class="string">                   title='</span>主页<span class="string">'</span></span><br><span class="line"><span class="string">                   renderIcon=&#123;() =&gt; &lt;Image source=&#123;require('</span>.<span class="regexp">/images/home_tab_home_normal.png')&#125; /</span>&gt;&#125;</span><br><span class="line">                   renderSelectedIcon=&#123;() =&gt; &lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./images/home_tab_home_pressed.png'</span>)&#125; /&gt;&#125;</span><br><span class="line">                   badgeText=<span class="string">'200'</span></span><br><span class="line">                   onPress=&#123;() =&gt; <span class="keyword">this</span>.setState(&#123; selectedTab: <span class="string">'home'</span> &#125;)&#125;&gt;</span><br><span class="line">                   &#123;homeView&#125;</span><br><span class="line">               &lt;/TabNavigator.Item&gt;</span><br><span class="line">               &lt;TabNavigator.Item</span><br><span class="line">                   selected=&#123;<span class="keyword">this</span>.state.selectedTab === <span class="string">'setting'</span>&#125;</span><br><span class="line">                   title=<span class="string">'设置'</span></span><br><span class="line">                   renderIcon=&#123;() =&gt; &lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./images/home_tab_setting_normal.png'</span>)&#125; /&gt;&#125;</span><br><span class="line">                   renderSelectedIcon=&#123;() =&gt; &lt;Image source=&#123;<span class="built_in">require</span>(<span class="string">'./images/home_tab_setting_pressed.png'</span>)&#125; /&gt;&#125;</span><br><span class="line">                   onPress=&#123;() =&gt; <span class="keyword">this</span>.setState(&#123; selectedTab: <span class="string">'setting'</span> &#125;)&#125;&gt;</span><br><span class="line">                   &#123;settingView&#125;</span><br><span class="line">               &lt;/TabNavigator.Item&gt;</span><br><span class="line">           &lt;/TabNavigator&gt;</span><br><span class="line">       )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">   flex: &#123;</span><br><span class="line">       flex: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">   ListView: &#123;</span><br><span class="line">       paddingTop: <span class="number">20</span>,</span><br><span class="line">       backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   img: &#123;</span><br><span class="line">       width: <span class="number">40</span>,</span><br><span class="line">       height: <span class="number">33</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   center: &#123;</span><br><span class="line">       justifyContent: <span class="string">'center'</span>,</span><br><span class="line">       alignItems: <span class="string">'center'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><pre><code>center: {    justifyContent: &apos;center&apos;,    alignItems: &apos;center&apos;, },});</code></pre><p><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;abbrlink: 1&lt;br&gt;title: React-native之开源Tab导航组件&lt;br&gt;categories: ‘前端’&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘前端’&lt;/li&gt;
&lt;li&gt;‘react-native’&lt;br&gt;comments: fal
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Native 第三方组件react-native-side-menu -侧滑栏使用</title>
    <link href="//website.cwzcfj.cn/2021/08/27/side%E4%BE%A7%E6%BB%91%E6%A0%8F%E7%BB%84%E4%BB%B6/"/>
    <id>//website.cwzcfj.cn/2021/08/27/side侧滑栏组件/</id>
    <published>2021-08-27T15:21:15.290Z</published>
    <updated>2022-09-04T08:39:15.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Native-第三方组件react-native-side-menu-侧滑栏使用"><a href="#React-Native-第三方组件react-native-side-menu-侧滑栏使用" class="headerlink" title="React Native 第三方组件react-native-side-menu -侧滑栏使用"></a>React Native 第三方组件react-native-side-menu -侧滑栏使用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>  添加应用侧滑功能， 使用第三方组件。比如：react-native-side-menu。</p><p>  地址：<a href="https://github.com/react-native-community/react-native-side-menu" target="_blank">https://github.com/react-native-community/react-native-side-menu</a> </p><p>(1). 安装<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> react-<span class="keyword">native</span>-side-menu <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>(2). 导入<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SideMenu <span class="keyword">from</span> <span class="string">'react-native-side-menu'</span>;</span><br></pre></td></tr></table></figure></p><p>(3). 出现的错误<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: <span class="built_in">set</span>State(...): Cannot update during an existing <span class="keyword">state</span> transition (such as within `render` or another component's constructor). Render methods should be a pure function of props and <span class="keyword">state</span>; constructor side-effects are an anti-pattern, but can be moved <span class="keyword">to</span> `componentWillMount`.</span><br></pre></td></tr></table></figure></p><p>大体意思是说render 在这种需要props和state进行渲染的方法中，不能在对props和state进行更新。 React 会在state和props改变的时候调用render进行DOM diff然后渲染，如果渲染在对props和state进行更新，就进入死循环。</p><p>解决办法：在调用方法时创建一个匿名函数，再调用。</p><p>(4).代码示例</p><pre><code>homeUI.js</code></pre><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; from <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    AppRegistry,</span><br><span class="line">    StyleSheet,</span><br><span class="line">    Text,</span><br><span class="line">    View,</span><br><span class="line">    Image,</span><br><span class="line">    WebView,</span><br><span class="line">    ListView,</span><br><span class="line">    ScrollView,</span><br><span class="line">    navigator,</span><br><span class="line">    TouchableOpacity,</span><br><span class="line">&#125; from <span class="string">'react-native'</span></span><br><span class="line"><span class="keyword">import</span> SideMenu from <span class="string">'react-native-side-menu'</span></span><br><span class="line"><span class="keyword">import</span> Menu from <span class="string">'./menu'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* SideMenu 使用示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@export</span> HomeUI</span></span><br><span class="line"><span class="comment">* <span class="doctag">@class</span> HomeUI</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@extends</span> &#123;Component&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeUI</span> <span class="title">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">       <span class="keyword">super</span>(props);</span><br><span class="line">       <span class="keyword">this</span>.state = &#123;</span><br><span class="line">           isOpen: <span class="literal">false</span>,</span><br><span class="line">           selectedItem: <span class="string">'About'</span>,</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   onMenuItemSelected = (item) =&gt; &#123;</span><br><span class="line">       <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">           isOpen: <span class="literal">false</span>,</span><br><span class="line">           selectedItem: item,</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   updateMenu(isOpen) &#123;</span><br><span class="line">       <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">           isOpen: isOpen</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   toggle() &#123;</span><br><span class="line">       <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">           isOpen: !<span class="keyword">this</span>.state.isOpen</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   render() &#123;</span><br><span class="line">       <span class="keyword">const</span> menu = &lt;Menu onItemSelected=&#123;<span class="keyword">this</span>.onMenuItemSelected&#125; navigator=&#123;navigator&#125; /&gt;;</span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">           &lt;SideMenu</span><br><span class="line">               menu=&#123;menu&#125;</span><br><span class="line">               isOpen=&#123;<span class="keyword">this</span>.state.isOpen&#125;</span><br><span class="line">               onChange=&#123;(isOpen) =&gt; <span class="keyword">this</span>.updateMenu(isOpen)&#125;&gt;</span><br><span class="line">               &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                   &lt;Text style=&#123;&#123; fontSize: <span class="number">20</span>, textAlign: <span class="string">'center'</span>, margin: <span class="number">10</span> &#125;&#125;&gt;hello world react <span class="keyword">native</span>&lt;/Text&gt;</span><br><span class="line">                   &lt;Text&gt;</span><br><span class="line">                       选中菜单是： &#123;<span class="keyword">this</span>.state.selectedItem&#125;</span><br><span class="line">                   &lt;/Text&gt;</span><br><span class="line">               &lt;/View&gt;</span><br><span class="line">               &lt;TouchableOpacity style=&#123;styles.button&#125; onPress=&#123;() =&gt; <span class="keyword">this</span>.toggle()&#125;&gt;</span><br><span class="line">                   &lt;Image style=&#123;&#123; width: <span class="number">32</span>, height: <span class="number">32</span> &#125;&#125; source=&#123;require(<span class="string">'./images/image_menu.png'</span>)&#125; /&gt;</span><br><span class="line">               &lt;/TouchableOpacity&gt;</span><br><span class="line">           &lt;/SideMenu&gt;</span><br><span class="line">       )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">   flex: &#123;</span><br><span class="line">       flex: <span class="number">1</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   ListView: &#123;</span><br><span class="line">       paddingTop: <span class="number">20</span>,</span><br><span class="line">       backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   container: &#123;</span><br><span class="line">       flex: <span class="number">1</span>,</span><br><span class="line">       backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">       justifyContent: <span class="string">'center'</span>,</span><br><span class="line">       alignItems: <span class="string">'center'</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   button: &#123;</span><br><span class="line">       position: <span class="string">'absolute'</span>,</span><br><span class="line">       top: <span class="number">20</span>,</span><br><span class="line">       padding: <span class="number">10</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">menu.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; from <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">   AppRegistry,</span><br><span class="line">   StyleSheet,</span><br><span class="line">   Dimensions,</span><br><span class="line">   ScrollView,</span><br><span class="line">   Text,</span><br><span class="line">   Image,</span><br><span class="line">   View,</span><br><span class="line">&#125; from <span class="string">'react-native'</span></span><br><span class="line"><span class="keyword">const</span> window = Dimensions.<span class="keyword">get</span>(<span class="string">'window'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜单组件</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@class</span> Menu</span></span><br><span class="line"><span class="comment">* <span class="doctag">@extends</span> &#123;Component&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="title">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">   static PropTypes = &#123;</span><br><span class="line">       onItemSelected: React.PropTypes.func.isRequired,</span><br><span class="line">   &#125;;</span><br><span class="line">   render() &#123;</span><br><span class="line">       <span class="keyword">return</span>(</span><br><span class="line">           &lt;ScrollView scrollsToTop=&#123;<span class="literal">false</span>&#125; style=&#123;styles.menu&#125;&gt;</span><br><span class="line">               &lt;View style=&#123;styles.avatarConent&#125;&gt;</span><br><span class="line">                   &lt;Image style=&#123;styles.avatar&#125;</span><br><span class="line">                       source=&#123;require(<span class="string">'./images/avatar.jpg'</span>)&#125; /&gt;</span><br><span class="line">                       &lt;Text style=&#123;styles.name&#125;&gt; 小程QQ昵称&lt;/Text&gt;</span><br><span class="line">               &lt;/View&gt;</span><br><span class="line">               &lt;Text onPress=&#123;() =&gt; <span class="keyword">this</span>.props.onItemSelected(<span class="string">'作者'</span>)&#125; style=&#123;styles.item&#125;&gt;</span><br><span class="line">                   作者</span><br><span class="line">               &lt;/Text&gt;</span><br><span class="line">               &lt;Text onPress=&#123;() =&gt; <span class="keyword">this</span>.props.onItemSelected(<span class="string">'联系美丽蓝天'</span>)&#125; style=&#123;styles.item&#125;&gt;</span><br><span class="line">                   联系美丽蓝天</span><br><span class="line">               &lt;/Text&gt;</span><br><span class="line">           &lt;/ScrollView&gt;</span><br><span class="line"></span><br><span class="line">       )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> styles =  StyleSheet.create(&#123;</span><br><span class="line">   menu: &#123;</span><br><span class="line">       flex:<span class="number">1</span>,</span><br><span class="line">       width: window.width,</span><br><span class="line">       height: window.height,</span><br><span class="line">       backgroundColor: <span class="string">'gray'</span>,</span><br><span class="line">       padding: <span class="number">20</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   avatarConent: &#123;</span><br><span class="line">       marginBottom: <span class="number">20</span>,</span><br><span class="line">       marginTop:<span class="number">20</span>,        </span><br><span class="line">   &#125;,</span><br><span class="line">   avatar: &#123;</span><br><span class="line">       width:<span class="number">48</span>,</span><br><span class="line">       height:<span class="number">48</span>,</span><br><span class="line">       borderRadius: <span class="number">24</span>,</span><br><span class="line">       flex:<span class="number">1</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   name:&#123;</span><br><span class="line">       position: <span class="string">'absolute'</span>,</span><br><span class="line">       left: <span class="number">70</span>,</span><br><span class="line">       top:<span class="number">20</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   item: &#123;</span><br><span class="line">       fontSize:<span class="number">16</span>,</span><br><span class="line">       fontWeight:<span class="string">'300'</span>,</span><br><span class="line">       paddingTop:<span class="number">10</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> Menu;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Native-第三方组件react-native-side-menu-侧滑栏使用&quot;&gt;&lt;a href=&quot;#React-Native-第三方组件react-native-side-menu-侧滑栏使用&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React Native" scheme="//website.cwzcfj.cn/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>前端如何进行npm发布？</title>
    <link href="//website.cwzcfj.cn/2019/05/14/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8Cnpm%E5%8F%91%E5%B8%83%EF%BC%9F/"/>
    <id>//website.cwzcfj.cn/2019/05/14/前端如何进行npm发布？/</id>
    <published>2019-05-14T14:50:16.000Z</published>
    <updated>2022-09-04T08:47:13.455Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端npm包发布"><a href="#前端npm包发布" class="headerlink" title="前端npm包发布"></a>前端npm包发布</h3><ol><li><p>在npm官网上注册一个账号，<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a>. 之后别忘了验证邮箱。</p></li><li><p>新建一个目录，比如all-web, 使用命令进入到这个目录，执行npm init, 初始化，按照提示填写对应的内容信息。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package name：填写你这个包的名字，默认是你这个文件夹的名字（nodeadd）</span><br><span class="line"></span><br><span class="line">version：填写你这个包的版本，默认1.0.0</span><br><span class="line"></span><br><span class="line">description：描述一下你这个包是干嘛用的</span><br><span class="line"></span><br><span class="line">entry point：入口文件，默认是index.js，你也可以自己填写你自己的文件名</span><br><span class="line"></span><br><span class="line"><span class="keyword">test </span>command：测试命令，默认为空，直接回车就行</span><br><span class="line"></span><br><span class="line">git repository：git仓库地址，如果你的包是先放到github上或者其他git仓库里，这时候你的文件夹里面会存在一个隐藏的.git目录，npm会读到这个目录作为这一项的默认值。如果没有的话，直接回车继续。</span><br><span class="line"></span><br><span class="line">keywords：关键词，方便别人搜到这个包</span><br><span class="line"></span><br><span class="line">author：你的账号</span><br><span class="line"></span><br><span class="line">license： 你的这个包遵循什么开源协议，直接回车就行</span><br></pre></td></tr></table></figure></li><li><p>编写自己的项目包，可以是脚手架等</p></li><li><p>发布npm包</p></li></ol><ul><li><p>npm源切换<br>注意一般因为网络速度，原因一般使用taobao镜像，发布时需要切换会官网镜像</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> <span class="keyword">http</span>://<span class="keyword">registry</span>.npmjs.org/</span><br></pre></td></tr></table></figure></li><li><p>npm登录</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> adduser     <span class="comment"># 添加账号</span></span><br><span class="line"><span class="built_in">npm</span> login       <span class="comment"># 登录账号</span></span><br></pre></td></tr></table></figure></li></ul><p>接下来会以问答形式向你了解你的用户名、密码以及公开的邮箱，之后输入：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> publish</span><br></pre></td></tr></table></figure></p><p>看到进度条，之后发布成功。</p><ol start="5"><li><p>查询发布的包<br>npm官网全局搜索即可，淘宝npm等镜像同步时间到搜索.</p></li><li><p>如何撤销发布的包(撤包有时间限制，24小时)<br>终端执行 npm unpublish<br>例如：<br>(1). npm unpublish <a href="mailto:all-web@1.0.0" target="_blank" rel="noopener">all-web@1.0.0</a> 删除某个版本<br>(2). npm unpublish all-web –force 删除整个npm市场的包</p></li></ol><p>npm unpublish的推荐替代命令：npm deprecate <pkg>[@<version>] <message><br>使用这个命令，并不会在社区里撤销你已有的包，但会在任何人尝试安装这个包的时候得到警告<br>例如：npm deprecate z-tool ‘这个包我已经不再维护了哟～’</message></version></pkg></p><p>【注意】如果报权限方面的错，加上–force</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端npm包发布&quot;&gt;&lt;a href=&quot;#前端npm包发布&quot; class=&quot;headerlink&quot; title=&quot;前端npm包发布&quot;&gt;&lt;/a&gt;前端npm包发布&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在npm官网上注册一个账号，&lt;a href=&quot;https://www.np
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="npm" scheme="//website.cwzcfj.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>前端脚手架搭建</title>
    <link href="//website.cwzcfj.cn/2019/05/07/%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <id>//website.cwzcfj.cn/2019/05/07/前端脚手架搭建/</id>
    <published>2019-05-07T13:25:14.000Z</published>
    <updated>2022-09-04T08:49:14.388Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端脚手架搭建"><a href="#前端脚手架搭建" class="headerlink" title="前端脚手架搭建"></a>前端脚手架搭建</h3><p>在实际开发过程中，从零开始建立项目的结构是一件让人头疼的事情，所以各种各样的脚手架工具运用而生。使用较多的yoeman,express-generato,create-react-appr和vue-cli便是当中之一。它们功能丰富，但最核心的功能都是能够快速搭建一个完整的项目结构，开发者只需要在生成的项目结构基础上进行开发即可，非常简单高效。</p><ol><li>为什么需要需要脚手架？</li></ol><ul><li>减少重复性的工作，不再需要复制其他项目再删除无关代码，或者从零创建一个项目和文件</li><li>根据交互动态生成项目结构和配置文件等。</li></ul><p>我们可以借鉴 vue-cli 的基本思路。vue-cli 是将项目模板放在 git 上，运行的时候再根据用户交互下载不同的模板，经过模板引擎渲染出来，生成项目。这样将模板和脚手架分离，就可以各自维护，即使模板有变动，只需要上传最新的模板即可，而不需要用户去更新脚手架就可以生成最新的项目。那么就可以按照这个思路来进行开发了。</p><ol start="2"><li>第三方库</li></ol><ul><li>commander.js，可以自动的解析命令和参数，用于处理用户输入的命令。</li><li>download-git-repo，下载并提取 git 仓库，用于下载项目模板。</li><li>Inquirer.js，通用的命令行用户界面集合，用于和用户进行交互。</li><li>handlebars.js，模板引擎，将用户提交的信息动态填充到文件中。</li><li>ora，下载过程久的话，可以用于显示下载中的动画效果。</li><li>chalk，可以给终端的字体加上颜色。</li><li>log-symbols，可以在终端上显示出 √ 或 × 等的图标。</li></ul><ol start="3"><li>初始化项目<br>首先创建一个空项目，暂时命名为 all-cli，然后新建一个 cli.js 文件，再执行 npm init 生成一个 package.json 文件。最后安装上面需要用到的依赖。</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> all-<span class="keyword">cli</span> &amp;&amp; <span class="keyword">cd</span> all-<span class="keyword">cli</span></span><br><span class="line"></span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line">npm install commander download-git-repo inquirer handlebars ora chalk <span class="keyword">log</span>-symbols -<span class="built_in">S</span></span><br></pre></td></tr></table></figure><ol start="4"><li>处理命令行<br>node.js 内置了对命令行操作的支持，在 package.json 中的 bin 字段可以定义命令名和关联的执行文件。<br>所以现在 package.json 中加上 bin 的内容：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"all-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"all-cli"</span>: <span class="string">"bin/cli.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"chalk"</span>: <span class="string">"^2.4.2"</span>,</span><br><span class="line">    <span class="attr">"commander"</span>: <span class="string">"^2.20.0"</span>,</span><br><span class="line">    <span class="attr">"download-git-repo"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">    <span class="attr">"handlebars"</span>: <span class="string">"^4.1.2"</span>,</span><br><span class="line">    <span class="attr">"inquirer"</span>: <span class="string">"^6.3.1"</span>,</span><br><span class="line">    <span class="attr">"log-symbols"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="attr">"ora"</span>: <span class="string">"^3.4.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后在cli.js中定义init命令：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#<span class="comment">!/usr/bin/env node</span></span><br><span class="line">const <span class="function"><span class="keyword">program</span></span> = require(<span class="string">'commander'</span>);</span><br><span class="line"><span class="function"><span class="keyword">program</span>.<span class="title">version</span><span class="params">('1.0.0', '-v, --version')</span></span></span><br><span class="line">    .command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">    .<span class="keyword">action</span>((<span class="keyword">name</span>) =&gt; &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="keyword">name</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="function"><span class="keyword">program</span>.<span class="title">parse</span><span class="params">(process.argv)</span></span>;</span><br></pre></td></tr></table></figure></p><p>调用 version(‘1.0.0’, ‘-v, –version’) 会将 -v 和 –version 添加到命令中，可以通过这些选项打印出版本号。<br>调用 command(‘init <name>‘) 定义 init 命令，name 则是必传的参数，为项目名。<br>action() 则是执行 init 命令会发生的行为，要生成项目的过程就是在这里面执行的，这里暂时只打印出 name。<br>这里已经可以执行 init 命令了。执行：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">bin</span>/cli.js init HelloWorld</span><br></pre></td></tr></table></figure></name></p><p>可以看到命令行工具也打印出了 HelloWorld，那么很清楚， action((name) =&gt; {}) 这里的参数 name，就是我们执行 init 命令时输入的项目名称。<br>命令已经完成，接下来就要下载模板生成项目结构了。</p><ol start="5"><li><p>下载模板<br>download-git-repo 支持从 Github、Gitlab 和 Bitbucket 下载仓库，各自的具体用法可以参考官方文档。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env node</span></span><br><span class="line">const program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line">const download = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>);</span><br><span class="line">program.version(<span class="string">'1.0.0'</span>, <span class="string">'-v, --version'</span>)</span><br><span class="line">       .command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">       .action(<span class="function"><span class="params">(name)</span> =&gt;</span> &#123;</span><br><span class="line">           download(<span class="string">'gitlab:xx#master'</span>, name, &#123;clone: <span class="literal">true</span>&#125;, <span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err ? <span class="string">'Error'</span> : <span class="string">'Success'</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;);</span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure></li><li><p>命令行交互<br>命令行交互功能可以在用户执行 init 命令后，向用户提出问题，接收用户的输入并作出相应的处理。这里使用 inquirer.js 来实现。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line">inquirer.prompt([</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">'input'</span>,</span><br><span class="line">        name: <span class="string">'author'</span>,</span><br><span class="line">        message: <span class="string">'author'</span></span><br><span class="line">    &#125;</span><br><span class="line">]).<span class="keyword">then</span>(<span class="function"><span class="params">(answers)</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(answers.author);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>通过这里例子可以看出，问题就放在 prompt() 中，问题的类型为 input 就是输入类型，name 就是作为答案对象中的 key，message 就是问题了，用户输入的答案就在 answers 中，使用起来就是这么简单。更多的参数设置可以参考官方文档。<br>通过命令行交互，获得用户的输入，从而可以把答案渲染到模板中。</p><ol start="7"><li>渲染模板<br>这里用 handlebars 的语法对仓库的模板中的 package.json 文件做一些修改<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"&#123;&#123;name&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"&#123;&#123;author&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"&#123;&#123;version&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"&#123;&#123;description&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>并在下载模板完成之后将用户输入的答案渲染到 package.json 中<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">program.version(<span class="string">'1.0.0'</span>, <span class="string">'-v, --version'</span>)</span><br><span class="line">.command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">.action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    inquirer.prompt([</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'description'</span>,</span><br><span class="line">        message: <span class="string">'description'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'author'</span>,</span><br><span class="line">        message: <span class="string">'author'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">        download(<span class="string">'gitlab:xxxx#master'</span>,name,&#123;clone: <span class="literal">true</span>&#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> meta = &#123;</span><br><span class="line">                name,</span><br><span class="line">                description: answers.description,</span><br><span class="line">                author: answers.author</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class="line">            <span class="keyword">const</span> content = fs.readFileSync(fileName).toString();</span><br><span class="line">            <span class="keyword">const</span> result = handlebars.compile(content)(meta);</span><br><span class="line">            fs.writeFileSync(fileName, result);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这里使用了 node.js 的文件模块 fs，将 handlebars 渲染完后的模板重新写入到文件中。</p><ol start="8"><li>视觉美化<br>在用户输入答案之后，开始下载模板，这时候使用 ora 来提示用户正在下载中。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="comment">// 开始下载</span></span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'The template is being downloaded...'</span>);</span><br><span class="line">spinner.start();</span><br><span class="line"><span class="comment">// 下载失败调用</span></span><br><span class="line">spinner.fail();</span><br><span class="line"><span class="comment">// 下载成功调用</span></span><br><span class="line">spinner.succeed();</span><br></pre></td></tr></table></figure></li></ol><p>然后通过 chalk 来为打印信息加上样式，比如成功信息为绿色，失败信息为红色，这样子会让用户更加容易分辨，同时也让终端的显示更加的好看。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = require(<span class="string">'chalk'</span>);</span><br><span class="line">console.<span class="built_in">log</span>(chalk.<span class="built_in">green</span>(<span class="string">'Success'</span>));</span><br><span class="line">console.<span class="built_in">log</span>(chalk.<span class="built_in">red</span>(<span class="string">'Fail'</span>));</span><br></pre></td></tr></table></figure></p><p>除了给打印信息加上颜色之外，还可以使用 log-symbols 在信息前面加上 √ 或 × 等的图标。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> symbols = <span class="built_in">require</span>(<span class="string">'log-symbols'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(symbols.success, chalk.green(<span class="string">'Success'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(symbols.error, chalk.red(<span class="string">'Fail'</span>));</span><br></pre></td></tr></table></figure></p><ol start="9"><li>完整示例<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#! <span class="regexp">/usr/</span>bin/env node</span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>);</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"><span class="keyword">const</span> handlebars = <span class="built_in">require</span>(<span class="string">'handlebars'</span>);</span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> symbols = <span class="built_in">require</span>(<span class="string">'log-symbols'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line">program.version(<span class="string">'1.0.0'</span>, <span class="string">'-v'</span>, <span class="string">'--version'</span>)</span><br><span class="line">    .command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">    .action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!fs.existsSync(name)) &#123;</span><br><span class="line">            inquirer.prompt([</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">type</span>: <span class="string">'list'</span>,</span><br><span class="line">                    choices: [<span class="string">'umi'</span>, <span class="string">'react-webpack'</span>, <span class="string">'react-antd'</span>],</span><br><span class="line">                    name: <span class="string">'platform'</span>,</span><br><span class="line">                    message: <span class="string">'Please select the project you want to install.'</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    name: <span class="string">'version'</span>,</span><br><span class="line">                    message: <span class="string">'version:(1.0.0)'</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    name: <span class="string">'description'</span>,</span><br><span class="line">                    message: <span class="string">'description:'</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    name: <span class="string">'author'</span>,</span><br><span class="line">                    message: <span class="string">'author:'</span></span><br><span class="line">                &#125;]).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(answers.author);</span><br><span class="line">                    <span class="keyword">const</span> spinner = ora(<span class="string">'The template is being downloaded...'</span>);</span><br><span class="line">                    <span class="keyword">const</span> platform = answers.platform;</span><br><span class="line">                    spinner.start();</span><br><span class="line"></span><br><span class="line">                    download(<span class="string">'https://github.com/879733672/all-web-cli.git#&#123;platform&#125;'</span>, name, &#123; clone: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            spinner.fail();</span><br><span class="line">                            <span class="built_in">console</span>.log(symbols.error, chalk.red(err));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            spinner.succeed();</span><br><span class="line">                            <span class="keyword">const</span> fileName = <span class="string">`&#123;name&#125;/package.json`</span>;</span><br><span class="line">                            <span class="keyword">const</span> meta = &#123;</span><br><span class="line">                                name,</span><br><span class="line">                                description: answers.description,</span><br><span class="line">                                author: answers.author,</span><br><span class="line">                                version: answers.version || <span class="string">'1.0.0'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (fs.existsSync(fileName)) &#123;</span><br><span class="line">                                <span class="keyword">const</span> content = fs.readdirSync(fileName).toString();</span><br><span class="line">                                <span class="keyword">const</span> result = handlebars.compile(content)(meta);</span><br><span class="line">                                fs.writeFileSync(fileName, result);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="built_in">console</span>.log(symbols.success, chalk.green(<span class="string">'Done'</span>))</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//错误提示项目已存在，避免覆盖原有项目</span></span><br><span class="line">            <span class="built_in">console</span>.log(symbols.error, chalk.red(<span class="string">"Already Existed."</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure></li></ol><p>完成之后，就可以把脚手架发布到 npm 上面，通过 -g 进行全局安装，就可以在自己本机上执行 ice init [name] 来初始化项目，这样便完成了一个简单的脚手架工具了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端脚手架搭建&quot;&gt;&lt;a href=&quot;#前端脚手架搭建&quot; class=&quot;headerlink&quot; title=&quot;前端脚手架搭建&quot;&gt;&lt;/a&gt;前端脚手架搭建&lt;/h3&gt;&lt;p&gt;在实际开发过程中，从零开始建立项目的结构是一件让人头疼的事情，所以各种各样的脚手架工具运用而生。使用
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="脚手架" scheme="//website.cwzcfj.cn/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>IntersectionObserver介绍</title>
    <link href="//website.cwzcfj.cn/2019/04/20/IntersectionObserver%E4%BB%8B%E7%BB%8D/"/>
    <id>//website.cwzcfj.cn/2019/04/20/IntersectionObserver介绍/</id>
    <published>2019-04-20T13:33:12.000Z</published>
    <updated>2022-09-04T08:50:48.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IntersectionObserver简介"><a href="#IntersectionObserver简介" class="headerlink" title="IntersectionObserver简介"></a>IntersectionObserver简介</h2><p>在移动端，有个很重要的概念，叫做懒加载，适用于一些图片资源特别多，ajax数据特别多的页面中，经常会有动态加载数据的场景中，这个时候，我们通常是使用监听scroll或者使用setInterval来判断，元素是否进入视图，其中scroll由于其特别大的计算量，会有性能问题，而setInterval由于其有间歇期，也会出现体验问题。<br>浏览器的开发商，估计也发现了这个问题，所以在2016年初，chrome51率先提供了一个新的API，就是IntersectionObserver，它可以用来监听元素是否进入了设备的可视区域之内，而不需要频繁的计算来做这个判断。</p><p>毕竟是一个新兴的API，所以浏览器的支持性并不好，这里可以看看当前浏览器对于IntersectionObserver的支持性：<a href="http://caniuse.com/#search=IntersectionObserver" target="_blank" rel="noopener">IntersectionObserver</a></p><ol><li>Api简介<br>该API的调用非常简单：<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> <span class="type">IntersectionObserver</span>(callback,options);</span><br></pre></td></tr></table></figure></li></ol><p>IntersectionObserver支持两个参数：</p><ul><li>callback是当被监听元素的可见性变化时，触发的回调函数</li><li>options是一个配置参数，可选，有默认的属性值</li></ul><ol start="2"><li>应用</li></ol><ul><li>预加载（滚动加载，无限加载）</li><li>懒加载（图片后加载）</li><li>TAB滚动跟随</li></ul><ol start="3"><li>事件DOMContentLoaded和load的区别<br>区别是: 触发的时机不一样，先触发DOMContentLoaded事件，后触发load事件。</li></ol><p>DOM文档加载的步骤为</p><ol><li>解析HTML结构。</li><li>DOM树构建完成。//DOMContentLoaded</li><li>加载外部脚本和样式表文件。</li><li>解析并执行脚本代码。</li><li>加载图片等外部文件。</li><li>页面加载完毕。//load<br>在第2步，会触发DOMContentLoaded事件。在第6步，触发load事件。</li></ol><p>js原生写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不兼容老的浏览器，兼容写法见[jQuery中ready与load事件](http://www.imooc.com/code/3253)，或用jQuery</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// ...代码...</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...代码...</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>jQuery写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOMContentLoaded</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...代码...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//load</span></span><br><span class="line">$(<span class="built_in">document</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...代码...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IntersectionObserver简介&quot;&gt;&lt;a href=&quot;#IntersectionObserver简介&quot; class=&quot;headerlink&quot; title=&quot;IntersectionObserver简介&quot;&gt;&lt;/a&gt;IntersectionObserver
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="IntersectionObserver" scheme="//website.cwzcfj.cn/tags/IntersectionObserver/"/>
    
  </entry>
  
  <entry>
    <title>debounce弹跳函数介绍</title>
    <link href="//website.cwzcfj.cn/2019/04/20/debounce%E5%BC%B9%E8%B7%B3%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
    <id>//website.cwzcfj.cn/2019/04/20/debounce弹跳函数介绍/</id>
    <published>2019-04-20T13:19:48.000Z</published>
    <updated>2022-09-04T08:58:08.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="debounce去弹跳函数-原lodash-debounce"><a href="#debounce去弹跳函数-原lodash-debounce" class="headerlink" title="debounce去弹跳函数 原lodash.debounce"></a>debounce去弹跳函数 原lodash.debounce</h2><p>debounce 强制函数再某段时间内只执行一次<br>throttle 强制函数以固定的频率触发的 DOM 事情的时候，他们都能极大提高用户体验.</p><p>dobounce 返回了一个闭包，这个闭包依然会被连续频繁地调用，但是在闭包内部，却限制了原始函数fn的执行，强制fn只在连续操作停止后只执行一次<br>大致核心代码如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function debounce(<span class="function"><span class="keyword">fun</span>, delay) &#123;</span></span><br><span class="line">  <span class="keyword">var</span> timer;</span><br><span class="line">  <span class="keyword">return</span> function() &#123;</span><br><span class="line">    <span class="keyword">var</span> content = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args =  arguments;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(function() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">fun</span>.<span class="title">apply</span><span class="params">(content, args)</span></span>;</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;debounce去弹跳函数-原lodash-debounce&quot;&gt;&lt;a href=&quot;#debounce去弹跳函数-原lodash-debounce&quot; class=&quot;headerlink&quot; title=&quot;debounce去弹跳函数 原lodash.debounce&quot;&gt;
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="debounce" scheme="//website.cwzcfj.cn/tags/debounce/"/>
    
  </entry>
  
  <entry>
    <title>markdown简单使用</title>
    <link href="//website.cwzcfj.cn/2019/04/20/markdown%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>//website.cwzcfj.cn/2019/04/20/markdown简单使用/</id>
    <published>2019-04-20T12:07:14.000Z</published>
    <updated>2022-09-04T08:59:37.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="markdown简介"><a href="#markdown简介" class="headerlink" title="markdown简介"></a>markdown简介</h3><p>Markdown 的目标是实现「易读易写」。<br>Markdown 的特点就是，让写作变得更简单，我们不用再考虑如何排版，我们只要专心于写作就好了，这也是对我们的宗旨！！<br>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。</p><p>markdown命令：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>标题</span><br><span class="line"><span class="code">    # 一级标题</span></span><br><span class="line"><span class="code">    ## 二级标题</span></span><br><span class="line"><span class="code">    ### 三级标题</span></span><br><span class="line"><span class="code">    #### 四级标题</span></span><br><span class="line"><span class="code">    ##### 五级标题</span></span><br><span class="line"><span class="code">    ###### 六级标题</span></span><br><span class="line"></span><br><span class="line">![<span class="string">百度图片</span>](<span class="link">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3534940874,3350191940&amp;fm=27&amp;gp=0.jpg， '图片'</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">百度</span>](<span class="link">http://baidu.com</span>)</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://baidu.com"</span> <span class="attr">taget</span>=<span class="string">"_blank"</span>&gt;</span></span>百度链接地址<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">*在哪里*</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**加粗**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">***斜体加粗**</span>*</span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br><span class="line"></span><br><span class="line">&gt;这是引用的内容</span><br><span class="line"></span><br><span class="line">&gt;&gt;这是引用的内容2</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">***</span>*</span><br><span class="line"></span><br><span class="line">表头|表头</span><br><span class="line">--|--</span><br><span class="line">内容|内容</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>在什么地方</span><br><span class="line"><span class="bullet">* </span>在干啥</span><br><span class="line"><span class="bullet">+ </span>明天做什么</span><br><span class="line"><span class="bullet">+ </span>副书记看风景</span><br><span class="line"><span class="bullet">- </span>开发驾考速度</span><br><span class="line"><span class="bullet">- </span>空间都是咖啡</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>电视剧法开始</span><br><span class="line"><span class="bullet">2. </span>的框架开发商的</span><br><span class="line"><span class="bullet">3. </span>插卡看的积分</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>1级无序列表</span><br><span class="line"><span class="code">    * 在什么地方</span></span><br><span class="line"><span class="code">    * 世界都是看得见</span></span><br><span class="line"><span class="code">    * 大家福建省客服</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>1级无序列表</span><br><span class="line"><span class="code">    1. 的框架侃大山</span></span><br><span class="line"><span class="code">    2. 附近富士康福建省</span></span><br><span class="line"><span class="code">    3. 发呆思考当升科技</span></span><br><span class="line"></span><br><span class="line">表头|表头|表头</span><br><span class="line">--|:--:|--:</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure></p><p>预览：</p><ol><li>标题<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li></ol><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3534940874,3350191940&amp;fm=27&amp;gp=0.jpg，" alt="百度图片" title="图片"></p><p><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p><a href="http://baidu.com" taget="_blank" target="_blank" rel="noopener">百度链接地址</a></p><p><em>在哪里</em></p><p><strong>加粗</strong></p><p><strong><em>斜体加粗</em></strong></p><p><del>删除线</del></p><blockquote><p>这是引用的内容</p></blockquote><blockquote><blockquote><p>这是引用的内容2</p></blockquote></blockquote><hr><hr><hr><hr><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>内容</td><td>内容</td></tr></tbody></table><ul><li>在什么地方</li><li>在干啥</li></ul><ul><li>明天做什么</li><li>副书记看风景</li></ul><ul><li>开发驾考速度</li><li>空间都是咖啡</li></ul><ol><li>电视剧法开始</li><li>的框架开发商的</li><li>插卡看的积分</li></ol><ul><li>1级无序列表<ul><li>在什么地方</li><li>世界都是看得见</li><li>大家福建省客服</li></ul></li></ul><ul><li>1级无序列表<ol><li>的框架侃大山</li><li>附近富士康福建省</li><li>发呆思考当升科技</li></ol></li></ul><table><thead><tr><th>表头</th><th style="text-align:center">表头</th><th style="text-align:right">表头</th></tr></thead><tbody><tr><td>内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr></tbody></table><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> db</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;markdown简介&quot;&gt;&lt;a href=&quot;#markdown简介&quot; class=&quot;headerlink&quot; title=&quot;markdown简介&quot;&gt;&lt;/a&gt;markdown简介&lt;/h3&gt;&lt;p&gt;Markdown 的目标是实现「易读易写」。&lt;br&gt;Markdown 的特点
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="markdown" scheme="//website.cwzcfj.cn/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>docker学习</title>
    <link href="//website.cwzcfj.cn/2019/04/19/docker%E5%AD%A6%E4%B9%A0/"/>
    <id>//website.cwzcfj.cn/2019/04/19/docker学习/</id>
    <published>2019-04-19T14:24:14.000Z</published>
    <updated>2022-09-04T13:01:06.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-简介"><a href="#docker-简介" class="headerlink" title="docker 简介"></a>docker 简介</h2><p>2013年发布至今，docker一直广受瞩目，被认为可能会改变软件行业。</p><p>但是，许多人并不清楚 Docker 到底是什么，要解决什么问题，好处又在哪里？本文就来详细解释，帮助大家理解它，还带有简单易懂的实例，教你如何将它用于日常开发。</p><p><img src="https://raw.githubusercontent.com/879733672/images/cdn/img/202209042054487.jpeg" alt="docker"></p><p>1、环境配置的难题<br>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p><p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p><p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p><p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。</p><p>2、虚拟机<br>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p><p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点</p><ul><li>资源占用多<br>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</li><li>冗余步骤多<br>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</li><li>启动慢<br>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行</li></ul><p>对比传统虚拟机总结：</p><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为 MB</td><td>一般为 GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><p>3、Linux 容器<br>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p><p>由于容器是进程级别的，相比虚拟机有很多优势。</p><ul><li>启动快</li></ul><p>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</p><ul><li>资源占用少</li></ul><p>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</p><ul><li>体积小</li></ul><p>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</p><p>总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p><p>4、Docker 是什么？<br>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><p>5、docker架构<br>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>Docker 容器通过 Docker 镜像来创建。</p><p>容器与镜像的关系类似于面向对象编程中的对象与类。</p><table><thead><tr><th>docker</th><th>面向对象</th></tr></thead><tbody><tr><td>容器</td><td>对象</td></tr><tr><td>镜像</td><td>类</td></tr></tbody></table><ul><li><p>镜像<br>Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统<br>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p></li><li><p>容器<br>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p></li><li><p>仓库<br>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p></li></ul><p>一个 Docker Registry 中可以包含多个 仓库（Repository）；每个仓库可以包含多个 标签（Tag）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p><p>以 Ubuntu 镜像 为例，ubuntu 是仓库的名字，其内包含有不同的版本标签，如，16.04, 18.04。我们可以通过 ubuntu:14.04，或者 ubuntu:18.04 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 ubuntu，那将视为 ubuntu:latest。</p><p>仓库名经常以 两段式路径 形式出现，比如 jwilder/nginx-proxy，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p><p>6、docker的用途和安装</p><ul><li>提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</li><li>提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。 </li></ul><p>docker安装<br>Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。</p><p>Docker CE 的安装请参考官方文档。</p><p>安装完成后，运行下面的命令，验证是否安装成功。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">version</span><span class="comment"># 或者$ docker info</span></span><br></pre></td></tr></table></figure></p><p>docker 是服务器–客户端架构。命令行运行docker命令的时候，需要本机有docker服务，如果这项服务没有启动，可以用下面的命令启动（官方文档）。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service 命令的用法</span></span><br><span class="line">$ sudo<span class="built_in"> service </span>docker start</span><br><span class="line"><span class="comment"># systemctl 命令的用法</span></span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></p><p>7、image文件<br>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。<br>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 列出本机的所有 <span class="keyword">image</span> 文件。</span><br><span class="line">$ docker <span class="keyword">image</span> <span class="keyword">ls</span></span><br><span class="line"># 删除 <span class="keyword">image</span> 文件</span><br><span class="line">$ docker <span class="keyword">image</span> rm[imageName]</span><br></pre></td></tr></table></figure></p><p>image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p><p>为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库Docker Hub是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。</p><p>8、实例：hello world<br>下面，我们通过最简单的 image 文件”hello world”，感受一下 Docker。</p><p>首先，运行下面的命令，将 image 文件从仓库抓取到本地。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">image</span> pull library/hello-world</span><br></pre></td></tr></table></figure></p><p>上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。  </p><p>由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">image</span> pull hello-world</span><br></pre></td></tr></table></figure></p><p>抓取成功以后，就可以在本机看到这个 image 文件了<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">image</span> <span class="keyword">ls</span></span><br></pre></td></tr></table></figure></p><p>现在，运行这个 image 文件。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></p><p>docker container run命令会从 image 文件，生成一个正在运行的容器实例。<br>注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。</p><p>如果运行成功，你会在屏幕上读到下面的输出。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="builtin-name">run</span> hello-worldHello <span class="keyword">from</span> Docker!This message shows that your installation appears <span class="keyword">to</span> be working correctly<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure></p><p>输出这段提示以后，hello world就会停止运行，容器自动终止</p><p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="built_in">run</span>-<span class="keyword">it</span> ubuntu bash</span><br></pre></td></tr></table></figure></p><p>对于那些不会自动终止的容器，必须使用docker container kill命令手动终止。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> kill<span class="comment">[containID]</span></span><br></pre></td></tr></table></figure></p><p>9、容器文件<br>image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本机正在运行的容器</span></span><br><span class="line">$ docker container <span class="keyword">ls</span></span><br><span class="line"><span class="comment"># 列出本机所有容器，包括终止运行的容器</span></span><br><span class="line">$ docker container <span class="keyword">ls</span><span class="params">--all</span></span><br></pre></td></tr></table></figure></p><p>上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的docker container kill命令。</p><p>终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> rm<span class="comment">[containerID]</span></span><br></pre></td></tr></table></figure></p><p>运行上面的命令之后，再使用docker container ls –all命令，就会发现被删除的容器文件已经消失了。</p><p>10、Dockerfile文件<br>学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。</p><p>这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。</p><p>下面通过一个实例，演示如何编写 Dockerfile 文件。</p><p>实例：制作自己的 Docker 容器<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:8.4 COPY./app WORKDIR/app <span class="builtin-name">RUN</span> npm <span class="attribute">install--registry</span>=https://registry.npm.taobao.org EXPOSE 3000</span><br></pre></td></tr></table></figure></p><p>上面代码一共五行，含义如下。</p><p>FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。</p><p>COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。</p><p>WORKDIR /app：指定接下来的工作路径为/app。</p><p>RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</p><p>EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。</p><p>有了 Dockerfile 文件以后，就可以使用docker image build命令创建 image 文件了。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">image</span> build-t koa-<span class="built_in">demo</span>.</span><br><span class="line"># 或者</span><br><span class="line">$ docker <span class="built_in">image</span> build-t koa-<span class="built_in">demo</span>:<span class="number">0.0</span>.1.</span><br></pre></td></tr></table></figure></p><p>上面代码中，-t参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是latest。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。<br>如果运行成功，就可以看到新生成的 image 文件koa-demo了。<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">image</span> <span class="keyword">ls</span></span><br></pre></td></tr></table></figure></p><p>生成容器<br>docker container run命令会从 image 文件生成容器。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="built_in">run</span> -p <span class="number">8000</span>:<span class="number">3000</span> -<span class="keyword">it</span> koa-demo/bin/bash</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ docker container <span class="built_in">run</span> -p <span class="number">8000</span>:<span class="number">3000</span> -<span class="keyword">it</span> koa-demo:<span class="number">0.0</span><span class="number">.1</span>/bin/bash</span><br></pre></td></tr></table></figure></p><p>上面命令的各个参数含义如下：<br>-p参数：容器的 3000 端口映射到本机的 8000 端口。</p><p>-it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</p><p>koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</p><p>/bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</p><p>如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@66d80f4aaf1e</span><span class="symbol">:/app</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>也可以使用docker container run命令的–rm参数，在容器终止运行后自动删除容器文件。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="built_in">run</span> <span class="comment">--rm -p 8000:3000 -it koa-demo /bin/bash</span></span><br></pre></td></tr></table></figure></p><p>发布 image 文件</p><p>容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。</p><p>首先，去hub.docker.com或cloud.docker.com注册一个账户。然后，用下面的命令登录。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker login</span><br></pre></td></tr></table></figure></p><p>接着，为本地的 image 标注用户名和版本。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image tag[<span class="string">imageName</span>][<span class="symbol">username</span>]/[repository]:[tag]</span><br><span class="line"><span class="section"># 实例</span></span><br><span class="line">$ docker image tag koa-demos:0.0.1ruanyf/koa-demos:0.0.1</span><br></pre></td></tr></table></figure></p><p>也可以不标注用户名，重新构建一下 image 文件。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image build-t[username]/[repository]:[tag].</span><br></pre></td></tr></table></figure></p><p>最后，发布 image 文件。<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image push<span class="string">[username]</span>/<span class="string">[repository]</span>:<span class="string">[tag]</span></span><br></pre></td></tr></table></figure></p><p>发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。</p><p>11、其他有用的命令<br>前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> start<span class="comment">[containerID]</span></span><br></pre></td></tr></table></figure><p>前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash <span class="keyword">container</span> stop<span class="comment">[containerID]</span></span><br></pre></td></tr></table></figure></p><p>这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。</p><p>docker container logs命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> logs<span class="comment">[containerID]</span></span><br></pre></td></tr></table></figure></p><p>docker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> exec-it<span class="comment">[containerID]</span>/bin/bash</span><br></pre></td></tr></table></figure></p><p>docker container cp命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> cp<span class="comment">[containID]</span>:<span class="comment">[/path/to/file]</span>.</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/yeasy/docker_practice/blob/master/SUMMARY.md" target="_blank" rel="noopener">docker文档</a></p><p>命令合集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [docker registry 地址[:端口号]/]仓库名[:标签]</span><br><span class="line">例如：docker pull ubuntu:16.04</span><br><span class="line">docekr run   //运行容器container</span><br><span class="line">例如：docker run -it <span class="comment">--rm ubuntu:16.04 \bash</span></span><br><span class="line">-it 这个两个参数，一个-i：交互式操作，-t 终端 bash 执行一些命令查看返回结果，因此需要交互式终端</span><br><span class="line"><span class="comment">--rm 容器退出后随之删除</span></span><br><span class="line"></span><br><span class="line">exit  //退出容器</span><br><span class="line">//启动一个nginx</span><br><span class="line">docker run -p 8080:80 -d nginx</span><br><span class="line">docker images   //列出所有image镜像</span><br><span class="line">docker build -t //创建image</span><br><span class="line"></span><br><span class="line">docker ps   //列出container</span><br><span class="line">docker cp index.html b08b3xx://usr/share/nginx/html</span><br><span class="line"></span><br><span class="line"><span class="comment">##提交保存一个镜像</span></span><br><span class="line">docker <span class="keyword">commit</span> -m <span class="string">'fun'</span> b08b3xx(容器<span class="keyword">id</span>) <span class="keyword">name</span>(名称)</span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi b08b3xx</span><br><span class="line"><span class="comment"># 显示之前运行的历史容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 删除容器container</span></span><br><span class="line">docker rm b08b3xx(容器<span class="keyword">id</span>) </span><br><span class="line"><span class="comment"># 在host和container之间拷贝文件</span></span><br><span class="line">docker cp</span><br><span class="line"><span class="comment"># 查看镜像和任务的详细信息</span></span><br><span class="line">docker inspect ubuntu:latest</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker exec -it d5ab172xx /<span class="keyword">bin</span>/bash</span><br><span class="line">docker attach d5ab172xx</span><br><span class="line">ssh方式进去</span><br><span class="line"><span class="comment"># 删除全部容器</span></span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line"><span class="comment"># 一条命令实现停用并删除容器</span></span><br><span class="line">docker <span class="keyword">stop</span> $(docker ps -q) &amp; docker rm $(docker ps -aq)</span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker <span class="keyword">logs</span> &lt;<span class="keyword">container</span> <span class="keyword">id</span>&gt;</span><br><span class="line"><span class="comment"># 查看容器内部运行的进程</span></span><br><span class="line">docker top [容器<span class="keyword">id</span>]</span><br><span class="line"><span class="comment"># 导出镜像</span></span><br><span class="line">docker expoer &gt; develop.tar</span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line">输入命令docker <span class="keyword">import</span>, 从文件夹中直接把ubuntu文件拖拽到命令行中</span><br><span class="line"><span class="comment"># 查看空间占用</span></span><br><span class="line">docker <span class="keyword">system</span> df -v</span><br><span class="line"><span class="comment"># 自动空间清理</span></span><br><span class="line">docker <span class="keyword">system</span> prune</span><br><span class="line"><span class="comment"># 挂载目录</span></span><br><span class="line">docker run -p <span class="number">8080</span>:<span class="number">80</span> -d -v $PWD/doc2:/<span class="keyword">var</span>/www/html cwz/nginx:<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line">docker run <span class="comment">--volumed-from ...</span></span><br><span class="line"></span><br><span class="line">mkdir <span class="keyword">data</span></span><br><span class="line">docker <span class="keyword">create</span> -v $PWD/<span class="keyword">data</span>:/<span class="keyword">var</span>/mydata <span class="comment">--name data_container ubuntu</span></span><br><span class="line">产生一个仅有数据的容器</span><br><span class="line"></span><br><span class="line">docker run -it <span class="comment">--volumes-from data_container ubuntu /bin/base</span></span><br><span class="line">从一个容器挂载，运行并进入容器内部</span><br><span class="line"></span><br><span class="line">多容器app</span><br><span class="line">compose介绍</span><br><span class="line">  app名称：ghost，是一个博客平台程序，安装之后，可着急写文字或别人发布，架构：nginx-ghost app-mysql 分别分为三个容器</span><br><span class="line">  dcoker-compose.yml命令</span><br><span class="line">  <span class="keyword">build</span>: 本地构建镜像</span><br><span class="line">  command: 覆盖缺省命令</span><br><span class="line">  depends_on: 连接容器</span><br><span class="line">  ports: 暴露端口</span><br><span class="line">  volumes: 挂载卷组</span><br><span class="line">  image: 拉取镜像</span><br><span class="line">docker-compose命令</span><br><span class="line">  up：启动服务</span><br><span class="line">  <span class="keyword">stop</span>: 停止服务</span><br><span class="line">  rm: 删除服务中的各个容器</span><br><span class="line">  <span class="keyword">logs</span>: 观察各个容器中的日志</span><br><span class="line">  ps: 列出服务相关的容器</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>docker pull</td><td>获取image</td></tr><tr><td>docker build</td><td>创建image</td></tr><tr><td>docker run</td><td>运行container</td></tr><tr><td>docker ps</td><td>列出container</td></tr><tr><td>docker rm</td><td>删除container</td></tr><tr><td>docker rmi</td><td>删除image</td></tr><tr><td>docker ps</td><td>在host和container之间拷贝文件</td></tr><tr><td>docker commit</td><td>保存改动为新的image</td></tr></tbody></table><p>Dockerfile 语法</p><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>FROM</td><td>base image</td></tr><tr><td>RUN</td><td>执行命令</td></tr><tr><td>ADD</td><td>添加文件</td></tr><tr><td>COPY</td><td>拷贝文件</td></tr><tr><td>CMD</td><td>执行命令</td></tr><tr><td>EXPOSE</td><td>暴露端口</td></tr><tr><td>WORKDIR</td><td>指定路径</td></tr><tr><td>MAINTAINER</td><td>维护者</td></tr><tr><td>ENV</td><td>指定环境变量</td></tr><tr><td>ENTRYPOINT</td><td>容器入口</td></tr><tr><td>USER</td><td>指定用户</td></tr><tr><td>VOLUME</td><td>mount point</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;docker-简介&quot;&gt;&lt;a href=&quot;#docker-简介&quot; class=&quot;headerlink&quot; title=&quot;docker 简介&quot;&gt;&lt;/a&gt;docker 简介&lt;/h2&gt;&lt;p&gt;2013年发布至今，docker一直广受瞩目，被认为可能会改变软件行业。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="docker" scheme="//website.cwzcfj.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>前端常用命令集</title>
    <link href="//website.cwzcfj.cn/2019/04/17/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86/"/>
    <id>//website.cwzcfj.cn/2019/04/17/前端常用命令集/</id>
    <published>2019-04-17T15:44:33.000Z</published>
    <updated>2022-09-04T09:14:21.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端常用命令"><a href="#前端常用命令" class="headerlink" title="前端常用命令"></a>前端常用命令</h2><p>搜集一些经常使用到的命令，整理到一起，方便查阅。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">mac常用快捷键</span><br><span class="line"></span><br><span class="line">control+command+f <span class="comment"># 最大化最小化切换</span></span><br><span class="line">command+option+i  <span class="comment"># 打开开发者工具</span></span><br><span class="line">command+H         <span class="comment"># 隐藏窗口</span></span><br><span class="line">command+M         <span class="comment"># 最小化当前窗口</span></span><br><span class="line">command+option+H  <span class="comment"># 最小化当前程序之外所有程序窗口</span></span><br><span class="line">command+option+M+H <span class="comment"># 快速隐藏所有应用程序窗口</span></span><br><span class="line"></span><br><span class="line">ctrl+shift+L <span class="comment"># 同时选中所有匹配</span></span><br><span class="line"></span><br><span class="line">mac常用命令</span><br><span class="line"></span><br><span class="line">pwd  <span class="comment"># 查看当前工作目录</span></span><br><span class="line">cd   <span class="comment"># 进入root</span></span><br><span class="line">cd folder <span class="comment"># 进入文件夹</span></span><br><span class="line">cd ..    <span class="comment"># 上级目录</span></span><br><span class="line">cd ~     <span class="comment"># 返回root</span></span><br><span class="line">rm 文件名  <span class="comment"># 删除</span></span><br><span class="line">ls        <span class="comment"># 列出目录下所有文件</span></span><br><span class="line">cp 文件名 目标目录   <span class="comment"># 拷贝到目标目录</span></span><br><span class="line">ps -ef|grep nginx   <span class="comment"># 查询服务</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">losf -i :7001</span><br><span class="line"><span class="keyword">kill</span> <span class="number">-9</span> <span class="number">83908</span>       <span class="comment"># 查询端口占用，并杀掉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ln</span> -s 使用路径 希望的路径   <span class="comment"># 链接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查询日志</span><br><span class="line">control+f  <span class="comment"># 翻页</span></span><br><span class="line">//查询日志关键信息</span><br><span class="line">cat -n test.log | grep <span class="string">"地形"</span></span><br><span class="line">//日志输出到屏幕</span><br><span class="line">cat *.log</span><br><span class="line"></span><br><span class="line">more *.log <span class="comment"># 同cat命令差不多，只不过时会把内容分页，通过空格向下翻页</span></span><br><span class="line"></span><br><span class="line">通过<span class="keyword">less</span> *.log 进入文件</span><br><span class="line"> <span class="number">1.</span> 可以通过/txt或者?txt来定位文件，并且通过n(向上)或者N(向下)来定位下一个匹配记录</span><br><span class="line"> <span class="number">2.</span> 通过<span class="keyword">less</span> *.log | grep <span class="string">'txt'</span> 关键字查找</span><br><span class="line"> <span class="number">3.</span> 通过F来开启实时监控</span><br><span class="line"><span class="keyword">head</span> 命令</span><br><span class="line"><span class="keyword">head</span> *.log 默认查看前<span class="number">10</span>行日志</span><br><span class="line"><span class="keyword">head</span> -n <span class="number">20</span> *.log 查看前<span class="number">20</span>行日志</span><br><span class="line"></span><br><span class="line">tail命令(常用)</span><br><span class="line">tail <span class="comment"># 默认查看末尾几行的日志</span></span><br><span class="line">tail -n <span class="number">10</span> *.log <span class="comment"># 默认查看后10行日志</span></span><br><span class="line">tail -f *.log 实时监控日志</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">idea</span><br><span class="line">alt + <span class="number">1</span> 快速移动到上一个错误</span><br><span class="line">alt + <span class="number">2</span> 快速移动到下一个错误</span><br><span class="line">alt + enter 修改错误</span><br><span class="line">alt + control + o 删除多余jar</span><br><span class="line">command + <span class="keyword">option</span> + L  格式化代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git</span><br><span class="line">//强制更新到本地</span><br><span class="line">git <span class="keyword">fetch</span> -<span class="keyword">all</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard origin/master  //远程分支名称</span></span><br><span class="line">git <span class="keyword">fetch</span></span><br><span class="line"></span><br><span class="line">git remote -v  <span class="comment"># 查看远程仓库地址</span></span><br><span class="line">git remote <span class="keyword">set</span>-<span class="keyword">url</span> origin <span class="keyword">url</span>  <span class="comment"># 修改原仓库地址</span></span><br><span class="line"></span><br><span class="line">git branch -r <span class="comment"># 获取所有远程分支</span></span><br><span class="line">git chekout -b 本地分支名x origin/远程分支x     <span class="comment"># 拉取远程分支到本地分支并创建分支x，并切换到本地分支x 注：此方法会和远程分支建立映射关系</span></span><br><span class="line">git <span class="keyword">fetch</span> origin 远程分支x:本地分支x  <span class="comment"># 使用此方法不会切换到改本地分支x，需要手动checkout。并且没有和远程有映射关系。</span></span><br><span class="line">git branch -vv <span class="comment"># 查看本地分支和远程分支映射关系</span></span><br><span class="line">git branch -u origin/addFile || git branch <span class="comment">--set-upstrean-to origin/addFile  # 添加当前分支和远程分支关系</span></span><br><span class="line">git branch <span class="comment">--unset-upstream # 撤销本地分支于远程分支映射关系</span></span><br><span class="line"></span><br><span class="line">git checkout <span class="comment">-- readne.txt # 撤销本地单个文件</span></span><br><span class="line">git branch     <span class="comment"># 列出本地所有分支</span></span><br><span class="line">git chekcout <span class="keyword">name</span> <span class="comment"># 检出分支名，切换分支，本地文件不会改变</span></span><br><span class="line">git <span class="keyword">add</span> dir   <span class="comment"># 提交目录</span></span><br><span class="line">git diff      <span class="comment"># 显示本地和暂存区的差异</span></span><br><span class="line">git diff <span class="comment">--cached file  # 显示暂存区和上一个commit的差异</span></span><br><span class="line">git diff <span class="keyword">HEAD</span> <span class="comment"># 显示工作区和单亲分支最新commit 之间差异</span></span><br><span class="line">git push origin 本地分支:远程分支   <span class="comment"># 推送到远程</span></span><br><span class="line">git chekcout -f <span class="keyword">name</span>    <span class="comment"># 强制切换分支， 会抛弃已修改的</span></span><br><span class="line">git branch -d <span class="keyword">name</span>  <span class="comment"># 删除分支</span></span><br><span class="line">git stash <span class="keyword">list</span>  <span class="comment"># 查询缓存列表</span></span><br><span class="line">git stash       <span class="comment"># 暂存起来</span></span><br><span class="line">git stash <span class="keyword">apply</span> stash@&#123;<span class="number">0</span>&#125;   <span class="comment"># 重新获取刚才变更</span></span><br><span class="line">git stash <span class="keyword">drop</span> stash@&#123;<span class="number">0</span>&#125;   <span class="comment"># 删除对应的名字</span></span><br><span class="line">git stash <span class="keyword">clear</span>     <span class="comment"># 删除</span></span><br><span class="line">git <span class="keyword">log</span> -p <span class="number">-2</span> <span class="comment"># 查看最近提交的两次更新</span></span><br><span class="line">git push origin <span class="comment">--delete [branch-name]  # 删除远程分支</span></span><br><span class="line"></span><br><span class="line">brew 常用命令</span><br><span class="line"></span><br><span class="line">brew <span class="comment">--version  # 版本</span></span><br><span class="line">which brew      <span class="comment"># 安装路径</span></span><br><span class="line">brew <span class="keyword">install</span>    <span class="comment"># 安装包</span></span><br><span class="line">brew <span class="keyword">search</span>     <span class="comment"># 搜索</span></span><br><span class="line">brew <span class="keyword">update</span>     <span class="comment"># 更新</span></span><br><span class="line">brew <span class="keyword">list</span>       <span class="comment"># 列表</span></span><br><span class="line">brew info []    <span class="comment"># 包信息</span></span><br><span class="line">brew deps []    <span class="comment"># 包依赖</span></span><br><span class="line">brew <span class="keyword">server</span>     <span class="comment"># web 服务</span></span><br><span class="line">brew -<span class="keyword">help</span>      <span class="comment"># 帮助</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mongoldb</span><br><span class="line"></span><br><span class="line">mongod      <span class="comment"># 启动服务</span></span><br><span class="line">mongo       <span class="comment"># 进入命令</span></span><br><span class="line">mongod <span class="comment">--logpath /data/db/mongod.log # 设置日志位置</span></span><br><span class="line"><span class="keyword">show</span> dbs    <span class="comment"># 查询所有数据列表</span></span><br><span class="line">db          <span class="comment"># 显示单亲数据库对象或集合</span></span><br><span class="line"><span class="keyword">use</span>         <span class="comment"># 连接到指定的数据库</span></span><br><span class="line">db.runoob.insert(&#123;&#125;) <span class="comment"># 插入数据runoob数据库名集合</span></span><br><span class="line">db.dropDatabase();  <span class="comment"># 删除单亲数据库，默认test，db命令可以查看单亲数据库名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql</span><br><span class="line">查询多个字段中任一个</span><br><span class="line">and CONCAT(IFNULL(a.problem,''),IFNULL(answers,'')) like '%制度%'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node利用n进行升级</span><br><span class="line">sudo npm <span class="keyword">install</span> -g n   <span class="comment"># 全局安装升级node工具包n</span></span><br><span class="line">sudo n stable           <span class="comment"># 安装最新稳定版node</span></span><br><span class="line">n                       <span class="comment"># 显示已安装的node</span></span><br><span class="line">n latest                <span class="comment"># 安装最新版本node</span></span><br><span class="line">n lts                   <span class="comment"># 安装最新长期维护版(LTS)node</span></span><br><span class="line">n &lt;<span class="keyword">version</span>&gt;             <span class="comment"># 根据提供的版本号安装node</span></span><br><span class="line"></span><br><span class="line">npm升级</span><br><span class="line">npm <span class="keyword">install</span> -g npm-<span class="keyword">check</span>   <span class="comment"># 全局安装npm升级工具包</span></span><br><span class="line"></span><br><span class="line">npm-<span class="keyword">check</span> -gu              <span class="comment"># 检查更新全局依赖包</span></span><br><span class="line">npm-<span class="keyword">check</span> -u               <span class="comment"># 检查当前项目依赖</span></span><br><span class="line"></span><br><span class="line">npm config ls          <span class="comment"># 查询npm配置</span></span><br><span class="line"></span><br><span class="line">npm config <span class="keyword">set</span> registry <span class="keyword">http</span>://registry.npmjs.org/  <span class="comment"># 全局切换官网镜像</span></span><br><span class="line">npm config <span class="keyword">set</span> registry https://registry.npm.taobao.org  <span class="comment"># 全局切换到淘宝镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布模块</span></span><br><span class="line">$ npm publish [<span class="keyword">name</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除模块 </span></span><br><span class="line">$ npm unpublish [<span class="keyword">name</span>]</span><br><span class="line"></span><br><span class="line">yarn 包管理器</span><br><span class="line"></span><br><span class="line">yarn init          <span class="comment"># 初始化项目</span></span><br><span class="line">yarn <span class="keyword">add</span> [<span class="keyword">package</span>]          <span class="comment"># 添加依赖</span></span><br><span class="line">yarn <span class="keyword">add</span> [<span class="keyword">package</span>]@[<span class="keyword">version</span>]</span><br><span class="line">yarn <span class="keyword">add</span> [<span class="keyword">package</span>]@[tag]</span><br><span class="line"></span><br><span class="line">yarn <span class="keyword">upgrade</span> [<span class="keyword">package</span>] <span class="comment"># 升级依赖</span></span><br><span class="line">yarn remove [<span class="keyword">package</span>]  <span class="comment"># 移除依赖</span></span><br><span class="line">yarn <span class="keyword">install</span> 或者yarn   <span class="comment"># 安装项目所有依赖</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端常用命令&quot;&gt;&lt;a href=&quot;#前端常用命令&quot; class=&quot;headerlink&quot; title=&quot;前端常用命令&quot;&gt;&lt;/a&gt;前端常用命令&lt;/h2&gt;&lt;p&gt;搜集一些经常使用到的命令，整理到一起，方便查阅。&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="//website.cwzcfj.cn/tags/git/"/>
    
      <category term="命令" scheme="//website.cwzcfj.cn/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>kubenetes集群环境</title>
    <link href="//website.cwzcfj.cn/2019/04/17/kubenetes%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/"/>
    <id>//website.cwzcfj.cn/2019/04/17/kubenetes集群环境/</id>
    <published>2019-04-17T13:59:27.000Z</published>
    <updated>2022-09-04T09:15:42.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Minikube-安装"><a href="#Minikube-安装" class="headerlink" title="Minikube 安装"></a>Minikube 安装</h2><p>Minikube是一个快速搭建单节点kubeneter集群的工具<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew cask install minikube</span><br><span class="line"><span class="comment">//查看系统版本</span></span><br><span class="line">minikube <span class="keyword">version</span></span><br></pre></td></tr></table></figure></p><h2 id="kubectl-安装"><a href="#kubectl-安装" class="headerlink" title="kubectl 安装"></a>kubectl 安装</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl -LO https://stroage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/darwin/amd64/kubectl   安装最新版</span></span><br><span class="line"><span class="comment"># chmod +x ./kubectl  赋二进制文件执行权限</span></span><br><span class="line"><span class="comment"># sudo mv ./kubectl /usr/local/bin/kubectl   将二进制文件移到path中</span></span><br><span class="line"><span class="comment"># kubectl version</span></span><br><span class="line"></span><br><span class="line">minikube <span class="keyword">start</span> //去创建k8s环境</span><br><span class="line"></span><br><span class="line">//执行结束可以通过kubectl cluster-info 查看集群信息 去连一下k8s api <span class="keyword">server</span></span><br><span class="line">minikube ssh //进入虚拟机，进入集群，查看<span class="keyword">container</span>运行起来了</span><br><span class="line">docker ps</span><br><span class="line">//退出，运行</span><br><span class="line">minikube dashboard  <span class="comment"># UI界面</span></span><br><span class="line">minikube <span class="keyword">delete</span>   <span class="comment"># 删除已运行的Minikube实例</span></span><br><span class="line">minikube <span class="keyword">stop</span>     <span class="comment"># 停止已运行的Minikube实例</span></span><br><span class="line">minikube <span class="keyword">logs</span>     <span class="comment"># 查看日志</span></span><br><span class="line"></span><br><span class="line">//运行nginx</span><br><span class="line"><span class="comment"># 运行一个nginx的pod, 然后导出运行的nginx服务</span></span><br><span class="line">kubectl run hello <span class="comment">--image=nginx --port=80</span></span><br><span class="line">kubectl expose deployment hello <span class="comment">--type=NodePort</span></span><br><span class="line"></span><br><span class="line">//命令</span><br><span class="line">minikube <span class="keyword">status</span></span><br><span class="line">minikube docker-env</span><br><span class="line">kubectl <span class="keyword">get</span> nodes <span class="comment"># 显示本地节点</span></span><br><span class="line">kubectl <span class="keyword">get</span> <span class="keyword">all</span>   <span class="comment"># 显示所有资源 包括Pod, Service, Deployment, RS 等</span></span><br><span class="line">kubectl <span class="keyword">get</span> <span class="keyword">all</span> -o wide <span class="comment"># 展示更多的信息, 包括镜像地址等</span></span><br><span class="line">kubectl <span class="keyword">get</span> pod <span class="comment">--all-namespaces   //查看所有服务就绪</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>) 命令行直接创建namespace</span><br><span class="line">kubectl <span class="keyword">create</span> namespace <span class="keyword">new</span>-namespace</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) 通过文件创建</span><br><span class="line">cat my-namespace.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line"><span class="keyword">name</span>: <span class="keyword">new</span>-namespace</span><br><span class="line">kubectl <span class="keyword">create</span> -f ./my-namespace.yaml</span><br><span class="line">kubectl <span class="keyword">apply</span> -f</span><br><span class="line">kubectl -n kub-<span class="keyword">system</span> edit service kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">kubectl <span class="keyword">delete</span> -f kubernetes-dashboard.yaml</span><br><span class="line">//删除</span><br><span class="line">kubectl <span class="keyword">delete</span> namespace <span class="keyword">new</span>-namespace <span class="comment"># 删除一个namespace会自动删除所有属于该namespace的资源，default和kube-system 命名空间不可删除。</span></span><br><span class="line"></span><br><span class="line">kubectl <span class="keyword">get</span> pod <span class="comment"># 显示所有pod</span></span><br><span class="line">kubectl <span class="keyword">get</span> serveice <span class="comment"># 显示所有server</span></span><br><span class="line">kubectl <span class="keyword">describe</span> pods <span class="comment"># 查看错误log</span></span><br><span class="line">kubectl <span class="keyword">get</span> rc  <span class="comment"># 显示所有rc</span></span><br><span class="line">kubectl <span class="keyword">delete</span> rc rcname <span class="comment"># 删除rc</span></span><br><span class="line">kubectl <span class="keyword">delete</span> service servicename <span class="comment"># 删除server</span></span><br><span class="line">kubectl <span class="keyword">delete</span> pod podname <span class="comment"># 删除pod 触发了replicas的确保机制，那么我们删除deployment deployment进行删除，则全部删除.</span></span><br><span class="line">kubectl <span class="keyword">delete</span> deployment podname</span><br><span class="line"></span><br><span class="line">kubectl <span class="keyword">delete</span> pod -<span class="keyword">all</span> <span class="comment"># 删除所有</span></span><br><span class="line"></span><br><span class="line">启动cluster</span><br><span class="line">minikube <span class="keyword">start</span></span><br><span class="line">kubectl <span class="keyword">get</span> pods <span class="comment">--all-namespace</span></span><br><span class="line">kubectl <span class="keyword">get</span> nodes</span><br><span class="line">eval $(minikube docker-env)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 创建并启动minikube虚拟机</span><br><span class="line">$ minikube <span class="keyword">start</span></span><br><span class="line"><span class="keyword">Starting</span> <span class="keyword">local</span> Kubernetes cluster...</span><br><span class="line">Running pre-<span class="keyword">create</span> checks...</span><br><span class="line">Creating machine...</span><br><span class="line"><span class="keyword">Starting</span> <span class="keyword">local</span> Kubernetes cluster...</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 创建 hello-minikube 部署</span><br><span class="line">$ kubectl run hello-minikube <span class="comment">--image=tomcat:8.0 --port=8080</span></span><br><span class="line">deployment <span class="string">"hello-minikube"</span> created</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 发布服务 hello-minikube</span><br><span class="line">$ kubectl expose deployment hello-minikube <span class="comment">--type=NodePort</span></span><br><span class="line">service <span class="string">"hello-minikube"</span> exposed</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 查看 pods</span><br><span class="line">$ kubectl <span class="keyword">get</span> pods</span><br><span class="line"><span class="keyword">NAME</span>                             READY    <span class="keyword">STATUS</span>             RESTARTS  AGE</span><br><span class="line">hello-minikube<span class="number">-598805112</span><span class="number">-3</span>bzmf    <span class="number">1</span>/<span class="number">1</span>     ContainerCreating    <span class="number">0</span>       <span class="number">5</span>s</span><br><span class="line">注意：刚开始时， pod 没有完全创建好的时候，状态是ContainerCreating, 当部署完成，状态就变成了Running.</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="keyword">get</span> pods</span><br><span class="line"><span class="keyword">NAME</span>                             READY    <span class="keyword">STATUS</span>             RESTARTS  AGE</span><br><span class="line">hello-minikube<span class="number">-598805112</span><span class="number">-3</span>bzmf    <span class="number">1</span>/<span class="number">1</span>     Running              <span class="number">0</span>       <span class="number">25</span>s</span><br><span class="line"></span><br><span class="line">用<span class="keyword">describe</span> 可以查询失败的pod</span><br><span class="line">kubectl <span class="keyword">describe</span> pod hello-minikube<span class="number">-598805112</span><span class="number">-3</span>bzmf</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 获取服务地址</span><br><span class="line">$ minikube service hello-minikube <span class="comment">--url</span></span><br><span class="line"><span class="keyword">http</span>:xx.xx.xx.xx:<span class="number">30724</span></span><br><span class="line">$ minikube service hello-minikube   将直接打开地址到默认浏览器上。</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 停止minikube虚拟机</span><br><span class="line">$ minikube <span class="keyword">stop</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Minikube-安装&quot;&gt;&lt;a href=&quot;#Minikube-安装&quot; class=&quot;headerlink&quot; title=&quot;Minikube 安装&quot;&gt;&lt;/a&gt;Minikube 安装&lt;/h2&gt;&lt;p&gt;Minikube是一个快速搭建单节点kubeneter集群的工具&lt;b
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="环境搭建" scheme="//website.cwzcfj.cn/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="k8s" scheme="//website.cwzcfj.cn/tags/k8s/"/>
    
      <category term="kubenetes" scheme="//website.cwzcfj.cn/tags/kubenetes/"/>
    
  </entry>
  
  <entry>
    <title>javaScript 正则表达式</title>
    <link href="//website.cwzcfj.cn/2019/04/15/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>//website.cwzcfj.cn/2019/04/15/js正则表达式/</id>
    <published>2019-04-15T15:57:20.000Z</published>
    <updated>2022-09-04T09:22:00.652Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式规则"><a href="#正则表达式规则" class="headerlink" title="正则表达式规则"></a>正则表达式规则</h3><ol><li><p>普通字符</p><p> 字母、数字、汉子、下划线、以及没有特殊定义的标点符号，都是普通字符。</p></li><li><p>简单转义字符</p><p>  采用前面加”/“的方法进行。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\r,</span> <span class="string">\n</span>  代表回车和换行符</span><br><span class="line"></span><br><span class="line"><span class="string">\t</span>      制表符 </span><br><span class="line"></span><br><span class="line"><span class="string">\/</span>      代表 <span class="string">"/"</span> 本身</span><br><span class="line"></span><br><span class="line">^, $ 都有特殊意义，如果要想匹配字符串中 <span class="string">"^"</span> 和 <span class="string">"$"</span> 字符，则表达式就需要写成 <span class="string">"\^"</span> 和 <span class="string">"\$"</span>。</span><br><span class="line"></span><br><span class="line"><span class="string">\^</span>   匹配 ^ 符号本身</span><br><span class="line"></span><br><span class="line"><span class="string">\$</span>匹配 $ 符号本身</span><br><span class="line"></span><br><span class="line">.匹配小数点（.）本身</span><br></pre></td></tr></table></figure></li><li><p>能够与 ‘多种字符’ 匹配的表达式</p><p>  正则表达式中的一些表示方法，可以匹配’多种字符’其中的任意一个字符，比如”\d”可以匹配任意一个数字。虽然可以匹配其中任意的字符，但是只能是一个，不是多个。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\d   任意一个数字，<span class="number">0</span>~<span class="number">9</span>中的任意一个</span><br><span class="line">\w   任意一个字母、数字、下划线，A~Z,a~z,<span class="number">0</span>~<span class="number">9</span>,_中的任意一个</span><br><span class="line">\s   包含空格、制表符、换页符等空白字符的其中任意一个</span><br><span class="line">.    小数点可以匹配除换行符（/n）以外任意一个字符</span><br></pre></td></tr></table></figure></li><li><p>自定义能够匹配’多种字符’的表达式</p><p>  使用方括号[]包含一系列字符，能够匹配其中任意一个字符。[^]包含一系列，则能够匹配其中字符之外的任意一个字符。同样，虽然匹配但只匹配一个，不是多个。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[ab5@]</span>   匹配<span class="string">"a"</span>或<span class="string">"b"</span>或<span class="string">"5"</span>或<span class="string">"@"</span></span><br><span class="line"><span class="string">[^abc]</span>   匹配<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>之外的任意一个字符</span><br><span class="line"><span class="string">[f-k]</span>    匹配<span class="string">"f"</span>~<span class="string">"k"</span>之间的任意字母</span><br><span class="line"><span class="string">[^A-F0~3]</span>  匹配<span class="string">"A"</span>~<span class="string">"F"</span>,<span class="string">"0"</span>~<span class="string">"3"</span>之外的任意字符</span><br></pre></td></tr></table></figure></li><li><p>修饰匹配次数的特殊符号</p><p>  无论是只能匹配一种字符的表达式，还是可以匹配多种字符其中任意一个的表达式，都只能匹配一次。如果使用表达式再加上修饰匹配次数的特殊符号，那么不用重复书写表达式就可以重复匹配。</p><p>  使用方法是：”次数修饰”放在”被修饰的表达式”后边。比如：”[bcd][bcd]” 可以写成 “[bcd]{2}”。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;n&#125;    表达式重复n次，比如：<span class="string">"\w&#123;2&#125;"</span> 相当于 <span class="string">"\w\w"</span>；<span class="string">"a&#123;5&#125;"</span> 相当于 <span class="string">"aaaaa"</span></span><br><span class="line">&#123;m,n&#125;  表达式至少重复m次，最多重复n次，比如：<span class="string">"ba&#123;1,3&#125;"</span>可以匹配 <span class="string">"ba"</span>或<span class="string">"baa"</span>或<span class="string">"baaa"</span></span><br><span class="line">&#123;m,&#125;   表达式至少重复m次，比如：<span class="string">"\w\d&#123;2,&#125;"</span>可以匹配 <span class="string">"a12"</span>,<span class="string">"_456"</span>,<span class="string">"M12344"</span>...</span><br><span class="line">?      匹配表达式<span class="number">0</span>次或者<span class="number">1</span>次，相当于 &#123;<span class="number">0</span>,<span class="number">1</span>&#125;，比如：<span class="string">"a[cd]?"</span>可以匹配 <span class="string">"a"</span>,<span class="string">"ac"</span>,<span class="string">"ad"</span></span><br><span class="line">+      表达式至少出现<span class="number">1</span>次，相当于 &#123;<span class="number">1</span>,&#125;，比如：<span class="string">"a+b"</span>可以匹配 <span class="string">"ab"</span>,<span class="string">"aab"</span>,<span class="string">"aaab"</span>...</span><br><span class="line">*      表达式不出现或出现任意次，相当于 &#123;<span class="number">0</span>,&#125;，比如：<span class="string">"\^*b"</span>可以匹配 <span class="string">"b"</span>,<span class="string">"^^^b"</span>...</span><br></pre></td></tr></table></figure></li><li><p>其他一些代表抽象意义的特殊符号</p><p>  一些符号在表达式中代表抽象的特殊意义：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^    字符开始的地方匹配，不匹配任何字符</span><br><span class="line">$    字符串结束的地方匹配，不匹配任何字符</span><br><span class="line">\<span class="selector-tag">b</span>   匹配一个单词的边界，也就是单词和空格直接的位置，不匹配任何字符</span><br></pre></td></tr></table></figure><p> 一些符号可以影响表达式内部子表达式之间的关系：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|    左右两边表达式直接<span class="string">"或"</span>关系，匹配左边或者右边</span><br><span class="line">()   <span class="number">1.</span>在被修饰匹配次数时，括号内的表达式可以作为整体被修饰 <span class="number">2.</span>取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到</span><br></pre></td></tr></table></figure></li><li><p>定义表达式</p><p>  定义正则表达式有两种形式，一种是普通方式，一种是构造函数方式。</p><p>普通方式： var reg = /表达式/附加参数<br>附加参数：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">g:</span>    匹配全局</span><br><span class="line"><span class="symbol">i:</span>    不区分大小写匹配</span><br><span class="line"><span class="symbol">m:</span>    多行匹配</span><br></pre></td></tr></table></figure><p>构造函数方式： var reg = new RegExp(“表达式”，”附加参数”)；</p></li></ol><ul><li>()、[]、{}区别<ul><li>() 作用提取匹配的字符串，表达式中有几个()就会得到几个相应的匹配字符串.如(\s+)表示连续的空格字符串</li><li>[] 定义范围.如[a-zA-Z0-9]表示要匹配英文字母和数字</li><li>{} 一般用来匹配长度.如\d{3}表示3个空格，\d[1,3]，匹配1-3个空格</li></ul></li><li>^和$<ul><li>^ 匹配一个字符串的开头，如(^a)就是a开头的字符串</li><li>$ 匹配一个字符串结尾，如(b$)以b为结尾的字符串</li><li>^ 还有一个作用取反，如[^xyz]表示不包含xyz的字符</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;正则表达式规则&quot;&gt;&lt;a href=&quot;#正则表达式规则&quot; class=&quot;headerlink&quot; title=&quot;正则表达式规则&quot;&gt;&lt;/a&gt;正则表达式规则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;普通字符&lt;/p&gt;
&lt;p&gt; 字母、数字、汉子、下划线、以及没有特殊定义的标点符号，都
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="正则" scheme="//website.cwzcfj.cn/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="js" scheme="//website.cwzcfj.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>H5 Audio 对象介绍</title>
    <link href="//website.cwzcfj.cn/2019/04/15/Audio/"/>
    <id>//website.cwzcfj.cn/2019/04/15/Audio/</id>
    <published>2019-04-15T15:47:20.000Z</published>
    <updated>2022-09-04T09:24:41.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Audio-对象介绍"><a href="#Audio-对象介绍" class="headerlink" title="Audio 对象介绍"></a>Audio 对象介绍</h2><p><a href="http://www.w3school.com.cn/jsref/dom_obj_audio.asp" target="_blank" rel="noopener">详细AIP, 参w3school教程</a></p><ol><li><p>创建Audio对象，可以通过下面两种方式得到。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//方法一</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"music"</span> <span class="attr">src</span>=<span class="string">".map3"</span>&gt;</span>Your browser does not support it<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">var audio = document.getElementById('#music');</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">//方法二</span><br><span class="line">var audio = new Audio(<span class="string">'.map3'</span>);</span><br></pre></td></tr></table></figure></li><li><p>方法和属性介绍</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">audio.play();   <span class="comment">//开始播放</span></span><br><span class="line">audio.pause();  <span class="comment">//暂停</span></span><br><span class="line">audio.autoPlay = <span class="literal">true</span>/<span class="literal">false</span>  <span class="comment">//设置播放状态</span></span><br><span class="line"><span class="built_in">console</span>.log(audio.autoPlay);  <span class="comment">//获取播放状态</span></span><br><span class="line">audio.src    <span class="comment">//获取或者设置播放地址</span></span><br><span class="line">audio.volume = <span class="number">0.5</span>/<span class="number">1</span>  <span class="comment">//设置音量，最大为1,0为静音,获取音量</span></span><br><span class="line"><span class="built_in">console</span>.log(audio.volume);</span><br><span class="line">audio.loop = <span class="literal">true</span>  <span class="comment">//设置或者获取循环状态</span></span><br><span class="line"><span class="built_in">console</span>.log(audio.loop);</span><br><span class="line">audio.duration  <span class="comment">//获取音乐的长度，单位秒</span></span><br><span class="line">audio.currentTime  <span class="comment">//设置或者获取播放时间</span></span><br><span class="line">audio.ended   <span class="comment">//判断音乐是否播放完毕，只读属性</span></span><br><span class="line"></span><br><span class="line">事件</span><br><span class="line"></span><br><span class="line">playing</span><br><span class="line">当音乐开始播放，暂停后重新开始播放，设置currentTime后开始播放时触发</span><br><span class="line">audio.addEventListener(<span class="string">'playing'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'playing'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pause</span><br><span class="line">当音乐暂停时和结束时触发</span><br><span class="line">audio.addEventListener(<span class="string">'pause'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'pause'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ended</span><br><span class="line">当音乐结束时触发</span><br><span class="line">audio.addEventListener(<span class="string">'ended'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ended'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">timeupdate</span><br><span class="line"><span class="comment">//当currentTime更新时会触发timeupdate事件。</span></span><br><span class="line">audio.ontimeupdate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'timeupdate'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">volumechange</span><br><span class="line">当音量改变时触发</span><br><span class="line">audio.onvolumechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'volumechange'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Audio-对象介绍&quot;&gt;&lt;a href=&quot;#Audio-对象介绍&quot; class=&quot;headerlink&quot; title=&quot;Audio 对象介绍&quot;&gt;&lt;/a&gt;Audio 对象介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3school.com.cn/js
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="h5" scheme="//website.cwzcfj.cn/tags/h5/"/>
    
      <category term="audio" scheme="//website.cwzcfj.cn/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>Centos 笔记</title>
    <link href="//website.cwzcfj.cn/2019/04/15/centos%E7%AC%94%E8%AE%B0/"/>
    <id>//website.cwzcfj.cn/2019/04/15/centos笔记/</id>
    <published>2019-04-15T15:37:40.000Z</published>
    <updated>2022-09-04T09:26:45.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Centos使用笔记"><a href="#Centos使用笔记" class="headerlink" title="Centos使用笔记"></a>Centos使用笔记</h2><h3 id="Centos6忘记密码解决办法，root和普通用户均可"><a href="#Centos6忘记密码解决办法，root和普通用户均可" class="headerlink" title="Centos6忘记密码解决办法，root和普通用户均可?"></a>Centos6忘记密码解决办法，root和普通用户均可?</h3><p>参考地址: <a href="http://www.cnblogs.com/ljmjjy0820/p/6129893.html" target="_blank">http://www.cnblogs.com/ljmjjy0820/p/6129893.html</a></p><ol><li><p>连接ssh</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入命令：rpm -qa | grep ssh</span><br><span class="line">注：若没安装SSH则可输入：yum <span class="keyword">install</span> openssh-<span class="keyword">server</span>安装</span><br><span class="line"></span><br><span class="line">启动SSH服务</span><br><span class="line"></span><br><span class="line">输入命令：service sshd restart  重启SSH服务。</span><br><span class="line"> 命令：service sshd <span class="keyword">start</span> 启动服务 |  命令：service sshd <span class="keyword">stop</span> 停止服务  </span><br><span class="line"> 重启后可输入：netstat -antp | grep sshd 查看是否启动<span class="number">22</span>端口（可略）</span><br><span class="line"></span><br><span class="line">如何设置SSH服务为开机启动？</span><br><span class="line"></span><br><span class="line">输入命令：chkconfig sshd <span class="keyword">on</span> 即可。</span><br><span class="line">注：若是chkconfig sshd <span class="keyword">off</span>则禁止SSH开机启动。</span><br></pre></td></tr></table></figure></li><li><p>在安装完CentOS6.5以后,通过ifconfig来查看IP来使用putty软件来实现远程链接,但发现没有eth0,只有l0？</p><p> 解决参考：<a href="http://www.linuxidc.com/Linux/2015-01/111265.htm" target="_blank">http://www.linuxidc.com/Linux/2015-01/111265.htm</a></p></li></ol><p>查询\安装SSH服务<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#rpm -qa |grep ssh 检查是否装了SSH包</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#yum install openssh-server 没有的话，安装SSH服务</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#chkconfig --list sshd 检查SSHD是否在本运行级别下设置为开机启动</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#chkconfig --level 2345 sshd on  如果没设置启动就设置下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#service sshd restart  重新启动SSHD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#netstat -antp |grep sshd  看看是否启动了22端口，需要确认下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#iptables -nL  看看是否放行了22口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#iptables -I INPUT -p tcp --dport 22 -j ACCEPT 没有的话放行22端口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#iptables save 保存防火墙规则</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># vi /etc/ssh/sshd_config　   用vi打开SSH的配置文件，在这里我们先保持默认（允许普通用户通过口令登录）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#useradd lhc    添加普通用户（lhc）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#passwd lhc     修改lhc密码</span></span><br></pre></td></tr></table></figure></p><p> 3.centos ping不通外网域名，能ping通地址？<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">主机名配置</span><br><span class="line">假如要设置主机名为：centos</span><br><span class="line">1.修改network</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line">HOSTNAME=centos</span><br><span class="line">:x   <span class="comment">#保存退出</span></span><br><span class="line"></span><br><span class="line">2.VM虚拟网络，采用桥接模式</span><br><span class="line">3.vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">配置好对应的ip，GETWAY，HOSTNAME，DSN1等参数，如下所示：</span><br><span class="line"></span><br><span class="line">BOOTPROTO=static  <span class="comment">#启用静态ip地址</span></span><br><span class="line">ONBOOT=yes             <span class="comment">#开启自动启用网络连接</span></span><br><span class="line">IPADDR=192.168.79.129  <span class="comment">#设置ip地址</span></span><br><span class="line">NETMASK=255.255.255.0 <span class="comment">#设置子网掩码</span></span><br><span class="line">GATEWAY=192.168.79.2   <span class="comment">#设置网关</span></span><br><span class="line">DNS1=8.8.8.8        <span class="comment">#设置主DNS</span></span><br><span class="line">DNS2=8.8.4.4     <span class="comment">#设置备DNS</span></span><br><span class="line">IPV6INIT=no            <span class="comment">#禁用ipv6</span></span><br><span class="line">HWADDR=00:0C:29:A9:91:42</span><br><span class="line"></span><br><span class="line">service ip6tables stop   <span class="comment">#停止IPV6服务</span></span><br><span class="line">chkconfig ip6tables off      <span class="comment">#禁止ipv6开机启动</span></span><br><span class="line"></span><br><span class="line">//重启network</span><br><span class="line">service netwrok restart</span><br><span class="line">4.检查虚拟机里面网络编辑Ant配置，是否和对应本地配置匹配。这里就不截图了。</span><br></pre></td></tr></table></figure></p><p>  4.常用的命令</p><p>  地址:<a href="http://www.cnblogs.com/wangpd/p/6876825.html" target="_blank"> http://www.cnblogs.com/wangpd/p/6876825.html</a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum命令安装</span><br><span class="line">epel是社区强烈打造的免费开源发行软件包版本库。</span><br><span class="line">yum <span class="keyword">install</span> epel-<span class="keyword">release</span> -y</span><br></pre></td></tr></table></figure></p><p>yum命令<br>  地址:</p><p><a href="http://man.linuxde.net/yum" target="_blank">http://man.linuxde.net/yum</a></p><p>centos7<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">查询是否自启动</span><br><span class="line"><span class="string">systemctl </span><span class="built_in">list-unit-files</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">查询所有已启动服务</span></span><br><span class="line"><span class="string">systemctl </span><span class="built_in">list-units</span> <span class="built_in">--type=service</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">使某服务自动启动</span></span><br><span class="line"><span class="built_in">systemctl</span> <span class="string">enable </span>  <span class="string">httpd.</span><span class="string">service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使</span>某服务不自动启动</span><br><span class="line"><span class="string">systemctl </span><span class="string">disable </span><span class="string">httpd.</span><span class="string">service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">启</span>动某服务</span><br><span class="line"><span class="string">systemctl </span><span class="string">start </span><span class="string">httpd.</span><span class="string">service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">停</span>止某服务</span><br><span class="line"><span class="string">systemctl </span><span class="string">stop </span><span class="string">httpd.</span><span class="string">service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">重</span>启某服务</span><br><span class="line"><span class="string">systemctl </span><span class="string">restart </span><span class="string">httpd.</span><span class="string">service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">TCP </span><span class="string">listen</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span> <span class="string">ss </span>-<span class="string">lt</span></span><br><span class="line"><span class="string">UDP </span><span class="string">listen</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span> <span class="string">ss </span>-<span class="string">ul</span></span><br><span class="line"><span class="string">TCP连</span>线</span><br><span class="line"></span><br><span class="line"><span class="comment"># ss -t</span></span><br><span class="line"></span><br><span class="line">//查看端口使用情况</span><br><span class="line"><span class="string">ss </span>-<span class="string">tln</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ss </span>-a    查看所有服务端口</span><br></pre></td></tr></table></figure></p><p>centos firewalld简单使用</p><p>  <a href="http://blog.csdn.net/y534560449/article/details/65626183" target="_blank">http://blog.csdn.net/y534560449/article/details/65626183</a></p><p>centos PHP环境搭建</p><p><a href="http://www.cnblogs.com/zhaosiwen/p/5157757.html" target="_blank">http://www.cnblogs.com/zhaosiwen/p/5157757.html</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">//查看安装的模块</span><br><span class="line">php -m</span><br><span class="line">php -i | grep php.ini</span><br><span class="line"><span class="comment">#apache主配置文件</span></span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line"><span class="comment">#相关配置 比如vhost文件就可以创建在该目录下</span></span><br><span class="line">/etc/httpd/conf.d/</span><br><span class="line"><span class="comment">#模块配置文件 比如你要开启rewrite模块，可能你就需要到这个目录下面做一些配置了</span></span><br><span class="line">/etc/httpd/conf.modules.d/</span><br><span class="line"><span class="comment">#web可访问目录 网站根目录</span></span><br><span class="line">/var/www/html</span><br><span class="line"><span class="comment">#apache日志文件目录</span></span><br><span class="line">/var/<span class="built_in">log</span>/httpd/</span><br><span class="line"></span><br><span class="line">//查看php包</span><br><span class="line">rpm -qa | grep php</span><br><span class="line"></span><br><span class="line">rpm -qa |grep -i mysql</span><br><span class="line"></span><br><span class="line">//删除包</span><br><span class="line">yum remove php</span><br><span class="line"></span><br><span class="line">//查询是否有残留目录</span><br><span class="line">whereis php</span><br><span class="line"></span><br><span class="line">//删除查看的php包</span><br><span class="line">rpm -e *</span><br><span class="line"></span><br><span class="line">//安装php需要先添加EPEL 包的仓库源</span><br><span class="line">yum -y install epel-release</span><br><span class="line"></span><br><span class="line">//安装nginx</span><br><span class="line">yum -y install nginx</span><br><span class="line"></span><br><span class="line">//查看源目录</span><br><span class="line">cd /etc/yum.repos.d</span><br><span class="line">ls</span><br><span class="line">//清除缓存</span><br><span class="line">yum clean all</span><br><span class="line">//重新生成缓存</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>安装</span><br><span class="line">yum -y install mariadb*</span><br><span class="line"><span class="number">2.</span>开启MySQL服务</span><br><span class="line">systemctl <span class="built_in">start</span> mariadb.service</span><br><span class="line"><span class="number">3.</span>设置开机启动MySQL服务</span><br><span class="line">systemctl enable mariadb.service</span><br><span class="line"><span class="number">4.</span>设置root帐户的密码</span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line">//php7-fpm 添加另外一个仓库</span><br><span class="line">//PHP7-FPM webtatic 仓库：</span><br><span class="line">rpm -Uvh <span class="keyword">https</span>://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line"></span><br><span class="line">yum -y install php70w-fpm php70w-cli php70w-gd php70w-mcrypt php70w-mysql php70w-pear php70w-xml php70w-mbstring php70w-pdo php70w-json php70w-pecl-apcu php70w-pecl-apcu-devel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apache</span><br><span class="line">启动</span><br><span class="line">systemctl <span class="built_in">start</span> httpd</span><br><span class="line">停止</span><br><span class="line">systemctl <span class="built_in">stop</span> httpd</span><br><span class="line">重启</span><br><span class="line">systemctl restart httpd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql</span><br><span class="line">启动</span><br><span class="line">systemctl <span class="built_in">start</span> mysqld</span><br><span class="line">停止</span><br><span class="line">systemctl <span class="built_in">stop</span> mysqld</span><br><span class="line">重启</span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">php-fpm</span><br><span class="line">启动</span><br><span class="line">systemctl <span class="built_in">start</span> php-fpm</span><br><span class="line">停止</span><br><span class="line">systemctl <span class="built_in">stop</span> php-fpm</span><br><span class="line">重启</span><br><span class="line">systemctl restart php-fpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nginx</span><br><span class="line">启动</span><br><span class="line">systemctl <span class="built_in">start</span> nginx</span><br><span class="line">停止</span><br><span class="line">systemctl <span class="built_in">stop</span> nginx</span><br><span class="line">重启</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p> <a href="http://www.jianshu.com/p/999949f8fbf3" tareget="_blank" target="_blank" rel="noopener">http://www.jianshu.com/p/999949f8fbf3</a></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">查看所有打开的端口：</span> <span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zone=public</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">list</span><span class="literal">-</span><span class="comment">ports</span></span><br><span class="line"><span class="comment">更新防火墙规则：</span> <span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">reload</span></span><br><span class="line"><span class="comment">添加</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zone=public</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">add</span><span class="literal">-</span><span class="comment">port=80/tcp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">permanent</span>    <span class="comment">（</span><span class="literal">-</span><span class="literal">-</span><span class="comment">permanent永久生效，没有此参数重启后失效）</span></span><br><span class="line"><span class="comment">删除</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zone=</span> <span class="comment">public</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">remove</span><span class="literal">-</span><span class="comment">port=80/tcp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">permanent</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">permanent</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zone=public</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">add</span><span class="literal">-</span><span class="comment">port=3306/tcp</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">permanent</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zone=public</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">add</span><span class="literal">-</span><span class="comment">port=3306/udp</span></span><br><span class="line"><span class="comment">这样就开放了相应的端口。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">reload</span></span><br></pre></td></tr></table></figure><p>mysql文章</p><p><a href="http://blog.csdn.net/gebitan505/article/details/54613549" target="_blank">http://blog.csdn.net/gebitan505/article/details/54613549</a></p><p>centos7重置密码。<br><a href="http://blog.csdn.net/keepd/article/details/77151006" target="_blank">http://blog.csdn.net/keepd/article/details/77151006</a></p><p>mysql:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>用户名和密码： root root</span><br><span class="line"><span class="number">2.</span>远程连接用户名和密码： admin admin</span><br></pre></td></tr></table></figure></p><p>添加用户名和密码方法：<br><a href="http://www.cnblogs.com/chenggege/p/7761255.html" target="_blank">http://www.cnblogs.com/chenggege/p/7761255.html</a>    </p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql 语法：</span><br><span class="line"></span><br><span class="line">show databases;  <span class="comment">//查询所有db</span></span><br><span class="line">use db;  <span class="comment">//选中要操作的数据库</span></span><br><span class="line">create table tableName (</span><br><span class="line">id number,</span><br><span class="line">bookName varchar(<span class="number">20</span>),</span><br><span class="line">price varchar(<span class="number">20</span>)</span><br><span class="line">);<span class="comment">//创建表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">select</span> * <span class="keyword">from</span> tableName;<span class="comment">//查询所有信息</span></span><br><span class="line"></span><br><span class="line">slecet * <span class="keyword">from</span> tableName where <span class="built_in">type</span>=xxx;<span class="comment">//根据条件查询所有信息</span></span><br><span class="line"></span><br><span class="line">update tableName <span class="built_in">set</span> <span class="built_in">type</span>=<span class="string">'xxx'</span> where <span class="built_in">name</span>=<span class="string">"shuigu"</span>;<span class="comment">//根据条件更新某条数据</span></span><br><span class="line"></span><br><span class="line">delete <span class="keyword">from</span> tableName where <span class="built_in">name</span>=<span class="string">'xxx'</span> <span class="comment">//删除单条数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="built_in">DROP</span> DATABASE 库名;  <span class="comment">//删除db数据库</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">DROP</span> TABLE 表名；  <span class="comment">//删除表</span></span><br><span class="line"></span><br><span class="line">DELETE <span class="keyword">FROM</span> 表名;  <span class="comment">//清空表</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Centos使用笔记&quot;&gt;&lt;a href=&quot;#Centos使用笔记&quot; class=&quot;headerlink&quot; title=&quot;Centos使用笔记&quot;&gt;&lt;/a&gt;Centos使用笔记&lt;/h2&gt;&lt;h3 id=&quot;Centos6忘记密码解决办法，root和普通用户均可&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="centos7" scheme="//website.cwzcfj.cn/tags/centos7/"/>
    
      <category term="环境搭建" scheme="//website.cwzcfj.cn/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>curl常用命令</title>
    <link href="//website.cwzcfj.cn/2019/04/15/curl%E5%91%BD%E4%BB%A4/"/>
    <id>//website.cwzcfj.cn/2019/04/15/curl命令/</id>
    <published>2019-04-15T15:31:23.000Z</published>
    <updated>2022-09-04T09:35:28.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="curl使用常用命令"><a href="#curl使用常用命令" class="headerlink" title="curl使用常用命令"></a>curl使用常用命令</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">curl -o/O pathName url   <span class="string">//</span>下载文件o下载到本地并命名pathName O默认url 如下：</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 将文件下载到本地并命名为mygettext.html</span></span><br><span class="line">curl -o mygettext.html http:<span class="string">//www.gnu.org/software/gettext/manual/gettext.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件保存到本地并命名为gettext.html</span></span><br><span class="line"> curl -O http:<span class="string">//www.gnu.org/software/gettext/manual/gettext.html</span></span><br><span class="line"></span><br><span class="line"> curl -O URL1 -O URL2  <span class="string">//</span>同时获取多个</span><br><span class="line"></span><br><span class="line">断点续传，通过使用-C选项可对大文件使用断点续传功能</span><br><span class="line"><span class="comment"># 当文件在下载完成之前结束该进程</span></span><br><span class="line"> $ curl -O http:<span class="string">//www.gnu.org/software/</span>gettext/manual/gettext.html</span><br><span class="line"> <span class="comment">##############             20.1%</span></span><br><span class="line"></span><br><span class="line">Head请求：curl -l http:<span class="string">//www.mzwu.com/</span> -I</span><br><span class="line">GET请求：curl -l http:<span class="string">//www.mzwu.com/</span>?domain=mzwu.com</span><br><span class="line">curl example.com/form.cgi?data=xxx</span><br><span class="line">GET方法相对简单，只要把数据附在网址后面就行</span><br><span class="line"></span><br><span class="line">POST请求：curl -l http:<span class="string">//www.mzwu.com/</span> -d <span class="string">"domain=mzwu.com"</span></span><br><span class="line">POST方法必须把数据和网址分开，curl就要用到<span class="params">--data</span>参数。</span><br><span class="line">curl -X POST <span class="params">--data</span> <span class="string">"data=xxx"</span> example.com/form.cgi</span><br><span class="line"></span><br><span class="line">如果你的数据没有经过表单编码，还可以让curl为你编码，参数是`<span class="params">--data-urlencode</span>`。</span><br><span class="line">curl -X POST<span class="params">--data-urlencode</span> <span class="string">"date=April 1"</span> example.com/form.cgi</span><br><span class="line"></span><br><span class="line">curl默认的HTTP动词是GET，使用`-X`参数可以支持其他动词。</span><br><span class="line">curl -X POST www.example.com</span><br><span class="line">curl -X DELETE www.example.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">添加HTTP头：curl -l http:<span class="string">//www.mzwu.com/</span> -H <span class="string">"name:dnawo"</span> -H <span class="string">"sex:boy"</span></span><br><span class="line">伪造referer：curl -l http:<span class="string">//www.mzwu.com/</span> -e <span class="string">"http://www.baidu.com/"</span></span><br><span class="line">Referer字段</span><br><span class="line">有时你需要在http request头信息中，提供一个referer字段，表示你是从哪里跳转过来的。</span><br><span class="line">curl <span class="params">--referer</span> http:<span class="string">//www.example.com</span> http:<span class="string">//www.example.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -v url <span class="string">//</span>打印更多信息，包括发送的请求信息，这在调试脚本是特别有用,`-v`参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。</span><br><span class="line"></span><br><span class="line">http request之中，自行增加一个头信息。`<span class="params">--header</span>`参数就可以起到这个作用</span><br><span class="line">curl <span class="params">--header</span> <span class="string">"Content-Type:application/json"</span> http:<span class="string">//example.com</span></span><br><span class="line"></span><br><span class="line">网域需要HTTP认证，这时curl需要用到`<span class="params">--user</span>`参数</span><br><span class="line">curl <span class="params">--user</span> name<span class="function">:password</span> example.com</span><br><span class="line"></span><br><span class="line">可以显示更详细的通信过程</span><br><span class="line">curl <span class="params">--trace</span> output.txt www.sina.com 或者</span><br><span class="line">curl <span class="params">--trace-ascii</span> output.txt www.sina.com  </span><br><span class="line"></span><br><span class="line">curl -I url <span class="string">//</span>查看响应头</span><br><span class="line"></span><br><span class="line">curl -i url <span class="string">//</span>`-i`参数可以显示http response的头信息，连同网页代码一起。`-I`参数则是只显示http response的头信息。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;curl使用常用命令&quot;&gt;&lt;a href=&quot;#curl使用常用命令&quot; class=&quot;headerlink&quot; title=&quot;curl使用常用命令&quot;&gt;&lt;/a&gt;curl使用常用命令&lt;/h2&gt;&lt;figure class=&quot;highlight jboss-cli&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="curl" scheme="//website.cwzcfj.cn/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>git配置用户密码</title>
    <link href="//website.cwzcfj.cn/2019/04/15/git%E9%85%8D%E7%BD%AE/"/>
    <id>//website.cwzcfj.cn/2019/04/15/git配置/</id>
    <published>2019-04-15T15:28:34.000Z</published>
    <updated>2022-09-04T09:32:18.124Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>TortoiseGit 远程上传push代码，配置不用每次输入用户名和密码方法</li></ol></blockquote><p>配置方法：<br>    打开目录C:\Documents and Settings\Administrator\，找到.gitconfig文件，里面已经存在你已经配置好的name和email,只需在下面加人一行<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[credential]</span>  </span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure></p><p>下次只需在输入一次用户名和密码，git就会记住，而在目录C:\Documents and Settings\Administrator\目录下，有.git-credentials文件，里面就保存你的用户名和密码(注意是明文)</p><p>这样以后再链接时，就不需要输入用户名和密码.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;TortoiseGit 远程上传push代码，配置不用每次输入用户名和密码方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;配置方法：&lt;br&gt;    打开目录C:\Documents and Settings\Adminis
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="//website.cwzcfj.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>javaScript基础知识</title>
    <link href="//website.cwzcfj.cn/2019/04/15/javascript/"/>
    <id>//website.cwzcfj.cn/2019/04/15/javascript/</id>
    <published>2019-04-15T14:26:20.000Z</published>
    <updated>2022-09-04T09:35:32.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js基础知识点"><a href="#js基础知识点" class="headerlink" title="js基础知识点"></a>js基础知识点</h2><blockquote><p>js面向对象</p></blockquote><h3 id="面向对象编程（OOP）的特点"><a href="#面向对象编程（OOP）的特点" class="headerlink" title="面向对象编程（OOP）的特点:"></a>面向对象编程（OOP）的特点:</h3><ul><li>抽象： 抓住核心问题</li><li>封装： 只能通过对象来访问方法</li><li>继承： 从已有的对象下继承新的对象</li><li><p>多态： 多对象的不同的形态</p><p>面向对象是一种编程思想，把业务中看作对象，对象拥有属性和方法，对一下业务进行封装，方便维护。javaScript面向对象是通过prototype的方式来实现编程的。</p></li></ul><blockquote><p>js面向对象创建的几种方式或者实现?</p></blockquote><ol><li><p>工厂模式创建对象： 面向对象中的封装函数(内置对象)<br>就是一个函数，然后放入参数，返回对象，流水线工作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">   o.name = name;</span><br><span class="line">   o.age = age;</span><br><span class="line">   o.job = job;</span><br><span class="line">   o.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = createPerson(<span class="string">'Jack'</span>, <span class="number">19</span>, <span class="string">'SoftWare Engineer'</span>);</span><br></pre></td></tr></table></figure><p>创建对象对象交给工厂方法来实现，可以传递参数，但缺点是无法识别对象类型，因为创建对象是使用Object的原生构造函数来完成的。</p></li><li><p>构造函数模式</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age, job)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.job = job;</span><br><span class="line"><span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Jack"</span>, <span class="number">19</span>, <span class="string">'SoftWare Engineer'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"Liye"</span>, <span class="number">23</span>, <span class="string">'Mechanical Engineer'</span>);</span><br></pre></td></tr></table></figure><p>自定义的构造函数，（与普通函数一样，只是用它来创建对象），对象类型的属性和方法。它区别与工厂模式：</p><ul><li>没有显示地创建对象</li><li>直接将属性和方法赋值给this对象</li><li>没有return语句</li></ul><p>上述中person1,person2都是person的实例，因此可以用instanceof判断</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert<span class="comment">(person1 instanceof Person)</span>;<span class="comment">//true;</span></span><br><span class="line">alert<span class="comment">(person2 instanceof Person)</span>;<span class="comment">//true;</span></span><br><span class="line">alert<span class="comment">(person1 instanceof Object)</span>;<span class="comment">//true;</span></span><br><span class="line">alert<span class="comment">(person1.constructor === person2.constructor)</span>;<span class="comment">//ture;</span></span><br></pre></td></tr></table></figure><p>虽然构造函数方式比较不错，但是也存在缺点，那就是在创建对象时，特别针对对象属性指向的函数时，会重复创建函数实例，以上述代码为基础，可以改成：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age,job)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">    <span class="keyword">this</span>.getName = new Function () &#123;<span class="comment">//改写后效果与原代码相同，不过是为了方便理解</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码，创建多个实例时，会重复调用new Function();创建多个函数实例，这些函数实例还不是一个作用域中，当然这一般不会有错，但这会造成内存浪费。当然，可以在函数中定义一个getName = getName的引用，而getName函数在Person外定义，这样可以解决重复创建函数实例问题，但在效果上并没有起到封装的效果，如下所示：</p></li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name,age,job)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">    <span class="keyword">this</span>.getName = getName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;<span class="comment">//到处是代码，看着乱！！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>原型模式</p><p> js每一个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，它是通过new操作符使用函数创建的实例的原型对象，原型对象最大的特点是，所有对象实例共享它所包含的属性和方法，也就是说，所有在原型对象中创建的属性和方法都直接被所有对象实例共享。</p></li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">'Jack'</span>;<span class="comment">//使用原型来添加属性</span></span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">alert(person1.getName());<span class="comment">//Jack</span></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">alert(person1.getName === person2.getName);<span class="comment">//true;共享一个原型对象的方法</span></span><br></pre></td></tr></table></figure><p>原型与in操作符</p><p>一句话：无论原型中属性，还是对象实例的属性，都可以使用in操作符访问到；要想判断是否是实例本身的属性可以使用object.hasOwnProperty(‘attr’)来判断；<br>原型模式的缺点，它省略了为构造函数传递初始化参数，这在一定程序带来不便；另外，最主要是当对象的属性是引用类型时，它的值是不变的，总是引用同一个外部对象，所有实例对该对象的操作都会其它实例：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span></span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">'Jack'</span>;</span><br><span class="line">Person.prototype.lessons = [<span class="string">'Math'</span>,<span class="string">'Physics'</span>];</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="type">Person</span>();</span><br><span class="line">person1.lessons.push(<span class="string">'Biology'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="type">Person</span>();</span><br><span class="line">alert(person2.lessons);<span class="comment">//Math,Physics,Biology，person1修改影响了person2</span></span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>组合构造函数及原型模式</p><p>目前最为常用的定义类型方式，是组合构造函数模式与原型模式。构造函数模式用于定义实例的属性，而原型模式用于定义方法和共享的属性。结果，每个实例都会有自己的一份实例属性的副本，但同时又共享着对方方法的引用，最大限度的节约内存。此外，组合模式还支持向构造函数传递参数，可谓是集两家之所长。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age, job)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.age = age;</span><br><span class="line">   <span class="keyword">this</span>.job = job;</span><br><span class="line">   <span class="keyword">this</span>.lessons = [<span class="string">'Math'</span>, <span class="string">'Physics'</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    constructor: Person,<span class="comment">//原型字面量方式会将对象的constructor变为Object，此外强制指回Person</span></span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">19</span>, <span class="string">'SoftWare Engneer'</span>);</span><br><span class="line">person1.lessons.push(<span class="string">'Biology'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Lily'</span>, <span class="number">39</span>, <span class="string">'Mechanical Engneer'</span>);</span><br><span class="line">alert(person1.lessons);<span class="comment">//Math,Physics,Biology</span></span><br><span class="line">alert(person2.lessons);<span class="comment">//Math,Physics</span></span><br><span class="line">alert(person1.getName === person2.getName);<span class="comment">//true,//共享原型中定义方法</span></span><br></pre></td></tr></table></figure><p>  在所接触的JS库中，jQuery类型的封装就是使用组合模式来实例的</p></li><li><p>动态原型模式</p><p>组合模式中实例属性与共享方法（由原型定义）是分离的，这与纯面向对象语言不太一致；动态原型模式将所有构造信息都封装在构造函数中，又保持了组合的优点。其原理就是通过判断构造函数的原型中是否已经定义了共享的方法或属性，如果没有则定义，否则不再执行定义过程。该方式只原型上方法或属性只定义一次，且将所有构造过程都封装在构造函数中，对原型所做的修改能立即体现所有实例中：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name, age, job)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.age = age;</span><br><span class="line">   <span class="keyword">this</span>.job = job;</span><br><span class="line">   <span class="keyword">this</span>.lessons = [<span class="string">'Math'</span>, <span class="string">'Physics'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName != <span class="string">'function'</span>) &#123;<span class="comment">//通过判断实例封装</span></span><br><span class="line">　　Person.prototype = &#123;</span><br><span class="line">　　　　constructor: Person,<span class="comment">//原型字面量方式会将对象的constructor变为Object，此外强制指回Person</span></span><br><span class="line">　　　　getName: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Jack'</span>, <span class="number">19</span>, <span class="string">'SoftWare Engneer'</span>);</span><br><span class="line">person1.lessons.push(<span class="string">'Biology'</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Lily'</span>, <span class="number">39</span>, <span class="string">'Mechanical Engneer'</span>);</span><br><span class="line">alert(person1.lessons);<span class="comment">//Math,Physics,Biology</span></span><br><span class="line">alert(person2.lessons);<span class="comment">//Math,Physics</span></span><br><span class="line">alert(person1.getName === person2.getName);<span class="comment">//true,//共享原型中定义方法</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>常用</p></blockquote><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Object</span>.prototype.toString.call();用来判断对象的类型。</span><br><span class="line">toLowerCase(); 转小写</span><br><span class="line">toUpperCase(); 转大写</span><br><span class="line"><span class="built_in">str</span>.charAt(index)；   <span class="comment">//根据index索引获取字符串</span></span><br><span class="line"></span><br><span class="line">Math.<span class="built_in">random</span>(); <span class="comment">//获取随机数（包含0到1不包含1）</span></span><br><span class="line"><span class="comment">//生成整数,如生成20以下整数（0-19）利用floor向下取整</span></span><br><span class="line">Math.<span class="built_in">floor</span>(Math.<span class="built_in">random</span>()*<span class="number">20</span>);</span><br><span class="line"><span class="comment">//获取某个值之间的随机数</span></span><br><span class="line">Math.<span class="built_in">floor</span>(Math.<span class="built_in">random</span>() * (<span class="built_in">max</span> - <span class="built_in">min</span> + <span class="number">1</span>)) + <span class="built_in">min</span>；</span><br><span class="line">Math.<span class="built_in">max</span>(x,y);  <span class="comment">//返回最大值</span></span><br><span class="line">Math.<span class="built_in">min</span>(x,y);  <span class="comment">//返回最小值</span></span><br><span class="line">Math.<span class="built_in">round</span>(x);  <span class="comment">//四舍五入</span></span><br><span class="line">Math.<span class="built_in">floor</span>();  <span class="comment">//向下舍入</span></span><br><span class="line">Math.<span class="built_in">abs</span>();    <span class="comment">//返回绝对值</span></span><br><span class="line"></span><br><span class="line">transform</span><br><span class="line"><span class="built_in">rotate</span>(deg)</span><br><span class="line">skew(x,y)</span><br><span class="line"><span class="built_in">scale</span>(x,y)</span><br><span class="line"><span class="built_in">translate</span>(x,y)</span><br></pre></td></tr></table></figure><blockquote><p>js继承</p></blockquote><p>  继承方式：</p><p>　　1、拷贝继承：通用型  有new无new都可以用</p><p>　　2、类式继承：new构造函数—利用构造函数（类）继承的方式</p><p>　　3、原型继承：无new的对象—借助原型来实现对象继承对象</p><p>　　属性继承：调用父类的构造函数call</p><p>　　方法继承：用for in的形式 拷贝继承（jq也用拷贝继承）<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">       name: <span class="string">'小米'</span></span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">//拷贝继承</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">extend</span><span class="params">(obj1, obj2)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> obj2) &#123;</span><br><span class="line">           obj1[attr] = obj2[attr];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//原型继承</span></span><br><span class="line">       <span class="keyword">var</span> b=cloneObj(a);</span><br><span class="line">       b.name=<span class="string">'小乔'</span>;</span><br><span class="line">       alert(a.name);</span><br><span class="line">       alert(b.name);</span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">cloneObj</span><span class="params">(obj)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> F=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">           F.prototype=obj;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">       &#125;</span><br><span class="line">   <span class="comment">//类式继承</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">A</span><span class="params">()</span> </span>&#123;<span class="comment">//父类</span></span><br><span class="line">       <span class="keyword">this</span>.name=<span class="string">'小米'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   A.prototype.showName=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">       alert(<span class="keyword">this</span>.name);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">B</span><span class="params">()</span> </span>&#123;<span class="comment">//子类</span></span><br><span class="line">       A.call(<span class="keyword">this</span>);<span class="comment">//属性和方法分开继承</span></span><br><span class="line">   &#125;</span><br><span class="line">　　　　<span class="comment">//B.prototype=new A();//一句话实现继承，但会有很多问题，比如指向问题，属性会互相影响</span></span><br><span class="line">　　　　<span class="comment">//类式继承改进：至少由以下四句实现方法的继承，属性需要分开继承</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> F=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">   F.prototype=A.prototype;</span><br><span class="line">   B.prototype=<span class="keyword">new</span> F();</span><br><span class="line">   B.prototype.constructor=A;<span class="comment">//修正指向问题</span></span><br><span class="line">   <span class="keyword">var</span> b1=<span class="keyword">new</span> B();</span><br><span class="line">   b1.name=<span class="string">'笑笑'</span>;</span><br><span class="line">   b1.showName();</span><br></pre></td></tr></table></figure></p><blockquote><p>js闭包</p></blockquote><p>闭包就是一个函数引用另外一个函数的变量，因为变量被引用着所以不会被回收，因此可以用来封装一个私有变量。这是优点也是缺点，不必要的闭包只会徒增内存消耗！<br>执行环境、作用域链、垃圾回收机制、函数嵌套</p><blockquote><p>事件委托的优点和缺点</p></blockquote><p>优点：</p><ol><li>减少事件注册，节省内存。比如：table代理所有的td的click.在ul上代理所有li的click事件。</li><li>简化了dom节点更新时，相应事件的更新。</li></ol><p>缺点：</p><ol><li>事件委托基于冒泡，对应不冒泡的不支持。</li><li>层级过多，冒泡过程中，可能被某层阻止掉。</li><li>把所有的事件都用代理可能会出现事件误判。 </li></ol><blockquote><p>ES6语法</p></blockquote><p> 一. 块级作用域绑定</p><p> (1). let声明</p><p> 使用let声明变量的语法和使用var声明的语法是一样的。但是let声明的变量的作用域会限制在当前的代码块中。这是let与var的最大区别。用 let 声明的变量具有<strong>块级作用域</strong>，只能在声明的块中访问，在块外面无法访问</p><p> (2). const声明</p><p>ES6 使用const来声明的变量称之为常量。这意味着它们不能再次被赋值,所有的 const 声明的变量都必须在声明处初始化</p><p> 二. 函数新增特性</p><p> (1). 带默认参数的函数<br> <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">makeRequest</span><span class="params">(url, timeout, callback)</span> </span>&#123;</span><br><span class="line">    timeout = timeout || <span class="number">2000</span>;</span><br><span class="line">    callback = callback || <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 一般在函数内部需要做一些默认值的处理，有个bug，timeout是0的时候也会当做假值来处理，从而给赋值默认值2000.</p><p>ES6从语言层面面上增加了 默认值的 支持<br>这个函数如果只传入第一个参数，后面两个不传入，则会使用默认值。如果后面两个也传入了参数，则不会使用默认值。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> makeRequest(url, timeout = <span class="number">2000</span>, callback = <span class="function"><span class="keyword">function</span><span class="params">()</span></span> &#123;&#125;) &#123;</span><br><span class="line">    // 其余代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> (2). 默认参数对 arguments 对象的影响 </p><p>ES6参数默认值的时候，不管是否是在严格模式下，都和ES5的严格模式相同。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">   <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(a, b = 30)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] === a); <span class="comment">//true</span></span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>] === b); <span class="comment">//true</span></span></span><br><span class="line"><span class="undefined">       a = 10;</span></span><br><span class="line"><span class="undefined">       b = 20;</span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]  === a); <span class="comment">//false。  由于b使用了默认值。虽然a没有使用默认值，但是仍然表现的和严格模式一样。</span></span></span><br><span class="line"><span class="javascript">       <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>] === b); <span class="comment">//false。  b使用了默认值，所以表现的和严格模式一样。</span></span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">   foo(1, 2);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> (3).默认参数表达式</p><p>参数的默认值，也可以是一个表达式或者函数调用等<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="number">5</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">first, second = getValue(</span>)) </span>&#123; <span class="comment">//表示使用getValue这个函数的返回值作为second的默认值。</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> first + second;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">1</span>));     <span class="comment">// 2.  调用add函数的时候，传入了第二个参数，则以传入的参数为准。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(add(<span class="number">1</span>));        <span class="comment">// 6。 调用add函数的时候，没有传入第二个参数，则会调用getValue函数。</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>getValue()只会在调用add且不传入第二个参数的时候才会去调用。不是在解析阶段调用的。</p><p>  （4）. 未命名参数问题</p><p>Javascript并不限制传入的参数的数量, 在ES5之前，我们一般可以通过arguments对象来获取到未命名参数的值。但是罗显繁琐<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(a)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>])  <span class="comment">//取得传入的多余的参数。</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    foo(2, 3);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>ES6，提供了一种更加优雅处理未命名参数的问题：剩余参数(Rest Parameters)</p><p>语法：function a(a, … b){ }</p><p>剩余参数使用三个点( … )和变量名来表示。</p><p>  (5).  函数中的扩展运算符</p><p>Math中的max函数可以返回任意多个参数中的最大值。但是如果这些参数在一个数组中，则没有办法直接传入。以前通用的做法是使用applay方法.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> values = [<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>]  </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, values));  <span class="comment">// 100</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这种方法虽然可行，但是总是不是那么直观.ES6提供的扩展运算符可以很容易的解决这个问题。在数组前加前缀 … (三个点)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> values = [<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>]</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...values));  <span class="comment">//使用扩展运算符。相当于拆解了数组了。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...values, <span class="number">200</span>));  <span class="comment">//也可以使用扩展运算符和参数的混用，则这个时候就有 5 个数参与比较了。</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> 三. 全新的函数：箭头函数（=&gt;）</p><p>  箭头函数可以赋值给变量，也可以像匿名函数一样直接作为参数传递<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">return</span> num1 + num2;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(sum(<span class="number">3</span>, <span class="number">4</span>));</span></span><br><span class="line"><span class="actionscript">   <span class="comment">//前面的箭头函数等同于下面的传统函数</span></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> <span class="params">(num1, num2)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">       <span class="keyword">return</span> num1 + num2;</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="javascript">   <span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">4</span>))</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果函数体内只有一行代码，则包裹函数体的 大括号 ({ })完全可以省略。如果有return，return关键字也可以省略。</p><p>如果函数体内有多条语句，则 {} 不能省略。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(sum(<span class="number">5</span>, <span class="number">4</span>));</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//前面的箭头函数等同于下面的传统函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> <span class="params">(num1, num2)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> num1 + num2;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">4</span>));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//如果这一行代码是没有返回值的，则方法的返回自也是undefined</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> foo = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"aaa"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(foo(<span class="number">3</span>,<span class="number">4</span>));  <span class="comment">//这个地方的返回值就是undefined</span></span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果箭头函数只有一个参数，则包裹参数的小括号可以省略。其余情况下都不可以省略。当然如果不传入参数也不可以省略<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> foo = <span class="function"><span class="params">a</span>=&gt;</span> a+<span class="number">3</span>; <span class="comment">//因为只有一个参数，所以()可以省略</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(foo(<span class="number">4</span>)); <span class="comment">// 7</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果想直接返回一个js对象，而且还不想添加传统的大括号和return，则必须给整个对象添加一个小括号 ()<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    var foo = ()=&gt;(</span><span class="xquery"><span class="built_in">&#123;name</span>:<span class="string">"lisi"</span>, age:<span class="number">30</span>&#125;</span><span class="xml">);</span></span><br><span class="line"><span class="xml">    console.log(foo());</span></span><br><span class="line"><span class="xml">    //等同于下面的；</span></span><br><span class="line"><span class="xml">    var foo1 = ()=&gt;</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="xquery">           <span class="built_in"> name</span>:<span class="string">"lisi"</span>,</span></span><br><span class="line"><span class="xquery">            age : <span class="number">30</span></span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p> 使用箭头函数实现函数自执行<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    var person = (name =&gt; </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="xquery">               <span class="built_in"> name</span>:<span class="built_in"> name</span>,</span></span><br><span class="line"><span class="xquery">                age: <span class="number">30</span></span></span><br><span class="line"><span class="xquery">            &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    )("zs");</span></span><br><span class="line"><span class="xml">    console.log(person);</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>箭头函数中无this绑定</p><p>四. 对象功能的扩展</p><p>(1) 简写的属性初始化,ES6中简化成如下的形式:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createPerson</span><span class="params">(name, age)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//返回一个对象：属性名和参数名相同。</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            name,  <span class="comment">//当对象属性名和本地变量名相同时，可以省略冒号和值</span></span></span><br><span class="line"><span class="undefined">            age</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(createPerson(<span class="string">"lisi"</span>, <span class="number">30</span>)); <span class="comment">// &#123;name:"lisi", age:30&#125;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(2) 简写的方法声明<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> person = &#123;</span></span><br><span class="line"><span class="actionscript">        name:<span class="string">'李四'</span>,</span></span><br><span class="line"><span class="undefined">        sayHell() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"我的名字是："</span> + <span class="keyword">this</span>.name);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    person.sayHell()</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>省略了冒号和function看起来更简洁</p><p>(3) 在字面量中动态计算属性名</p><p>在ES5之前，如果属性名是个变量或者需要动态计算，则只能通过 对象.[变量名] 的方式去访问。而且这种动态计算属性名的方式 在字面量中 是无法使用的.<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    var p = </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">       <span class="built_in"> name</span> : <span class="string">'李四'</span>,</span></span><br><span class="line"><span class="xquery">        age : <span class="number">20</span></span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    var attName = 'name';</span></span><br><span class="line"><span class="xml">    console.log(p[attName]) //这里 attName表示的是一个变量名。</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>在ES6中，把属性名用[ ]括起来，则括号中就可以引用提前定义的变量。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> attName = <span class="string">'name'</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> p = &#123;</span></span><br><span class="line"><span class="actionscript">        [attName] : <span class="string">'李四'</span>,  <span class="comment">// 引用了变量attName。相当于添加了一个属性名为name的属性</span></span></span><br><span class="line"><span class="undefined">        age : 20</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p[attName])  <span class="comment">// 李四</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> (4)新增的方法</p><p>  <strong>Object.is()</strong>;</p><p>使用比较操作符（==）或严格比较操作符（===）.许多开发者为了避免在比较的过程中发生强制类型转换，更倾向于后者。但即使是严格等于操作符，它也不是万能的。例如，它认为 +0 和 -0 是相等的，虽然它们在 JavaScript 引擎中表示的方式不同。同样 NaN === NaN 会返回 false，所以必须使用 isNaN() 函数才能判断 NaN 。</p><p>ECMAScript 6 引入了 Object.is() 方法来补偿严格等于操作符怪异行为的过失。该函数接受两个参数并在它们相等的返回 true 。只有两者在类型和值都相同的情况下才会判为相等。如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> == <span class="number">-0</span>);              <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === <span class="number">-0</span>);             <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>));     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>);            <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>);           <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>));   <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> == <span class="number">5</span>);                <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> == <span class="string">"5"</span>);              <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> === <span class="number">5</span>);               <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> === <span class="string">"5"</span>);             <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">5</span>, <span class="number">5</span>));       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">5</span>, <span class="string">"5"</span>));     <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>Object.is() 的表现和 === 是相同的。它们之间的区别是前者 认为 +0 和 -0 不相等而 NaN 和 NaN 则是相同的。不过弃用后者是完全没有必要的。何时选择 Object.is() 与 == 或 === 取决于代码的实际情况</p><p>  <strong>Object.assign()</strong></p><p>assing可以把一个对象的属性和访问完整的转copy到另外一个对象中。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    var p = </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">       <span class="built_in"> name</span> : <span class="string">"lisi"</span>,</span></span><br><span class="line"><span class="xquery">        age : <span class="number">20</span>,</span></span><br><span class="line"><span class="xquery">        friends : [<span class="string">'张三'</span>, <span class="string">'李四'</span>]</span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    var p1 = </span><span class="xquery">&#123;&#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">    Object.assign(p1, p); //则p1中就有了与p相同的属性和方法.  p1是接受者，p是提供者</span></span><br><span class="line"><span class="xml">    console.log(p1);</span></span><br><span class="line"><span class="xml">    //这种copy是浅copy，也就是说如果属性值是对象的话，只是copy的对象的地址值(引用）</span></span><br><span class="line"><span class="xml">    console.log(p1.friends == p.friends);  //true   p1和p的friends同事指向了同一个数组。</span></span><br><span class="line"><span class="xml">    p.friends.push("王五");</span></span><br><span class="line"><span class="xml">    console.log(p1.friends); //['张三', '李四', '王五']</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>assign方法可以接受任意多的提供者。意味着后面提供者的同名属性和覆盖前面提供者的属性值<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">       var p = </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">       <span class="built_in"> name</span> : <span class="string">"lisi"</span>,</span></span><br><span class="line"><span class="xquery">        age : <span class="number">20</span>,</span></span><br><span class="line"><span class="xquery">        friends : [<span class="string">'张三'</span>, <span class="string">'李四'</span>]</span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    var p1 = </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">       <span class="built_in"> name</span> : <span class="string">'zs'</span>,</span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    var p2 = </span><span class="xquery">&#123;&#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">    Object.assign(p2, p, p1); //p和p1都是提供者</span></span><br><span class="line"><span class="xml">    console.log(p2.name); // zs</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p> 五. 字符串功能的增强</p><p>  (1) 查找子字符串</p><p>   在以前在字符串中查找字符串的时候，都是使用indexOf方法.ES6新增了三个方法来查找字符串。<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">includes() 方法会在给定文本存在于字符串中的任意位置时返回 true，否则返回 false 。</span><br><span class="line"><span class="keyword">startsWith</span>() 方法会在给定文本出现在字符串开头时返回 true，否则返回 false 。</span><br><span class="line"><span class="keyword">endsWith</span>() 方法会在给定文本出现在字符串末尾时返回 true，否则返回 false 。</span><br><span class="line"></span><br><span class="line">var msg = <span class="string">"Hello world!"</span>;</span><br><span class="line">console.<span class="keyword">log</span>(msg.<span class="keyword">startsWith</span>(<span class="string">"Hello"</span>));       <span class="comment">// true</span></span><br><span class="line">console.<span class="keyword">log</span>(msg.<span class="keyword">endsWith</span>(<span class="string">"!"</span>));             <span class="comment">// true</span></span><br><span class="line">console.<span class="keyword">log</span>(msg.includes(<span class="string">"o"</span>));             <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">console.<span class="keyword">log</span>(msg.<span class="keyword">startsWith</span>(<span class="string">"o"</span>));           <span class="comment">// false</span></span><br><span class="line">console.<span class="keyword">log</span>(msg.<span class="keyword">endsWith</span>(<span class="string">"world!"</span>));        <span class="comment">// true</span></span><br><span class="line">console.<span class="keyword">log</span>(msg.includes(<span class="string">"x"</span>));             <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">console.<span class="keyword">log</span>(msg.<span class="keyword">startsWith</span>(<span class="string">"o"</span>, <span class="number">4</span>));        <span class="comment">// true</span></span><br><span class="line">console.<span class="keyword">log</span>(msg.<span class="keyword">endsWith</span>(<span class="string">"o"</span>, <span class="number">8</span>));          <span class="comment">// true</span></span><br><span class="line">console.<span class="keyword">log</span>(msg.includes(<span class="string">"o"</span>, <span class="number">8</span>));          <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p> (2) repeat方法</p><p>   ECMAScript 6 还向字符串添加了 repeat() 方法，它接受一个数字参数作为字符串的重复次数。该方法返回一个重复包含初始字符串的新字符串，重复次数等于参数.<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built-in">log</span>(<span class="string">"x"</span>.<span class="keyword">repeat</span>(<span class="number">3</span>));         <span class="comment">// "xxx"</span></span><br><span class="line">console.<span class="built-in">log</span>(<span class="string">"hello"</span>.<span class="keyword">repeat</span>(<span class="number">2</span>));     <span class="comment">// "hellohello"</span></span><br><span class="line">console.<span class="built-in">log</span>(<span class="string">"abc"</span>.<span class="keyword">repeat</span>(<span class="number">4</span>));       <span class="comment">// "abcabcabcabc"</span></span><br></pre></td></tr></table></figure></p><p> (3) 字符串模板字面量</p><p>  基本语法,使用一对反引号 “(tab正上方的按键)来表示模板字面量.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">`Hello world!`</span>;   <span class="comment">//使用模板字面量创建了一个字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message);               <span class="comment">// "Hello world!"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> message);        <span class="comment">// "string"</span></span><br><span class="line"><span class="built_in">console</span>.log(message.length);        <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></p><p>注意：如果模板字符串中使用到了反引号，则应该转义。但是单双引号不需要转义</p><p> (4) 多行字符串</p><p>ES6中字符串的模板字面量轻松的解决了多行字符串的问题，而且没有任何新的语法.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">   <span class="keyword">var</span> s = `abc</span></span><br><span class="line"><span class="undefined">    aaaaa</span></span><br><span class="line"><span class="undefined">    dsalfja</span></span><br><span class="line"><span class="undefined">    dfadfja`;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(s);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但是要注意： 反引号中的所有空格和缩进都是有效字符。</p><p>  (5) 字符串置换</p><p>置换允许你将 JavaScript 表达式嵌入到模板字面量中并将其结果作为输出字符串中的一部分。</p><p>语法：${变量名、表达式、任意运算、方法调用等}</p><p>可以嵌入任何有效的JavaScript代码.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> name = <span class="string">"李四"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> msg = <span class="string">`欢迎你<span class="subst">$&#123;name&#125;</span>同学`</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(msg)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> (6) 模板标签</p><p> 什么是模板标签,模板字面量真正的强大之处来源于模板标签。一个模板标签可以被转换为模板字面量并作为最终值返回。标签在模板的头部，即左 ` 字符之前指定，如下所示：<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let message = myTag`Hello world`;</span><br></pre></td></tr></table></figure></p><p>在上面的代码中，myTag就是模板标签。</p><p>myTag其实是一个函数，这个函数会被调用来处理这个模板字符串。</p><p> (7) 定义模板标签</p><p>一个标签仅代表一个函数，他接受需要处理的模板字面量。标签分别接收模板字面量中的片段，且必须将它们组合以得出结果。函数的首个参数为包含普通 JavaScript 字符串的数组。余下的参数为每次置换的对应值。</p><p>标签函数一般使用剩余参数来定义，以便轻松地处理数据。如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> name = <span class="string">'张三'</span>,</span></span><br><span class="line"><span class="undefined">        age = 20,</span></span><br><span class="line"><span class="javascript">        message = show<span class="string">`我来给大家介绍<span class="subst">$&#123;name&#125;</span>的年龄是<span class="subst">$&#123;age&#125;</span>.`</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">        应该定义一个函数show：</span></span><br><span class="line"><span class="undefined">        参数1：一个字符串数组。在本例中包含三个元素。</span></span><br><span class="line"><span class="actionscript">             <span class="number">0</span>:<span class="string">"我来给大家介绍"</span></span></span><br><span class="line"><span class="actionscript">             <span class="number">1</span>:<span class="string">"的年龄是"</span></span></span><br><span class="line"><span class="actionscript">             <span class="number">2</span>:<span class="string">"."</span></span></span><br><span class="line"><span class="undefined">        参数2和参数3：表示需要置换的字符串的值。  </span></span><br><span class="line"><span class="undefined">     */</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(stringArr, value1, value2)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(stringArr); <span class="comment">//</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(value1);  <span class="comment">// 张三</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(value2);  <span class="comment">// 20</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="string">"abc"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(message); <span class="comment">//abc</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>为了简化书写，一般把Value1和Value2写成剩余字符串的形式<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(stringArr, <span class="rest_arg">...values</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>五. 解构</p><p>  (1) 解构的实用性</p><p> ECMAScript 5 或更早的版本中，从对象或数组中获取特定的数据并赋值给本地变量需要书写很多并且相似的代码。例如：<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">       <span class="keyword">repeat</span>: <span class="literal">true</span>,</span><br><span class="line">       save: <span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从对象中提取数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">repeat</span> = options.<span class="keyword">repeat</span>,</span><br><span class="line">   save = options.save;</span><br></pre></td></tr></table></figure></p><p> 对象解构的基本形式<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">node</span> <span class="title">= &#123;</span></span><br><span class="line"><span class="title">       type</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">       name: <span class="string">"foo"</span></span><br><span class="line">   &#125;;</span><br><span class="line">//这里就相当于声明了两个变量： <span class="keyword">type</span> = <span class="keyword">node</span>.<span class="title">type</span>;  name:<span class="keyword">node</span>.<span class="title">name</span></span><br><span class="line">let &#123; <span class="keyword">type</span>, name &#125; = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">console</span>.log(<span class="keyword">type</span>);      // <span class="string">"Identifier"</span></span><br><span class="line">console.log(name);      // <span class="string">"foo"</span></span><br></pre></td></tr></table></figure></p><p>在上面的结构中必须要初始化。否则会出现语法错误<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法错误！</span></span><br><span class="line">var &#123; <span class="class"><span class="keyword">type</span>, <span class="title">name</span> &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法错误！</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="class"><span class="keyword">type</span>, <span class="title">name</span> &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 语法错误！</span></span><br><span class="line">const &#123; <span class="class"><span class="keyword">type</span>, <span class="title">name</span> &#125;;</span></span><br></pre></td></tr></table></figure></p><p> (2) 解构赋值表达式</p><p>  声明的变量想改变他们的值，也可以使用解构表达式.<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">   let node = &#123;</span><br><span class="line">     <span class="built_in">type</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">     <span class="built_in">name</span>: <span class="string">"foo"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="built_in">type</span> = <span class="string">"Literal"</span>,</span><br><span class="line">   <span class="built_in">name</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//注意：此处必须要在圆括号内才能使用解构表达式</span></span><br><span class="line">  (&#123;<span class="built_in">type</span>, <span class="built_in">name</span>&#125; = node);</span><br><span class="line"></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">type</span>);      <span class="comment">// "Identifier"</span></span><br><span class="line">  console.<span class="built_in">log</span>(<span class="built_in">name</span>);      <span class="comment">// "foo""</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p> (3) 对象解构时的默认值</p><p>  如果赋值号右边的对象中没有与左边变量同名的属性，则左边的变量会是 undefined<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">node</span> <span class="title">= &#123;</span></span><br><span class="line"><span class="title">       type</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">       name: <span class="string">"foo"</span></span><br><span class="line">   &#125;;</span><br><span class="line">//因为<span class="keyword">node</span><span class="title">中没有叫value</span>的属性，所以valued的值将会是undefined</span><br><span class="line">let &#123; <span class="keyword">type</span>, name, value &#125; = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">console</span>.log(<span class="keyword">type</span>);      // <span class="string">"Identifier"</span></span><br><span class="line">console.log(name);      // <span class="string">"foo"</span></span><br><span class="line">console.log(value);     // undefined</span><br></pre></td></tr></table></figure></p><p>手动指定他的默认值<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">    let node = </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">        type: <span class="string">"Identifier"</span>,</span></span><br><span class="line"><span class="xquery">       <span class="built_in"> name</span>: <span class="string">"foo"</span></span></span><br><span class="line"><span class="xquery">    &#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">    //手动添加value的默认值为3</span></span><br><span class="line"><span class="xml">    let </span><span class="xquery">&#123; type,<span class="built_in"> name</span>, <span class="keyword">value</span> = <span class="number">3</span>&#125;</span><span class="xml"> = node;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    console.log(type);      // "Identifier"</span></span><br><span class="line"><span class="xml">    console.log(name);      // "foo"</span></span><br><span class="line"><span class="xml">    console.log(value);     // 3</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>赋值给不同的变量名<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;script type="text/javascript"&gt;</span></span><br><span class="line">    let <span class="keyword">node</span> <span class="title">= &#123;</span></span><br><span class="line"><span class="title">        type</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">        name: <span class="string">"foo"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    // localType才是要定义的新的变量。  <span class="keyword">type</span>是<span class="keyword">node</span><span class="title">的属性</span></span><br><span class="line"><span class="title">    let</span> &#123;<span class="keyword">type</span>: localType, name: localName&#125; = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">    console</span>.log(localType);     // <span class="string">"Identifier"</span></span><br><span class="line">    console.log(localName);     // <span class="string">"foo"</span></span><br><span class="line"><span class="tag">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意：冒号后面才是要定义的新的变量，这个可以我们的对象字面量不太一样！<br>这个地方也可以使用默认值<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let <span class="keyword">node</span> <span class="title">= &#123;</span></span><br><span class="line"><span class="title">        type</span>: <span class="string">"Identifier"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">let &#123; <span class="keyword">type</span>: localType, name: localName = <span class="string">"bar"</span> &#125; = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">console</span>.log(localType);     // <span class="string">"Identifier"</span></span><br><span class="line">console.log(localName);     // <span class="string">"bar"</span></span><br></pre></td></tr></table></figure></p><p> （4） 数组解构</p><p>  数组解构基本语法</p><p>  数据解构的语法和对象解构看起来类似，只是将对象字面量替换成了数组字面量，而且解构操作的是数组内部的位置（索引）而不是对象中的命名属性，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [ <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span> ];</span><br><span class="line"><span class="keyword">let</span> [ firstColor, secondColor ] = colors;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstColor);        <span class="comment">// "red"</span></span><br><span class="line"><span class="built_in">console</span>.log(secondColor);       <span class="comment">// "green"</span></span><br></pre></td></tr></table></figure></p><p> 如果只想取数组中的某一项，则可以不用命名。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> colors = [ <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span> ];</span><br><span class="line"><span class="comment">//只取数组中的第三项。</span></span><br><span class="line"><span class="keyword">let</span> [ , , thirdColor ] = colors;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(thirdColor);        <span class="comment">// "blue"</span></span><br></pre></td></tr></table></figure></p><p> 解构表达式</p><p>  你可以想要赋值的情况下使用数组的解构赋值表达式，但是和对象解构不同，没必要将它们包含在圆括号中，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [ <span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span> ],</span><br><span class="line">   firstColor = <span class="string">"black"</span>,</span><br><span class="line">   secondColor = <span class="string">"purple"</span>;</span><br><span class="line"></span><br><span class="line">[ firstColor, secondColor ] = colors;  <span class="comment">//可以不用加括号。当然添加也不犯法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstColor);        <span class="comment">// "red"</span></span><br><span class="line"><span class="built_in">console</span>.log(secondColor);       <span class="comment">// "green"</span></span><br></pre></td></tr></table></figure></p><p>数组解构表达式有一个很常用的地方，就是交换两个变量的值。在以前一般定义一个第三方变量进行交换，例如下面的代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> a = <span class="number">3</span>,</span></span><br><span class="line"><span class="undefined">        b = 4,</span></span><br><span class="line"><span class="undefined">        temp;</span></span><br><span class="line"><span class="undefined">    temp = a;</span></span><br><span class="line"><span class="undefined">    a = b;</span></span><br><span class="line"><span class="undefined">    b = temp;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>ES6中完全可以抛弃第三方变量这种方式，使用我们的数组解构表达式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> a = <span class="number">3</span>,</span></span><br><span class="line"><span class="undefined">        b = 4;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//左侧和前面的案例是一样的，右侧是一个新创建的数组字面量。</span></span></span><br><span class="line"><span class="undefined">    [a, b] = [b, a];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(a);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(b)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>六. Set数据结构</p><p>  Set类型是一个包含无重复元素的有序列表</p><pre><code>Set本身是一个构造函数。</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//创建Set数据结构对象。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//调用set对象的add方法，向set中添加元素</span></span></span><br><span class="line"><span class="actionscript">    s.add(<span class="string">"a"</span>);</span></span><br><span class="line"><span class="actionscript">    s.add(<span class="string">"c"</span>);</span></span><br><span class="line"><span class="actionscript">    s.add(<span class="string">"b"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//set的size属性可以获取set中元素的个数</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(s.size)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Set中不能添加重复元素</p><p>使用数组初始化Set<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//使用数组中的元素来初始化Set，当然碰到重复的也不会添加进去。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>]);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(s.size)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>判断一个值是否在Set中</p><p>  使用Set的 has() 方法可以判断一个值是否在这个set中。<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">       let <span class="keyword">set</span> = new <span class="comment">Set()</span>;</span><br><span class="line">       <span class="keyword">set</span>.add(5);</span><br><span class="line">       <span class="keyword">set</span>.add(<span class="string">"5"</span>);</span><br><span class="line">       console.<span class="built-in">log</span>(<span class="keyword">set</span>.has(5));    <span class="comment">// true</span></span><br><span class="line">       console.<span class="built-in">log</span>(<span class="keyword">set</span>.has(6));    <span class="comment">// false</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>移除Set中的元素<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">delete(要删除的值) ：删除单个值</span><br><span class="line"></span><br><span class="line">clear()：清空所有的值</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    let <span class="keyword">set</span> = new <span class="comment">Set()</span>;</span><br><span class="line">    <span class="keyword">set</span>.add(5);</span><br><span class="line">    <span class="keyword">set</span>.add(<span class="string">"5"</span>);</span><br><span class="line"></span><br><span class="line">    console.<span class="built-in">log</span>(<span class="keyword">set</span>.has(5));    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span>.delete(5);</span><br><span class="line"></span><br><span class="line">    console.<span class="built-in">log</span>(<span class="keyword">set</span>.has(5));    <span class="comment">// false</span></span><br><span class="line">    console.<span class="built-in">log</span>(<span class="keyword">set</span>.size);      <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span>.clear();</span><br><span class="line"></span><br><span class="line">    console.<span class="built-in">log</span>(<span class="keyword">set</span>.has(<span class="string">"5"</span>));  <span class="comment">// false</span></span><br><span class="line">    console.<span class="built-in">log</span>(<span class="keyword">set</span>.size);      <span class="comment">// 0</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>遍历Set</p><p>  Set也有forEach可以遍历Set,for…of也可以遍历set</p><p><strong>将Set转换为数组</strong></p><p>  将数组转换为Set相当容易，你只需要在创建Set集合时把数组作为参数传递进去即可。</p><p>把Set转换为数组使用前面讲到的扩展运算符也很容易<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">   let set = new Set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]),</span><br><span class="line">       arr = [...set];  <span class="comment">//使用扩展运算符。那么新的数组中已经没有了重复元素。注意，此对set并没有什么影响</span></span><br><span class="line"></span><br><span class="line">   console.log(arr);             <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>这种情况在需要去数组中重复元素的时候非常好用。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    function eliminateDuplicates(items) &#123;</span><br><span class="line">        return [...new Set(items)];</span><br><span class="line">    &#125;</span><br><span class="line">    let numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        <span class="comment">//返回的是新的没有重复元素的数组。</span></span><br><span class="line">        noDuplicates = eliminateDuplicates(numbers);</span><br><span class="line">    console.log(noDuplicates);      <span class="comment">// [1,2,3,4,5]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>Set提供了处理一系列值的方式，不过如果想给这些值添加一些附加数据则显得力不从心，所以又提供了一种新的数据结构：Map</p><p>七. Map数据结构</p><p>Map创建也是使用Map构造函数<br>向Map存储键值对使用set(key, value);方法<br>可以使用get(key),来获取指定key对应的value<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    var <span class="built_in">map</span> = <span class="keyword">new</span> Map();</span><br><span class="line">    <span class="built_in">map</span>.<span class="built_in">set</span>(<span class="string">"a"</span>, <span class="string">"lisi"</span>);</span><br><span class="line">    <span class="built_in">map</span>.<span class="built_in">set</span>(<span class="string">"b"</span>, <span class="string">"zhangsan"</span>);</span><br><span class="line">    <span class="built_in">map</span>.<span class="built_in">set</span>(<span class="string">"b"</span>, <span class="string">"zhangsan222"</span>);  <span class="comment">// 第二次添加，新的value会替换掉旧的</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"a"</span>));</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"b"</span>));   <span class="comment">//zhangsan222</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"c"</span>)); <span class="comment">//undefined.如果key不存在，则返回undefined</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">map</span>.<span class="built_in">size</span>); <span class="comment">//2</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">has(<span class="built_in">key</span>) - 判断给定的 <span class="built_in">key</span> 是否在 <span class="built_in">map</span> 中存在</span><br><span class="line">delete(<span class="built_in">key</span>) - 移除 <span class="built_in">map</span> 中的 <span class="built_in">key</span> 及对应的值</span><br><span class="line"><span class="built_in">clear</span>() - 移除 <span class="built_in">map</span> 中所有的键值对</span><br></pre></td></tr></table></figure></p><p>初始化Map</p><p>创建Map的时候也可以像Set一样传入数组。但是传入的数组中必须有两个元素，这个两个元素分别是一个数组。</p><p>也就是传入的实际是一个二维数组！<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  //<span class="built_in">map</span>接受一个二维数组</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">map</span> = <span class="built_in">new</span> Map([</span><br><span class="line">      //每一个数组中，第一个是是<span class="built_in">map</span>的可以，第二个是<span class="built_in">map</span>的value。如果只有第一个，则值是undefined</span><br><span class="line">        [<span class="string">"name"</span>, <span class="string">"lisi"</span>],  </span><br><span class="line">        [<span class="string">"age"</span>, <span class="number">20</span>],</span><br><span class="line">        [<span class="string">"sex"</span>, <span class="string">"nan"</span>]</span><br><span class="line">    ]);</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">map</span>.size);</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="string">"name"</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p> Map的forEach方法<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">map</span> = <span class="built_in">new</span> Map([</span><br><span class="line">        [<span class="string">"name"</span>, <span class="string">"李四"</span>],</span><br><span class="line">        [<span class="string">"age"</span>, <span class="number">20</span>],</span><br><span class="line">        [<span class="string">"sex"</span>, <span class="string">"nan"</span>]</span><br><span class="line">    ]);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        回调函数有函数：</span></span><br><span class="line"><span class="comment">        参数1：键值对的value</span></span><br><span class="line"><span class="comment">        参数2：键值对的key</span></span><br><span class="line"><span class="comment">        参数3：map对象本身</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">map</span>.forEach(function (value, <span class="built_in">key</span>, ownMap) &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(`<span class="built_in">key</span>=$&#123;<span class="built_in">key</span>&#125; ,vlue=$&#123;value&#125;`);</span><br><span class="line">        console.<span class="built_in">log</span>(this);</span><br><span class="line">    &#125;)</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">0</span>, len = colors.<span class="built_in">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(colors[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>八. 类</p><p>  ES5之前的模拟的类，JavaScript 没有类。和类这个概念及行为最接近的是创建一个构造函数并在构造函数的原型上添加方法，这种实现也被称为自定义的类型创建，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PersonType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PersonType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> PersonType(<span class="string">"Nicholas"</span>);</span><br><span class="line">person.sayName();   <span class="comment">// 输出 "Nicholas"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> PersonType);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);      <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p> (1) ES6中基本的类声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//class关键字必须是小写。   后面就是跟的类名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 等效于 PersonType 构造函数。</span></span><br><span class="line"> <span class="keyword">constructor</span>(name) &#123;  <span class="comment">//这个表示类的构造函数。constuctor也是关键字必须小写。</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;  <span class="comment">//创建属性。  也叫当前类型的自有属性。</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 等效于 PersonType.prototype.sayName.   这里的sayName使用了我们前面的简写的方式。</span></span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> PersonClass(<span class="string">"Nicholas"</span>);</span><br><span class="line">person.sayName();   <span class="comment">// 输出 "Nicholas"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> PersonClass);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);          <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> PersonClass);                    <span class="comment">// "function"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> PersonClass.prototype.sayName);  <span class="comment">// "function"</span></span><br></pre></td></tr></table></figure></p><p> 匿名类表达式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> PersonClass = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等效于 PersonType 构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等效于 PersonType.prototype.sayName</span></span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> PersonClass(<span class="string">"Nicholas"</span>);</span><br><span class="line">person.sayName();   <span class="comment">// 输出 "Nicholas"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> PersonClass);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);          <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> PersonClass);                    <span class="comment">// "function"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> PersonClass.prototype.sayName);  <span class="comment">// "function"</span></span><br></pre></td></tr></table></figure></p><p>静态成员</p><p>   在ES5中，我们可以直接给构造函数添加属性或方法来模拟静态成员。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PersonType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态方法。  直接添加到构造方法上。  (其实是把构造函数当做一个普通的对象来用。)</span></span><br><span class="line">PersonType.create = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersonType(name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实例方法</span></span><br><span class="line">PersonType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person = PersonType.create(<span class="string">"Nicholas"</span>);</span><br></pre></td></tr></table></figure></p><p>ECMAScript 6 的类通过在方法之前使用正式的 static 关键字简化了静态方法的创建。例如，下例中的类和上例相比是等效的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等效于 PersonType 构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等效于 PersonType.prototype.sayName</span></span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等效于 PersonType.create。</span></span><br><span class="line">    <span class="keyword">static</span> create(name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PersonClass(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = PersonClass.create(<span class="string">"Nicholas"</span>);</span><br></pre></td></tr></table></figure></p><p>注意：静态成员通过实例对象不能访问，只能通过类名访问！！！</p><p>(2)  ES6中的继承</p><p>ES6之前要完成继承，需要写很多的代码。看下面的继承的例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Father</span><span class="params">(name)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    Father.prototype.sayName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">Son</span><span class="params">(name,age)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        Father.call(<span class="keyword">this</span>, name);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.age = age;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    Son.prototype = <span class="keyword">new</span> Father();</span></span><br><span class="line"><span class="undefined">    Son.prototype.constructor = Son;</span></span><br><span class="line"><span class="actionscript">    Son.prototype.sayAge = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> son1 = <span class="keyword">new</span> Son(<span class="string">"儿子"</span>, <span class="number">20</span>);</span></span><br><span class="line"><span class="actionscript">    son1.sayAge();  <span class="comment">//20</span></span></span><br><span class="line"><span class="actionscript">    son1.sayName(); <span class="comment">//儿子</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果在ES6通过类的方式完成继承就简单了很多。需要用到一个新的关键字：extends<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">constructor</span>(name)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        sayName()&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="actionscript">    <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  <span class="comment">//extents后面跟表示要继承的类型</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">constructor</span>(name, age)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">super</span>(name);  <span class="comment">//相当于以前的：Father.call(this, name);</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.age = age;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//子类独有的方法</span></span></span><br><span class="line"><span class="undefined">        sayAge()&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> son1 = <span class="keyword">new</span> Son(<span class="string">"李四"</span>, <span class="number">30</span>);</span></span><br><span class="line"><span class="undefined">    son1.sayAge();</span></span><br><span class="line"><span class="undefined">    son1.sayName();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(son1 <span class="keyword">instanceof</span> Son);  <span class="comment">// true</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(son1 <span class="keyword">instanceof</span> Father);  <span class="comment">//true</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这种继承方法，和我们前面提到的构造函数+原型的继承方式本质是一样的。但是写起来更简单，可读性也更好。</p><p>关于super的使用，有几点需要注意：</p><p>你只能在派生类中使用 super()，否则（没有使用 extends 的类或函数中使用）一个错误会被抛出。<br>你必须在构造函数的起始位置调用 super()，因为它会初始化 this。任何在 super() 之前访问 this 的行为都会造成错误。也即是说super()必须放在构造函数的首行。<br>在类构造函数中，唯一能避免调用 super() 的办法是返回一个对象。</p><p>在子类中屏蔽父类的方法</p><p>如果在子类中声明与父类中的同名的方法，则会覆盖父类的方法。(这种情况在其他语言中称之为 方法的覆写、重写 )<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="class"><span class="keyword">type</span></span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">        constructor(name)&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        sayName()&#123;</span><br><span class="line">            console.log(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  <span class="comment">//extents后面跟表示要继承的类型</span></span><br><span class="line">        constructor(name, age)&#123;</span><br><span class="line">            <span class="keyword">super</span>(name);  <span class="comment">//相当于以前的：Father.call(this, name);</span></span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//子类独有的方法</span></span><br><span class="line">        sayAge()&#123;</span><br><span class="line">            console.log(<span class="keyword">this</span>.age);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//子类中的方法会屏蔽到父类中的同名方法。</span></span><br><span class="line">        sayName()&#123;</span><br><span class="line">            <span class="keyword">super</span>.syaName();  <span class="comment">//调用被覆盖的父类中的方法。 </span></span><br><span class="line">            console.log(<span class="string">"我是子类的方法，我屏蔽了父类："</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> son1 = <span class="keyword">new</span> <span class="type">Son</span>(<span class="string">"李四"</span>, <span class="number">30</span>);</span><br><span class="line">    son1.sayAge();</span><br><span class="line">    son1.sayName();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>如果在子类中又确实需要调用父类中被覆盖的方法，可以通过super.方法()来完成。</p><p>注意：</p><p>如果是调用构造方法，则super不要加点，而且必须是在子类构造方法的第一行调用父类的构造方法<br>普通方法调用需要使用super.父类的方法() 来调用。</p><p>静态方法也可以继承<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="class"><span class="keyword">type</span></span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">       static foo()&#123;</span><br><span class="line">           console.log(<span class="string">"我是父类的静态方法"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">Son</span>.foo(); <span class="comment">//子类也继承了父类的静态方法。  这种方式调用和直接通过父类名调用时一样的。</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>Array 数组</p></blockquote><p>  JavaScript 数组对象是用于构造数组的全局对象; 它是高阶，类似列表的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">创建数组</span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">"Apple"</span>, <span class="string">"Banana"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fruits.length);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通过索引访问</span><br><span class="line">   <span class="keyword">let</span> first = fruits[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// Apple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> last = fruits[fruits.length - <span class="number">1</span>];</span><br><span class="line"><span class="comment">// Banana</span></span><br><span class="line"></span><br><span class="line">遍历一个数组</span><br><span class="line">fruits.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item, index);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Apple 0</span></span><br><span class="line"><span class="comment">// Banana 1</span></span><br><span class="line"></span><br><span class="line">添加元素到数组的末尾</span><br><span class="line"><span class="keyword">var</span> newLength = fruits.push(<span class="string">"Orange"</span>);</span><br><span class="line"><span class="comment">// ["Apple", "Banana", "Orange"]</span></span><br><span class="line"></span><br><span class="line">删除数组末尾的元素</span><br><span class="line"><span class="keyword">let</span> last = fruits.pop(); </span><br><span class="line"><span class="comment">// remove Orange (from the end)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ["Apple", "Banana"];</span></span><br><span class="line"></span><br><span class="line">删除数组最前面（头部）的元素</span><br><span class="line"><span class="keyword">let</span> first = fruits.shift(); </span><br><span class="line"><span class="comment">// remove Apple from the front</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ["Banana"];</span></span><br><span class="line"></span><br><span class="line">添加到数组的前面（头部）</span><br><span class="line"><span class="keyword">let</span> newLength = fruits.unshift(<span class="string">"Strawberry"</span>);</span><br><span class="line"><span class="comment">// add to the front</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ["Strawberry", "Banana"];</span></span><br><span class="line"></span><br><span class="line">找到某个元素在数组中的索引</span><br><span class="line"></span><br><span class="line">fruits.push(<span class="string">'Mango'</span>);</span><br><span class="line"><span class="comment">// ["Strawberry", "Banana", "Mango"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> index = fruits.indexOf(<span class="string">"Banana"</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">通过索引删除某个元素</span><br><span class="line"><span class="keyword">let</span> removedItem = fruits.splice(pos, <span class="number">1</span>); </span><br><span class="line"><span class="comment">// this is how to remove an item</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ["Strawberry", "Mango"]</span></span><br><span class="line"></span><br><span class="line">从一个索引位置删除多个元素</span><br><span class="line"><span class="keyword">let</span> vegetables = [<span class="string">'Cabbage'</span>, <span class="string">'Turnip'</span>, <span class="string">'Radish'</span>, <span class="string">'Carrot'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(vegetables); </span><br><span class="line"></span><br><span class="line"><span class="comment">// ["Cabbage", "Turnip", "Radish", "Carrot"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pos = <span class="number">1</span>, n = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> removedItems = vegetables.splice(pos, n); </span><br><span class="line"></span><br><span class="line"><span class="comment">// this is how to remove items, </span></span><br><span class="line"><span class="comment">// n defines the number of items to be removed,</span></span><br><span class="line"><span class="comment">// from that position(pos) onward to the end of array.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vegetables); </span><br><span class="line"><span class="comment">// ["Cabbage", "Carrot"] (the original array is changed)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(removedItems); </span><br><span class="line"><span class="comment">// ["Turnip", "Radish"]</span></span><br><span class="line"></span><br><span class="line">复制一个数组</span><br><span class="line"><span class="keyword">var</span> shallowCopy = fruits.slice(); </span><br><span class="line"><span class="comment">// this is how to make a copy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ["Strawberry", "Mango"]</span></span><br><span class="line"></span><br><span class="line">方法</span><br><span class="line"><span class="built_in">Array</span>.from() 方法从一个类似数组或可迭代的对象中创建一个新的数组实例。</span><br><span class="line"><span class="built_in">Array</span>.from(arrayLike[, mapFn[, thisArg]])</span><br><span class="line">类数组对象（拥有一个 length 属性和若干索引属性的任意对象）</span><br><span class="line">可遍历对象（你可以从它身上迭代出若干个元素的对象，比如有 <span class="built_in">Map</span> 和 <span class="built_in">Set</span> 等）</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span> <span class="keyword">from</span> a <span class="built_in">String</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="string">'foo'</span>); </span><br><span class="line"><span class="comment">// ["f", "o", "o"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span> <span class="keyword">from</span> a <span class="built_in">Set</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'foo'</span>, <span class="built_in">window</span>]); </span><br><span class="line"><span class="built_in">Array</span>.from(s); </span><br><span class="line"><span class="comment">// ["foo", window]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span> <span class="keyword">from</span> a <span class="built_in">Map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">8</span>]]);</span><br><span class="line"><span class="built_in">Array</span>.from(m); </span><br><span class="line"><span class="comment">// [[1, 2], [2, 4], [4, 8]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span> <span class="keyword">from</span> an <span class="built_in">Array</span>-like object (<span class="built_in">arguments</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray()</span><br><span class="line">假如一个变量是数组则返回<span class="literal">true</span>，否则返回<span class="literal">false</span>。</span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);  </span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;<span class="attr">foo</span>: <span class="number">123</span>&#125;); </span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">"foobar"</span>);   </span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);  </span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">假如不存在 <span class="built_in">Array</span>.isArray()，则在其他代码之前运行下面的代码将创建该方法。</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.of();</span><br><span class="line">创建一个有可变数量的参数的新的数组实例，无论参数有多少数量，而且可以是任意类型</span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">7</span>);       <span class="comment">// [7] </span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">7</span>);          <span class="comment">// [ , , , , , , ]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);    <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">如果原生不支持的话，在其他代码之前执行以下代码会创建 <span class="built_in">Array</span>.of() 。</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.of) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.of = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   Mutator 方法</span><br><span class="line">下面的这些方法会改变调用它们的对象自身的值：</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.copyWithin() </span><br><span class="line">在数组内部，将一段元素序列拷贝到另一段元素序列上，覆盖原有的值。</span><br><span class="line"><span class="built_in">Array</span>.prototype.fill() </span><br><span class="line">将数组中指定区间的所有元素的值，都替换成某个固定的值。</span><br><span class="line"><span class="built_in">Array</span>.prototype.pop()</span><br><span class="line">删除数组的最后一个元素，并返回这个元素。</span><br><span class="line"><span class="built_in">Array</span>.prototype.push()</span><br><span class="line">在数组的末尾增加一个或多个元素，并返回数组的新长度。</span><br><span class="line"><span class="built_in">Array</span>.prototype.reverse()</span><br><span class="line">颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个。</span><br><span class="line"><span class="built_in">Array</span>.prototype.shift()</span><br><span class="line">删除数组的第一个元素，并返回这个元素。</span><br><span class="line"><span class="built_in">Array</span>.prototype.sort()</span><br><span class="line">对数组元素进行排序，并返回当前数组。</span><br><span class="line"><span class="built_in">Array</span>.prototype.splice()</span><br><span class="line">在任意的位置给数组添加或删除任意个元素。</span><br><span class="line"><span class="built_in">Array</span>.prototype.unshift()</span><br><span class="line">在数组的开头增加一个或多个元素，并返回数组的新长度。</span><br><span class="line"></span><br><span class="line">Accessor 方法</span><br><span class="line">下面的这些方法绝对不会改变调用它们的对象的值，只会返回一个新的数组或者返回一个其它的期望值。</span><br><span class="line"><span class="built_in">Array</span>.prototype.concat()</span><br><span class="line">返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组。</span><br><span class="line"><span class="built_in">Array</span>.prototype.includes() </span><br><span class="line">判断当前数组是否包含某指定的值，如果是返回 <span class="literal">true</span>，否则返回 <span class="literal">false</span>。</span><br><span class="line"><span class="built_in">Array</span>.prototype.join()</span><br><span class="line">连接所有数组元素组成一个字符串。</span><br><span class="line"><span class="built_in">Array</span>.prototype.slice()</span><br><span class="line">抽取当前数组中的一段元素组合成一个新数组。</span><br><span class="line"><span class="built_in">Array</span>.prototype.toSource() </span><br><span class="line">返回一个表示当前数组字面量的字符串。遮蔽了原型链上的 <span class="built_in">Object</span>.prototype.toSource() 方法。</span><br><span class="line"><span class="built_in">Array</span>.prototype.toString()</span><br><span class="line">返回一个由所有数组元素组合而成的字符串。遮蔽了原型链上的 <span class="built_in">Object</span>.prototype.toString() 方法。</span><br><span class="line"><span class="built_in">Array</span>.prototype.toLocaleString()</span><br><span class="line">返回一个由所有数组元素组合而成的本地化后的字符串。遮蔽了原型链上的 <span class="built_in">Object</span>.prototype.toLocaleString() 方法。</span><br><span class="line"><span class="built_in">Array</span>.prototype.indexOf()</span><br><span class="line">返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 <span class="number">-1</span>。</span><br><span class="line"><span class="built_in">Array</span>.prototype.lastIndexOf()</span><br><span class="line">返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 <span class="number">-1</span>。</span><br><span class="line"></span><br><span class="line">Iteration 方法</span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach()</span><br><span class="line">为数组中的每个元素执行一次回调函数。</span><br><span class="line"><span class="built_in">Array</span>.prototype.entries() </span><br><span class="line">返回一个数组迭代器对象，该迭代器会包含所有数组元素的键值对。</span><br><span class="line"><span class="built_in">Array</span>.prototype.every()</span><br><span class="line">如果数组中的每个元素都满足测试函数，则返回 <span class="literal">true</span>，否则返回 <span class="literal">false</span>。</span><br><span class="line"><span class="built_in">Array</span>.prototype.some()</span><br><span class="line">如果数组中至少有一个元素满足测试函数，则返回 <span class="literal">true</span>，否则返回 <span class="literal">false</span>。</span><br><span class="line"><span class="built_in">Array</span>.prototype.filter()</span><br><span class="line">将所有在过滤函数中返回 <span class="literal">true</span> 的数组元素放进一个新数组中并返回。</span><br><span class="line"><span class="built_in">Array</span>.prototype.find() </span><br><span class="line">找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 <span class="literal">undefined</span>。</span><br><span class="line"><span class="built_in">Array</span>.prototype.findIndex() </span><br><span class="line">找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 <span class="number">-1</span>。</span><br><span class="line"><span class="built_in">Array</span>.prototype.keys() </span><br><span class="line">返回一个数组迭代器对象，该迭代器会包含所有数组元素的键。</span><br><span class="line"><span class="built_in">Array</span>.prototype.map()</span><br><span class="line">返回一个由回调函数的返回值组成的新数组。</span><br><span class="line"><span class="built_in">Array</span>.prototype.reduce()</span><br><span class="line">从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</span><br><span class="line"><span class="built_in">Array</span>.prototype.reduceRight()</span><br><span class="line">从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值。</span><br><span class="line"><span class="built_in">Array</span>.prototype.values() </span><br><span class="line">返回一个数组迭代器对象，该迭代器会包含所有数组元素的值</span><br></pre></td></tr></table></figure></p><blockquote><p>canvas 使用</p></blockquote><p>canvas 是使用javascript网页上绘制图像<br>画布是一个矩形区域，可以控制其中每一个像素。canvas拥有多种绘制路径，矩形、圆形、字符及添加图像的方法<br>getContext(“2d”) 对象是内建html5对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法<br>fillRect(0,0,150,75) 绘制矩形，从左上角开始（0,0）,画150*75的矩形</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//绘制线条</span></span><br><span class="line">cxt.moveTo(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">cxt.lineTo(<span class="number">150</span>,<span class="number">50</span>);</span><br><span class="line">cxt.linTo(<span class="number">10</span>, <span class="number">50</span>);</span><br><span class="line">cxt.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆形</span></span><br><span class="line">cxt.beginPath();</span><br><span class="line">cxt.arc(<span class="number">70</span>,<span class="number">18</span>,<span class="number">15</span>,<span class="number">0</span>,Math.<span class="literal">PI</span>*<span class="number">2</span>, true);</span><br><span class="line">cxt.closePath();</span><br><span class="line">cxt.fill();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制图片</span></span><br><span class="line">cxt.drawImage(img,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">一下是画三角示例</span><br><span class="line">&lt;canvas id=<span class="string">"triangle"</span> height=<span class="string">"100"</span> width=<span class="string">"100"</span>&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line">var canvas = document.getElementById('triangle');  <span class="comment">//获取canvas元素</span></span><br><span class="line">var context = canvas.getContext('<span class="number">2</span>d');  <span class="comment">//创建context对象</span></span><br><span class="line"></span><br><span class="line">context.beginPath();</span><br><span class="line">context.moveTo(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">context.lineTo(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">context.lineTo(<span class="number">50</span>,<span class="number">100</span>);</span><br><span class="line">context.closePath();</span><br><span class="line">context.fillStyle=<span class="string">"rgb(78,193,243)"</span>;</span><br><span class="line">context.fill();</span><br></pre></td></tr></table></figure><blockquote><p>css盒子模型</p></blockquote><p>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</p><p>   (1) 有两种， IE 盒子模型、W3C 盒子模型；</p><p>   (2) 盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；</p><p>   (3) 区  别： IE的content部分把 border 和 padding计算了进去;<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">       <span class="attribute">width </span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">border </span>: <span class="number">100px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-top </span>: <span class="number">100px</span> solid blue; <span class="comment">/*这里可以设置border的top、bottom、left、right四个方向的三角</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&lt;div class="triangle"&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></p><p>在实际设计中，我们会发现，IE 盒模型更容易进行控制，我们一般先将整个容器的尺寸先确定，然后再填充具体的内容，通过 padding 来调整内容的具体位置，通过 margin 来调整容器与其他元素之间的间隙，无论如何调整，整个容器的结构是固定的，不会改变的；<br>而在标准盒模型中，我们在调整 padding 和 margin 的同时，往往会将容器本身的结构打乱，需要重新设置内容 content 的尺寸</p><p>所以我一般都会在样式重置中添加 CSS 3 属性：box-sizing: border-box; 可以让元素按照 IE 盒模型进行解析，即设置的宽高包括了 border 以及 padding 的值</p><p>标准模型的盒子大小(280X280) = 200 +10<em>2 + 30</em>2 — 相加效果</p><p>传统IE6盒子大小(200X200) = 120 + 10 <em> 2 + 30</em>2 — 减去效果</p><p>js有5种基本数据类型，null, undefind, number, boolean, string,和一种对象数据类型（Oject, Array, Date）.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;js基础知识点&quot;&gt;&lt;a href=&quot;#js基础知识点&quot; class=&quot;headerlink&quot; title=&quot;js基础知识点&quot;&gt;&lt;/a&gt;js基础知识点&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;js面向对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;面向对象
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javaScript" scheme="//website.cwzcfj.cn/tags/javaScript/"/>
    
      <category term="ES6" scheme="//website.cwzcfj.cn/tags/ES6/"/>
    
      <category term="js面向对象" scheme="//website.cwzcfj.cn/tags/js%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="闭包" scheme="//website.cwzcfj.cn/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>React Native APi AsyncStorage的使用</title>
    <link href="//website.cwzcfj.cn/2019/04/15/react-native%E5%AD%98%E5%82%A8AsyncStorage/"/>
    <id>//website.cwzcfj.cn/2019/04/15/react-native存储AsyncStorage/</id>
    <published>2019-04-15T14:18:34.000Z</published>
    <updated>2022-09-04T08:35:21.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Native-APi-AsyncStorage的使用。"><a href="#React-Native-APi-AsyncStorage的使用。" class="headerlink" title="React Native APi AsyncStorage的使用。"></a>React Native APi AsyncStorage的使用。</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>  AsyncStorage是一个简单的、异步、持久的key-value存储系统，它对于App来说是全局的。用来替换LocalStorage。推荐您使用AsyncStorage基础上做一层抽象的封装，而不是直接使用。</p><p>  地址：<a href="https://github.com/sunnylqm/react-native-storage" target="_blank">https://github.com/sunnylqm/react-native-storage</a></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>  AsyncStorage里面都有一个回调，而回调第一个参数都是错误对象，如果发生错误，就返回该对象的错误信息，否则为null。每个方法都返回一个promise对象。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> getItem(<span class="string">key:</span>string , <span class="string">callback:</span>(error,result)): 根据键来获取值，获取的结果会在回调函数中。</span><br><span class="line"><span class="keyword">static</span> setItem(<span class="string">key:</span>string , <span class="string">value:</span>string , <span class="string">callback:</span>(error)): 设置键值对。</span><br><span class="line"><span class="keyword">static</span> removeItem(<span class="string">key:</span>string , <span class="string">callback:</span>(error)): 将根据键移出一项</span><br><span class="line"><span class="keyword">static</span> <span class="string">mergeItem:</span>(<span class="string">key:</span>string , <span class="string">value:</span>string , <span class="string">callback:</span>(error)): 合并现有的值和输入值。</span><br><span class="line"><span class="keyword">static</span> clear(<span class="string">callback:</span>(error)): 清除所有的项目。</span><br><span class="line"><span class="keyword">static</span> getAllKeys(<span class="string">callback:</span>(error)): 获取所有的键。</span><br><span class="line"><span class="keyword">static</span> multiGet(keys,<span class="string">callback:</span>(errors,result)):获取多项，其中keys是字符串数组。</span><br><span class="line"><span class="keyword">static</span> multiSet(keyValuePairs,<span class="string">callback:</span>(errors)):设置多项，其中keyValuePairs是字符串的二维数组。</span><br><span class="line"><span class="keyword">static</span> multiRemove(keys,callback(errors)):删除多项，其中keys是字符串数组。</span><br><span class="line"><span class="keyword">static</span> multiMerge(keyValuePairs,<span class="string">callback:</span>(errors)):多个键值合并，其中keyValuePairs是字符串中的二维数组。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Native-APi-AsyncStorage的使用。&quot;&gt;&lt;a href=&quot;#React-Native-APi-AsyncStorage的使用。&quot; class=&quot;headerlink&quot; title=&quot;React Native APi AsyncStor
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="react-native" scheme="//website.cwzcfj.cn/tags/react-native/"/>
    
      <category term="AsyncStorage" scheme="//website.cwzcfj.cn/tags/AsyncStorage/"/>
    
  </entry>
  
</feed>

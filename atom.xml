<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小橙</title>
  
  <subtitle>小橙个人博客网站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//website.cwzcfj.cn/"/>
  <updated>2023-04-26T13:59:12.376Z</updated>
  <id>//website.cwzcfj.cn/</id>
  
  <author>
    <name>xiao cheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js算法习题</title>
    <link href="//website.cwzcfj.cn/2023/04/16/js%E7%AE%97%E6%B3%95%E4%B9%A0%E9%A2%98/"/>
    <id>//website.cwzcfj.cn/2023/04/16/js算法习题/</id>
    <published>2023-04-16T13:52:19.000Z</published>
    <updated>2023-04-26T13:59:12.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript算法与数据结构-基础算法"><a href="#JavaScript算法与数据结构-基础算法" class="headerlink" title="JavaScript算法与数据结构_基础算法"></a>JavaScript算法与数据结构_基础算法</h2><ol><li><p>Slice 与 Splice复制数组并插入另一个数组的指定位置</p><p> 将第一个数组中的所有元素依次复制到第二个数组中</p> <figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function frankenSplice(arr1, arr2, n) &#123;</span><br><span class="line">const arr = arr2.slice();</span><br><span class="line">arr.splice(n, <span class="number">0</span>, ...arr1)</span><br><span class="line">return arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">frankenSplice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>过滤数组中的假值</p><p> 从数组中移除所有假值（falsy values）。</p><p> JavaScript 中的假值有 false、null、0、””、undefined、NaN</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bouncer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> arr.filter(<span class="function"><span class="params">i</span> =&gt;</span> i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bouncer([<span class="number">7</span>, <span class="string">"ate"</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="number">9</span>]);</span><br></pre></td></tr></table></figure></li><li><p>找出元素在排序后数组中的索引</p><p> 数组（第一个参数）在排序后，将一个值（第二个参数）插入该数组，并使数组保持有序。返回这个新插入元素的最小索引值。 返回值应为一个数字。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIndexToIns</span>(<span class="params">arr, num</span>) </span>&#123;</span><br><span class="line">arr.push(num);</span><br><span class="line">arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="keyword">const</span> index = arr.findIndex(<span class="function"><span class="params">i</span> =&gt;</span> i === num);</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getIndexToIns([<span class="number">40</span>, <span class="number">60</span>], <span class="number">50</span>);</span><br></pre></td></tr></table></figure></li><li><p>比较字符串</p><p> 如果数组里的第一个字符串包含了第二个字符串中的所有字母，则返回 true</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mutation</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>].toLowerCase();</span><br><span class="line"><span class="keyword">const</span> two = arr[<span class="number">1</span>].toLowerCase();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;two.length;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!first.includes(two[i])) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mutation([<span class="string">"hello"</span>, <span class="string">"hey"</span>]);</span><br></pre></td></tr></table></figure></li><li><p>分割数组</p><p> 请编写一个函数，该函数将一个数组（第一个参数）拆分成若干长度为 size（第二个参数）的子数组，并将它们作为二维数组返回。</p> <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunkArrayInGroups</span><span class="params">(arr, size)</span> &#123;</span></span><br><span class="line">const newArr = [];</span><br><span class="line"><span class="keyword">for</span>(let <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;arr.<span class="built_in">length</span>;<span class="built_in">i</span>+=<span class="built_in">size</span>) &#123;</span><br><span class="line">    newArr.push(arr.slice(<span class="built_in">i</span>, <span class="built_in">i</span>+<span class="built_in">size</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunkArrayInGroups([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>], <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol><p>6.应用函数式编程将字符串转换为URL片段</p><pre><code>将字符串 title 转换成带有连字符号的 URL。 您可以使用本节中介绍的任何方法，但不要用 replace 方法。 以下是本次挑战的要求：输入包含空格和标题大小写单词的字符串输出字符串，单词之间的空格用连字符 (-) 替换输出应该是小写字母输出不应有任何空格urlSlug(&quot; Winter Is  Coming&quot;) 应返回 winter-is-coming<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlSlug</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> title.toLowerCase().split(<span class="string">' '</span>).filter(<span class="function"><span class="params">i</span> =&gt;</span> i).join(<span class="string">'-'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlSlug</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> title</span><br><span class="line">    .toLowerCase()</span><br><span class="line">    .trim()</span><br><span class="line">    .split(<span class="regexp">/\s+/</span>)</span><br><span class="line">    .join(<span class="string">"-"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlSlug</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> title</span><br><span class="line">    .split(<span class="string">" "</span>)</span><br><span class="line">    .filter(<span class="function"><span class="params">substr</span> =&gt;</span> substr !== <span class="string">""</span>)</span><br><span class="line">    .join(<span class="string">"-"</span>)</span><br><span class="line">    .toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ol start="7"><li><p>范围内的数字求和</p><p> 我们会传入一个由两个数字组成的数组。 给出一个含有两个数字的数组，我们需要写一个函数，让它返回这两个数字间所有数字（包含这两个数字）的总和。 最低的数字并不总是第一位。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="built_in">Math</span>.max(arr[<span class="number">0</span>], arr[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">let</span> min = <span class="built_in">Math</span>.min(arr[<span class="number">0</span>], arr[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">let</span> sumBetween = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = min; i &lt;= max; i++) &#123;</span><br><span class="line">    sumBetween += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sumBetween;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sumAll([<span class="number">1</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sumAll = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Buckle up everything to one!</span></span><br><span class="line">  <span class="keyword">const</span> startNum = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> endNum = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Get the count of numbers between the two numbers by subtracting them and add 1 to the absolute value.</span></span><br><span class="line">  <span class="comment">// ex. There are |1-4| + 1 = 4, (1, 2, 3, 4), 4 numbers between 1 and 4.</span></span><br><span class="line">  <span class="keyword">const</span> numCount = <span class="built_in">Math</span>.abs(startNum - endNum) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Using Arithmetic Progression summing formula</span></span><br><span class="line">  <span class="keyword">const</span> sum = ((startNum + endNum) * numCount) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAll</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num1 = arr[<span class="number">0</span>] &lt; arr[<span class="number">1</span>] ? arr[<span class="number">0</span>] : arr[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">var</span> num2 = arr[<span class="number">0</span>] &lt; arr[<span class="number">1</span>] ? arr[<span class="number">1</span>] : arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> count = ((num1+num2)*(num2-num1+<span class="number">1</span>)) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sumAll([<span class="number">1</span>, <span class="number">4</span>]);</span><br></pre></td></tr></table></figure></li><li><p>数组的对称差</p><p> 比较两个数组并返回一个新数组，包含所有只在其中一个数组中出现的元素，排除两个数组都存在的元素。 换言之，我们需要返回两个数组的对称差。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffArray</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> newArr = [];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> a) &#123;</span><br><span class="line">          <span class="keyword">if</span>(!b.includes(i)) &#123;</span><br><span class="line">            newArr.push(i);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    diff(arr1, arr2);</span><br><span class="line">    diff(arr2, arr1);</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffArray</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...diff(arr1, arr2), ...diff(arr2, arr1)];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">diff</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.filter(<span class="function"><span class="params">item</span> =&gt;</span> b.indexOf(item) === <span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">diffArray</span>(<span class="params">arr1, arr2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr1</span><br><span class="line">    .concat(arr2)</span><br><span class="line">    .filter(<span class="function"><span class="params">item</span> =&gt;</span> !arr1.includes(item) || !arr2.includes(item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">diffArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure></li><li><p>过滤数组元素</p><p> 你将获得一个初始数组（destroyer 函数中的第一个参数），后跟一个或多个参数。 从初始数组中移除所有与后续参数相等的元素。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = [];</span><br><span class="line">  <span class="keyword">const</span> [first, ...rest] = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> first) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!rest.includes(i)) &#123;</span><br><span class="line">      newArr.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> valsToRemove = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).slice(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !valsToRemove.includes(val);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr, ...valsToRemove</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !valsToRemove.includes(elem));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> valsToRemove = <span class="built_in">Object</span>.values(<span class="built_in">arguments</span>).slice(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; valsToRemove.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] === valsToRemove[j]) &#123;</span><br><span class="line">        <span class="keyword">delete</span> arr[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item !== <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">destroyer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>找出包含特定键值对的对象找出包含特定键值对的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">whatIsInAName</span>(<span class="params">collection, source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> srcKeys = <span class="built_in">Object</span>.keys(source);</span><br><span class="line">  <span class="comment">// 只修改这一行下面的代码</span></span><br><span class="line">  <span class="keyword">const</span> arr = collection.filter(<span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> srcKeys) &#123;</span><br><span class="line">     <span class="keyword">if</span> (!obj.hasOwnProperty(key) ||</span><br><span class="line">        obj[key] !== source[key]</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只修改这一行上面的代码</span></span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whatIsInAName</span>(<span class="params">collection, source</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// "What's in a name? that which we call a rose</span></span><br><span class="line">  <span class="comment">// By any other name would smell as sweet.”</span></span><br><span class="line">  <span class="comment">// -- by William Shakespeare, Romeo and Juliet</span></span><br><span class="line">  <span class="keyword">var</span> srcKeys = <span class="built_in">Object</span>.keys(source);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> collection.filter(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> srcKeys.every(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> obj.hasOwnProperty(key) &amp;&amp; obj[key] === source[key];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">whatIsInAName([&#123; <span class="attr">first</span>: <span class="string">"Romeo"</span>, <span class="attr">last</span>: <span class="string">"Montague"</span> &#125;, &#123; <span class="attr">first</span>: <span class="string">"Mercutio"</span>, <span class="attr">last</span>: <span class="literal">null</span> &#125;, &#123; <span class="attr">first</span>: <span class="string">"Tybalt"</span>, <span class="attr">last</span>: <span class="string">"Capulet"</span> &#125;], &#123; <span class="attr">last</span>: <span class="string">"Capulet"</span> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>短线连接格式</p><p>将字符串转换为短线连接格式。 短线连接格式是小写单词全部小写并以破折号分隔。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spinalCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="regexp">/\s|_|(?=[A-Z])/</span>).join(<span class="string">'-'</span>).toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spinalCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"><span class="comment">// Create a variable for the white space and underscores.</span></span><br><span class="line">  <span class="keyword">var</span> regex = <span class="regexp">/\s+|_+/g</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Replace low-upper case to low-space-uppercase</span></span><br><span class="line">  str = str.replace(<span class="regexp">/([a-z])([A-Z])/g</span>, <span class="string">"$1 $2"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Replace space and underscore with -</span></span><br><span class="line">  <span class="keyword">return</span> str.replace(regex, <span class="string">"-"</span>).toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spinalCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Replace low-upper case to low-space-uppercase</span></span><br><span class="line">  str = str.replace(<span class="regexp">/([a-z])([A-Z])/g</span>, <span class="string">"$1 $2"</span>);</span><br><span class="line">  <span class="comment">// Split on whitespace and underscores and join with dash</span></span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">    .toLowerCase()</span><br><span class="line">    .split(<span class="regexp">/(?:_| )+/</span>)</span><br><span class="line">    .join(<span class="string">"-"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">spinalCase(<span class="string">'This Is Spinal Tap'</span>);</span><br></pre></td></tr></table></figure></li><li><p>儿童黑话</p><p>儿童黑话也叫 Pig Latin，是一种英语语言游戏。 规则如下：</p></li></ol><ul><li><p>如果单词以辅音开头，就把第一个辅音字母或第一组辅音簇移到单词的结尾，并在后面加上 ay。</p></li><li><p>如果单词以元音开头，只需要在结尾加上 way。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">function translatePigLatin(<span class="built_in">str</span>) &#123;</span><br><span class="line">  let consonantRegex = /^[^aeiou]+/;</span><br><span class="line">  let myConsonants = <span class="built_in">str</span>.<span class="built_in">match</span>(consonantRegex);</span><br><span class="line">  <span class="keyword">return</span> myConsonants !== <span class="keyword">null</span></span><br><span class="line">    ? <span class="built_in">str</span></span><br><span class="line">        .replace(consonantRegex, <span class="string">""</span>)</span><br><span class="line">        .<span class="built_in">concat</span>(myConsonants)</span><br><span class="line">        .<span class="built_in">concat</span>(<span class="string">"ay"</span>)</span><br><span class="line">    : <span class="built_in">str</span>.<span class="built_in">concat</span>(<span class="string">"way"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function translatePigLatin(<span class="built_in">str</span>) &#123;</span><br><span class="line">  <span class="comment">// Create variables to be used</span></span><br><span class="line">  var pigLatin = <span class="string">""</span>;</span><br><span class="line">  var regex = /[aeiou]/gi;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check if the first character is a vowel</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">str</span>[<span class="number">0</span>].<span class="built_in">match</span>(regex)) &#123;</span><br><span class="line">    pigLatin = <span class="built_in">str</span> + <span class="string">"way"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">str</span>.<span class="built_in">match</span>(regex) === <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Check if the string contains only consonants</span></span><br><span class="line">    pigLatin = <span class="built_in">str</span> + <span class="string">"ay"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Find how many consonants before the first vowel.</span></span><br><span class="line">    var vowelIndice = <span class="built_in">str</span>.indexOf(<span class="built_in">str</span>.<span class="built_in">match</span>(regex)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Take the string from the first vowel to the last char</span></span><br><span class="line">    <span class="comment">// then add the consonants that were previously omitted and add the ending.</span></span><br><span class="line">    pigLatin = <span class="built_in">str</span>.substr(vowelIndice) + <span class="built_in">str</span>.substr(<span class="number">0</span>, vowelIndice) + <span class="string">"ay"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pigLatin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function translatePigLatin(<span class="built_in">str</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">str</span>.<span class="built_in">match</span>(/^[aeiou]/)) <span class="keyword">return</span> <span class="built_in">str</span> + <span class="string">"way"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> consonantCluster = <span class="built_in">str</span>.<span class="built_in">match</span>(/^[^aeiou]+/)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">str</span>.substring(consonantCluster.length) + consonantCluster + <span class="string">"ay"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function translatePigLatin(<span class="built_in">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line">    .replace(/^[aeiou]\w*/, <span class="string">"$&amp;way"</span>)</span><br><span class="line">    .replace(/(^[^aeiou]+)(\w*)/, <span class="string">"$2$1ay"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">translatePigLatin(<span class="string">"consonant"</span>);</span><br></pre></td></tr></table></figure></li></ul><ol start="13"><li><p>DNA 配对</p><p>给出的 DNA 链上缺少配对元素。 请基于每个字符，获取与其配对的元素，并将结果作为二维数组返回。</p><p>DNA 的碱基对 有两种形式：一种是 A 与 T，一种是 C 与 G。 请为参数中给出的每个字符配对相应的碱基。</p><p>注意，参数中给出的字符应作为每个子数组中的第一个元素返回。</p><p>例如，传入 GCG 时，应返回 [[“G”, “C”], [“C”,”G”], [“G”, “C”]]。</p><p>字符和它的配对组成一个数组中，所有配对数组放在一个数组里。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pairElement</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pairs = &#123;</span><br><span class="line">    A: <span class="string">"T"</span>,</span><br><span class="line">    T: <span class="string">"A"</span>,</span><br><span class="line">    C: <span class="string">"G"</span>,</span><br><span class="line">    G: <span class="string">"C"</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> arr = str.split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> arr.map(<span class="function"><span class="params">i</span> =&gt;</span> [i, pairs[i]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pairElement(<span class="string">"GCG"</span>);</span><br></pre></td></tr></table></figure></li><li><p>寻找缺失的字母<br>在这道题目中，我们需要写一个函数，找出传入的字符串里缺失的字母并返回它。</p><p>如果所有字母都在传入的字符串范围内，返回 undefined。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fearNotLetter</span><span class="params">(str)</span> &#123;</span></span><br><span class="line">  <span class="keyword">for</span>(var <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;str.<span class="built_in">length</span>;<span class="built_in">i</span>++) &#123;</span><br><span class="line">    var code = str.charCodeAt(<span class="built_in">i</span>);</span><br><span class="line">    <span class="keyword">if</span>(code !== str.charCodeAt(<span class="number">0</span>) + <span class="built_in">i</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> String.fromCharCode(code - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> undefined;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fearNotLetter</span><span class="params">(str)</span> &#123;</span></span><br><span class="line">  let currCharCode = str.charCodeAt(<span class="number">0</span>);</span><br><span class="line">  let missing = undefined;</span><br><span class="line"></span><br><span class="line">  str</span><br><span class="line">    .split(<span class="string">""</span>)</span><br><span class="line">    .forEach(letter =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (letter.charCodeAt(<span class="number">0</span>) === currCharCode) &#123;</span><br><span class="line">        currCharCode++;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        missing = String.fromCharCode(currCharCode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fearNotLetter</span><span class="params">(str)</span> &#123;</span></span><br><span class="line">      <span class="keyword">for</span> (let <span class="built_in">i</span> = <span class="number">1</span>; <span class="built_in">i</span> &lt; str.<span class="built_in">length</span>; ++<span class="built_in">i</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str.charCodeAt(<span class="built_in">i</span>) - str.charCodeAt(<span class="built_in">i</span> - <span class="number">1</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> String.fromCharCode(str.charCodeAt(<span class="built_in">i</span> - <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> missing;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fearNotLetter(<span class="string">"abce"</span>);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaScript算法与数据结构-基础算法&quot;&gt;&lt;a href=&quot;#JavaScript算法与数据结构-基础算法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript算法与数据结构_基础算法&quot;&gt;&lt;/a&gt;JavaScript算法与数据结构_基础
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="//website.cwzcfj.cn/tags/js/"/>
    
      <category term="算法" scheme="//website.cwzcfj.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>图床搭建教程</title>
    <link href="//website.cwzcfj.cn/2023/04/06/%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>//website.cwzcfj.cn/2023/04/06/图床搭建教程/</id>
    <published>2023-04-06T13:38:30.000Z</published>
    <updated>2023-04-26T13:55:04.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建GitHub-PicGo-jsDelivr搭建高速稳定免费自己的图床存储资源"><a href="#搭建GitHub-PicGo-jsDelivr搭建高速稳定免费自己的图床存储资源" class="headerlink" title="搭建GitHub+PicGo+jsDelivr搭建高速稳定免费自己的图床存储资源"></a>搭建GitHub+PicGo+jsDelivr搭建高速稳定免费自己的图床存储资源</h2><h3 id="什么是图床"><a href="#什么是图床" class="headerlink" title="什么是图床?"></a>什么是图床?</h3><p>图床一般是指储存图片的服务器，将图片等资源和应用服务分开，有如下几点好处: </p><ol><li>统一管理图片等资源</li><li>防止应用服务器越来越臃肿</li><li>减轻应用服务器的负担，加速页面访问速度</li></ol><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>一般图床为私有得或者公共的资源存储服务器，如七牛云、阿里云、腾讯云等，如果你搭建的是个人网站，那么没必要购买私有云服务器，成本比较高。</p><p>也有免费的公共图床服务器，但这些服务器无论在安全性还是可靠性都是没有保障的，数据容易丢失，访问响应慢。</p><p>想到可以在GitHub/Gitee上搭建GitHub Page，里面可以上传图片并且图片也可以访问，这不是很好的图床吗，本地可以保存一份，并且上传到Github/Gitee上云端也可以保存一份，还可以提供地址在线访问图片，这可以很好的解决我们的图床问题。<br>如果是在国内访问，推荐采用Gitee搭建图床，国外访问则采用Github page搭建。</p><p>本文通过Github搭建图床，采用jsdelivr做高速CDN，采用PicGo开源工具进行图片管理。</p><h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><ol><li>新建图床仓库(以Github为例)。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/879733672/images/img/2021-11-18_000824.png" alt></p><ol start="2"><li>生成Token，供picGo配置</li></ol><p>在主页点击用户头像，选择【Settings】-【Developer settings】-【Personal access tokens】-【Generate new token】，填写好描述，勾选【repo】，然后点击【Generate token】生成一个Token，注意这个Token只会显示一次，先保存至记事本，后续会用到。</p><p><img src="https://cdn.jsdelivr.net/gh/879733672/images/img/2021-11-18_001722.png" alt></p><p><img src="https://raw.githubusercontent.com/879733672/images/master/img/2021-11-18_001849.png" alt></p><p><img src="https://raw.githubusercontent.com/879733672/images/master/img/2021-11-18_002027.png" alt></p><p>保存生成后的token。</p><ol start="3"><li>工具使用</li></ol><p>配置picGo</p><p>uPic和iPic、PicGo类似，uPic，除了支持微博、码云、Github、腾讯云、阿里云、又拍云、七牛云等图床之外，还可以自定义配置图床。<br>uPic是一款开源简洁的图床客户端，方便用户直接上传图片到指定的存储空间，并获取有效的markdown图片地址，其默认图床为SM.MS，当然也支持配置腾讯云、七牛云、又拍云等常见的对象存储。最关键的是支持图床自定义配置，也让我毅然抛弃了一直以来付费使用的iPic。<br>在上传方式上，uPic支持本地选择/复制文件上传、截图上传，甚至可直接拖动文件到菜单栏uPic图标上完成上传动作。<br>在最新更新版本之后，uPic新增支持直接从浏览器中复制或者拖动在线图片上传到指定图床，这样就不用下载到本地再进行上传。</p><p>下载<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">PicGo</a>，选择对应的安装包。</p><p><img src="https://raw.githubusercontent.com/879733672/images/master/img/2021-11-18_002734.png" alt></p><ol start="4"><li><p>下载安装后打开picGo进行设置。</p><ol><li>设定仓库名：按照【用户名/图床仓库名】的格式填写</li><li>设定分支名：【master】</li><li>设定Token：粘贴上述生成的【Token】</li><li>指定存储路径：填写想要储存的路径，如【img/】，这样就会在仓库下创建一个名为 img 的文件夹，图片将会储存在此文件夹中</li><li>设定自定义域名：它的的作用是，在图片上传后，PicGo会按照【自定义域名+上传的图片名】的方式生成访问链接，放到粘贴板上，因为我们要使用jsDelivr加速访问，所以可以设置为<a href="https://cdn.jsdelivr.net/gh/用户名/图床仓库名，关于jsDelivr下面会说明。" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/图床仓库名，关于jsDelivr下面会说明。</a></li></ol></li></ol><p><img src="https://raw.githubusercontent.com/879733672/images/master/img/2021-11-18_011902.png" alt></p><ol start="5"><li>关于jsDelivr</li></ol><p>jsDelivr是一个致力于为开发者提供数千种Javascript、CSS等超过1650多种 Libraries 加速的免费CDN服务，该平台是首个「打通中国大陆与海外的免费CDN服务。<br>jsDelivr平台将服务重心放在更快速的网路连线，利用CDN技术来确保每个地区的使用者都能获得最好的连接速度。此外jsDelivr 可将不同的JavaScript 或CSS libraries 整合在一起，通过一段链结来载入网站，非常方便。<br>具体使用方法：<a href="https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径。" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径。</a><br>其中：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源。<br>例如：<br><a href="https://lihao1991.gitee.io/images-bed/iblog-bg-8922321312932423345.jpg" target="_blank" rel="noopener">https://lihao1991.gitee.io/images-bed/iblog-bg-8922321312932423345.jpg</a></p><p>加载任何Github发布、提交或分支<br><a href="https://cdn.jsdelivr.net/gh/user/repo@version/file" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/user/repo@version/file</a><br>加载 jQuery v3.2.1<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</a><br>完全省略该版本以获取最新版本<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</a><br>在末尾添加/以获取资源目录列表<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery/</a><br>至此，所有搭建工作已完成，可以高效的开发编写文档了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建GitHub-PicGo-jsDelivr搭建高速稳定免费自己的图床存储资源&quot;&gt;&lt;a href=&quot;#搭建GitHub-PicGo-jsDelivr搭建高速稳定免费自己的图床存储资源&quot; class=&quot;headerlink&quot; title=&quot;搭建GitHub+Pic
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="图床" scheme="//website.cwzcfj.cn/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="图库" scheme="//website.cwzcfj.cn/tags/%E5%9B%BE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>jwt使用教程</title>
    <link href="//website.cwzcfj.cn/2023/04/02/jwt%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>//website.cwzcfj.cn/2023/04/02/jwt使用教程/</id>
    <published>2023-04-02T13:31:52.000Z</published>
    <updated>2023-04-26T13:54:08.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jwt简介"><a href="#jwt简介" class="headerlink" title="jwt简介"></a>jwt简介</h2><pre><code>* [JWT](https://jwt.io/)(Json Web Token)是实现token技术的一种解决方案,JWT由三部分组成：header(头)、payload(载体)、signature(签名).</code></pre><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><pre><code>* jwt.sign(payload, secretOrPrivateKey, [options, callback])</code></pre><p>   （异步）如果提供回调，则使用err或JWT 调用回调。<br>   （同步）将JsonWebToken返回为字符串。</p><pre><code>payload必须是一个object, buffer或者string。请注意， exp只有当payload是object字面量时才可以设置。secretOrPrivateKey 是包含HMAC算法的密钥或RSA和ECDSA的PEM编码私钥的string或buffer。options:     * algorithm：加密算法（默认值：HS256）    * expiresIn：以秒表示或描述时间跨度zeit / ms的字符串。如60，&quot;2 days&quot;，&quot;10h&quot;，&quot;7d&quot;，Expiration time，过期时间    * notBefore：以秒表示或描述时间跨度zeit / ms的字符串。如：60，&quot;2days&quot;，&quot;10h&quot;，&quot;7d&quot;    * audience：Audience，观众    * issuer：Issuer，发行者    * jwtid：JWT ID    * subject：Subject，主题    * noTimestamp    * header如果payload不是buffer或string，它将被强制转换为使用的字符串JSON.stringify()。在expiresIn，notBefore，audience，subject，issuer没有默认值时。也可以直接在payload中用exp，nbf，aud，sub和iss分别表示，但是你不能在这两个地方同时设置。请记住exp，nbf，iat是NumericDate类型。生成的jwts通常会包含一个iat值除非指定了noTimestamp。如果iat插入payload中，则将使用它来代替实际的时间戳来计算其他事情，诸如options.expiresIn给定一个exp这样的时间间隔。<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss：Issuer，发行者 </span><br><span class="line">sub：Subject，主题</span><br><span class="line">aud：Audience，观众</span><br><span class="line"><span class="built_in">exp</span>：Expiration <span class="built_in">time</span>，过期时间</span><br><span class="line">nbf：Not <span class="keyword">before</span></span><br><span class="line">iat：Issued <span class="keyword">at</span>，发行时间</span><br><span class="line">jti：JWT ID</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sign with default (HMAC SHA256)</span></span><br><span class="line"><span class="keyword">var</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>);</span><br><span class="line"><span class="keyword">var</span> token = jwt.sign(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;, <span class="string">'shhhhh'</span>);</span><br><span class="line"><span class="comment">//backdate a jwt 30 seconds</span></span><br><span class="line"><span class="keyword">var</span> older_token = jwt.sign(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">iat</span>: <span class="built_in">Math</span>.floor(<span class="built_in">Date</span>.now() / <span class="number">1000</span>) - <span class="number">30</span> &#125;, <span class="string">'shhhhh'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sign with RSA SHA256</span></span><br><span class="line"><span class="keyword">var</span> cert = fs.readFileSync(<span class="string">'private.key'</span>);  <span class="comment">// get private key</span></span><br><span class="line"><span class="keyword">var</span> token = jwt.sign(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;, cert, &#123; <span class="attr">algorithm</span>: <span class="string">'RS256'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sign asynchronously</span></span><br><span class="line">jwt.sign(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;, cert, &#123; <span class="attr">algorithm</span>: <span class="string">'RS256'</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, token</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(token);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>Token Expiration (exp claim)签署1小时期限的token:<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jwt.<span class="built_in">sign</span>(&#123;</span><br><span class="line">  <span class="built_in">exp</span>: Math.<span class="built_in">floor</span>(Date.now() / <span class="number">1000</span>) + (<span class="number">60</span> * <span class="number">60</span>),</span><br><span class="line">  <span class="keyword">data</span>: <span class="string">'foobar'</span></span><br><span class="line">&#125;, <span class="string">'secret'</span>);</span><br></pre></td></tr></table></figure>使用此库生成令牌的另一种方法是:<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jwt.<span class="built_in">sign</span>(&#123;</span><br><span class="line">  <span class="keyword">data</span>: <span class="string">'foobar'</span></span><br><span class="line">&#125;, <span class="string">'secret'</span>, &#123; expiresIn: <span class="number">60</span> * <span class="number">60</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//or even better:</span></span><br><span class="line"></span><br><span class="line">jwt.<span class="built_in">sign</span>(&#123;</span><br><span class="line">  <span class="keyword">data</span>: <span class="string">'foobar'</span></span><br><span class="line">&#125;, <span class="string">'secret'</span>, &#123; expiresIn: <span class="string">'1h'</span> &#125;);</span><br></pre></td></tr></table></figure>* jwt.verify（token，secretOrPublicKey，[options，callback]）验证token的合法性</code></pre><h3 id="利用Nodejs搭建简单的Token验证"><a href="#利用Nodejs搭建简单的Token验证" class="headerlink" title="利用Nodejs搭建简单的Token验证"></a>利用Nodejs搭建简单的Token验证</h3><pre><code>* 安装jsonwebtoken<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i jsonwebtoken</span><br></pre></td></tr></table></figure>* Nodejs结合验证```    const express = require(&apos;express&apos;);    const jwt = require(&apos;jsonwebtoken&apos;);    let app = express();    app.listen(5000,()=&gt;{console.log(&apos;Server start port 5000&apos;)});    app.get(&apos;/api&apos; , (req,res) =&gt; {        res.json({            &apos;status&apos;: 200,            &apos;msg&apos; : &apos;访问成功&apos;        });    });    app.post(&apos;/api/login&apos;, (req, res) =&gt; {        /*            iss:签发人            iat:签发时间回溯30s            exp:过期时间 这里可是使用秒数,也可以使用day            &quot;{&quot;jti&quot;:1,&quot;iss&quot;:&quot;gumt.top&quot;,&quot;user&quot;:&quot;goolge&quot;,&quot;iat&quot;:1555650413,&quot;exp&quot;:1555657613}&quot;            &quot;iat&quot;: ~~(Date.now() / 1000)-30,            &quot;exp&quot;: ~~(Date.now() / 1000)+(60*60),        */      const user = {        &quot;jti&quot;: 1,            &quot;iss&quot;: &quot;gumt.top&quot;,            &quot;user&quot;: &quot;goolge&quot;,      }        jwt.sign(user,&quot;secretkey&quot;,{ expiresIn: &apos;1day&apos; },(err,token) =&gt; {            res.json({                token            })        })    });    app.post(&apos;/api/posts&apos;,verifyToken,(req,res) =&gt; {      jwt.verify(req.token, &apos;secretkey&apos;, (err, authData) =&gt; {        if(err) {           res.sendStatus(403);          } else {            res.json({              message: &apos;Post created...&apos;,              authData            });         }      });    });    function verifyToken(req, res, next) {      const bearerHeader = req.headers[&apos;authorization&apos;];      if(typeof bearerHeader !== &apos;undefined&apos;) {        const bearer = bearerHeader.split(&apos; &apos;);        const bearerToken = bearer[1];        req.token = bearerToken;        next();      } else {        res.sendStatus(403);      }    }``` </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jwt简介&quot;&gt;&lt;a href=&quot;#jwt简介&quot; class=&quot;headerlink&quot; title=&quot;jwt简介&quot;&gt;&lt;/a&gt;jwt简介&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;* [JWT](https://jwt.io/)(Json Web Token)是实现token技术
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jwt" scheme="//website.cwzcfj.cn/tags/jwt/"/>
    
      <category term="json web token" scheme="//website.cwzcfj.cn/tags/json-web-token/"/>
    
      <category term="token" scheme="//website.cwzcfj.cn/tags/token/"/>
    
  </entry>
  
  <entry>
    <title>pve常见问题</title>
    <link href="//website.cwzcfj.cn/2022/10/12/pve%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>//website.cwzcfj.cn/2022/10/12/pve常见问题/</id>
    <published>2022-10-12T14:13:11.000Z</published>
    <updated>2023-04-26T13:28:43.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pve-常见问题"><a href="#pve-常见问题" class="headerlink" title="pve 常见问题"></a>pve 常见问题</h2><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">update</span>  // apt <span class="keyword">update</span> 的作用是从/etc/apt/sources.list文件中定义的源中获取的最新的软件包列表。即运行 apt <span class="keyword">update</span> 并没有更新软件，而是相当 windows 下面的检查更新，获取的是软件的状态。</span><br><span class="line">apt <span class="keyword">upgrade</span> // 则是根据 updare 命令获取的最新的软件包列表，去真正地更新软件</span><br><span class="line">apt dis-<span class="keyword">upgrade</span> // 可以聪明的解决相依性的问题，如果相依性问题，需要安装/移除新的 <span class="keyword">Package</span> ，就会试着去安装它。（所以通常 dis-<span class="keyword">upgrade</span> 会被认为是有点风险的升级）</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> ,然后才能运行 <span class="keyword">upgrade</span> 和 dist-<span class="keyword">upgrade</span> ,因为相当与 <span class="keyword">update</span> 命令获取了包的一些信息，比如大小和版本号，然后在运行 <span class="keyword">upgrade</span> 去下载包，如果没有获取包的信息，那么 <span class="keyword">upgrade</span> 就是无效</span><br><span class="line"></span><br><span class="line">apt <span class="keyword">list</span> <span class="comment">--upgradable  // 查看可以更新的包</span></span><br><span class="line">apt <span class="keyword">update</span> &amp;&amp; apt <span class="keyword">upgrade</span> -y 执行软件包数据库更新</span><br><span class="line">apt <span class="keyword">install</span> -f  // 命令可修复依赖关系,假如有软件因依赖关系不满足而无法安装,就可以运行此命令自动修复安装程序包所依赖的包</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> /etc/apt/sources.<span class="keyword">list</span>   <span class="comment">// 查当前镜像源配置</span></span><br></pre></td></tr></table></figure><ul><li>PVE 虚拟机在一次重启后web打开一片空白，并非打不开，而是不显示任何东西。使用F12打开开发者工具，可以看到如下信息:<br><img src="https://cdn.jsdelivr.ren/gh/879733672/images@cdn/img/202210122315506.png" alt><br>关键信息：<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">no</span> such <span class="keyword">file</span> <span class="string">'/PVE/StdWorkspace.js'</span></span><br></pre></td></tr></table></figure></li></ul><p>解决办法<br>升级浏览器版本内核，chrome&gt;80, 如果不行在执行下列命令<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade</span><br><span class="line">apt install -f</span><br><span class="line"></span><br><span class="line">apt dist-upgrade</span><br><span class="line">pvecm updatecerts --force</span><br><span class="line">server pveproxy restart</span><br></pre></td></tr></table></figure></p><h3 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">## 进入系统软件源配置文件目录</span></span><br><span class="line">cd /etc/apt</span><br><span class="line"></span><br><span class="line"><span class="meta">## 将默认软件源配置文件进行备份</span></span><br><span class="line"><span class="keyword">cp</span> sources<span class="meta">.list</span> sources<span class="meta">.list</span>.bak</span><br></pre></td></tr></table></figure><p>这里我将使用中国科技大（USTC）的镜像仓库进行替换，使用如下命令：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 替换系统软件仓库</span></span><br><span class="line"></span><br><span class="line">sed -i 's|<span class="string">^deb http://ftp.debian.org</span>|<span class="string">deb https://mirrors.ustc.edu.cn</span>|<span class="string">g' /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="string">sed -i 's</span>|<span class="string">^deb http://security.debian.org</span>|<span class="string">deb https://mirrors.ustc.edu.cn/debian-security</span>|<span class="string">g' /etc/apt/sources.list</span></span><br></pre></td></tr></table></figure><p>执行完成后，检查是否执行正确：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">## 输出系统源配置文件，检查是否正确</span><br><span class="line"><span class="keyword">cat</span> /etc/apt/sources.<span class="keyword">list</span></span><br><span class="line">如果输出结果中有 USTC 的镜像地址，则表示命令已经正确执行：</span><br><span class="line"></span><br><span class="line">## 输出内容参考：</span><br><span class="line"></span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.ustc.edu.<span class="keyword">cn</span>/debian bullseye main contrib</span><br><span class="line"></span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.ustc.edu.<span class="keyword">cn</span>/debian bullseye-updates main contrib</span><br><span class="line"></span><br><span class="line"># security updates</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.ustc.edu.<span class="keyword">cn</span>/debian-security bullseye-security main contrib</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 清理</span></span><br><span class="line">apt clean &amp;&amp; apt autoclean</span><br><span class="line"></span><br><span class="line"><span class="comment">## 同步镜像仓库</span></span><br><span class="line">apt <span class="keyword">update</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## apt 命令显示已安装软件包</span></span><br><span class="line">apt <span class="keyword">list</span> –installed</span><br><span class="line"></span><br><span class="line"><span class="comment">## dpkg 命令显示已安装软件包:</span></span><br><span class="line">dpkg-<span class="keyword">query</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment">## 列出系统里 Snap 已安装软件包:</span></span><br><span class="line">snap <span class="keyword">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Flatpak 已安装软件包:</span></span><br><span class="line">flatpak <span class="keyword">list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apt-<span class="keyword">get</span> 命令</span><br><span class="line"><span class="comment">## 更新安装源（Source）</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">update</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 更新已安装的软件包</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">upgrade</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 更新已安装的软件包（识别并处理依赖关系的改变）</span></span><br><span class="line">apt-<span class="keyword">get</span> dist-<span class="keyword">upgrade</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除软件包, 保留配置文件</span></span><br><span class="line">apt-<span class="keyword">get</span> remove PackageName</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除软件包, 同时删除配置文件</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="comment">--purge remove PackageName</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 清除 已下载的软件包 和 旧软件包</span></span><br><span class="line">apt-<span class="keyword">get</span> clean &amp;&amp; apt-<span class="keyword">get</span> autoclean</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修复依赖关系</span></span><br><span class="line">apt-<span class="keyword">get</span> -f <span class="keyword">install</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 普通安装</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">install</span> PackageName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 列出已安装的所有软件包</span></span><br><span class="line">dpkg -l</span><br><span class="line"></span><br><span class="line"><span class="comment">## 搜索软件包</span></span><br><span class="line">apt-<span class="keyword">cache</span> <span class="keyword">search</span> PackageName</span><br><span class="line"></span><br><span class="line"><span class="comment">## 检查是否有损坏的依赖</span></span><br><span class="line">apt-<span class="keyword">get</span> <span class="keyword">check</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### pve目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> iso镜像目录 /<span class="keyword">var</span>/lib/vz/<span class="keyword">template</span>/iso</span><br><span class="line"><span class="keyword">local</span>-lvm存储镜像，位置在/dev/pve</span><br><span class="line"></span><br><span class="line">find / -<span class="keyword">name</span> DS918_7<span class="number">.1</span><span class="number">.0</span><span class="number">-42661.</span>img  // 查找文件命令</span><br><span class="line">qm importdisk <span class="number">101</span> /<span class="keyword">var</span>/lib/vz/<span class="keyword">template</span>/iso/DS918_7<span class="number">.1</span><span class="number">.0</span><span class="number">-42661.</span>img <span class="keyword">local</span>-lvm  // 导入镜像</span><br></pre></td></tr></table></figure><h3 id="设置硬盘直通"><a href="#设置硬盘直通" class="headerlink" title="设置硬盘直通"></a>设置硬盘直通</h3><p>ls /dev/disk/by-id<br>ata-ST1000LM035-1RK172_ZDE5PT0X-part2</p><p>qm set 虚拟机ID -sata1 /dev/disk/by-id/硬盘识别符</p><p><img src="https://cdn.jsdelivr.net/gh/879733672/images@cdn/img/202211051736096.png" alt><br>ata1代表的是未占用的id数，因为sata0刚刚被我们引导盘（也就是电脑自带硬盘占用了），当然你也可以设置成其它的，PVE支持satat0-5。当出现上图那样“update”的时候，就说明硬盘直通成功！<br><img src="https://cdn.jsdelivr.net/gh/879733672/images@cdn/img/202211051737040.png" alt></p><p>回到PVE虚拟机系统，点击我们创建的虚拟机ID，在硬件里面就可以看到多出来一个“硬盘（sata1）”，它就是我们挂载进来的直通硬盘。如下图：<br><img src="https://cdn.jsdelivr.net/gh/879733672/images@cdn/img/202211051740782.png" alt></p><p>格式化分区：<br>lsblk:查看分区<br>格式化分区<br>mkfs.ext4 /dev/sda</p><p>lsblk:查看分区是否挂载完成<br>// 创建分区<br>fdisk /dev/sda<br>// 格式化分区<br>mkfs -t ext4 /dev/sda1 </p><p>手动挂载分区<br>mount /dev/sda3 /mnt/sda3<br>mount /dev/sda4 /mnt/sda4<br>mount /dev/sda5 /mnt/sda5</p><p>二、开启直通<br>1、修改 /etc/default/grub<br>默认<br>GRUB_CMDLINE_LINUX_DEFAULT=”quiet”<br>只开启 PCIE (网卡或SATA控制器)的直通功能，即 IOMMU 分组<br>GRUB_CMDLINE_LINUX_DEFAULT=”quiet intel_iommu=on pcie_acs_override=downstream”<br>并打开核显直通功能。N5105核显无法直通且可以用来主系统或者LXC容器硬解，所以只开启 PCIE 直通。<br>GRUB_CMDLINE_LINUX_DEFAULT=”quiet intel_iommu=on video=efifb:off,vesafb:off pcie_acs_override=downstream”<br>2、更新grub<br>update-grub</p><ol start="3"><li>重启<br>reboot</li><li>查看是否成功，有输出代表成功<br>dmesg |grep -e DMAR -e IOMM</li></ol><p><a href="https://www.bilibili.com/read/cv17670431" target="_blank" rel="noopener">地址</a></p><p><a href="https://post.smzdm.com/p/ar6k3m8w/?zdm_ss=Android_5648142893_&amp;send_by=5648142893&amp;from=other&amp;invite_code=zdm7mdve9ninv/" target="_blank" rel="noopener">分区设置</a></p><p><a href="https://post.smzdm.com/p/a9gvp557/" target="_blank" rel="noopener">教程</a></p><p>mstsc // windows打开远程链接 </p><p><a href="https://post.smzdm.com/p/alxom300/" target="_blank" rel="noopener">https://post.smzdm.com/p/alxom300/</a></p><p><a href="https://flybace.com/5644.html" target="_blank" rel="noopener">https://flybace.com/5644.html</a></p><p>PVE下安装Windows10并直通核显、键盘鼠标、声卡等设备详细步骤<br><a href="https://www.simaek.com/archives/69/" target="_blank" rel="noopener">https://www.simaek.com/archives/69/</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询是否自启动</span><br><span class="line">systemctl list-unit-files</span><br><span class="line"></span><br><span class="line">查询所有已启动服务</span><br><span class="line">systemctl list-units --type=service</span><br><span class="line"></span><br><span class="line">使某服务自动启动</span><br><span class="line">systemctl enable   httpd.service</span><br><span class="line"></span><br><span class="line">使某服务不自动启动</span><br><span class="line">systemctl disable httpd.service</span><br><span class="line"></span><br><span class="line">启动某服务</span><br><span class="line">systemctl start httpd.service</span><br><span class="line"></span><br><span class="line">停止某服务</span><br><span class="line">systemctl stop httpd.service</span><br><span class="line"></span><br><span class="line">重启某服务</span><br><span class="line">systemctl restart httpd.service</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> shutdown也是关机命令，其语法格式：</span><br></pre></td></tr></table></figure><p>  shutdown [option] [时间] [消息内容]<br>  <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-k ： 并不是真的关机，只发送警告信息给登录用户</span></span><br><span class="line"><span class="deletion">-r ： 在将系统的所有服务关闭之后立刻重新启动系统</span></span><br><span class="line"><span class="deletion">-h ： 将系统的所有服务关闭之后 ，立刻关机</span></span><br><span class="line"><span class="deletion">-c ： 取消已经在进行的 shutdown 命令操作</span></span><br><span class="line">时间 ：指定系统关机的时间 ！若没有这个参数，系统默认 1 分钟后自动执行shutdown操作</span><br></pre></td></tr></table></figure></p><p>shutdown -h now                                    立即关机<br>shutdown -h +10                                    10分钟后关机<br>shutdown -h 20:00                                20:00分点关机<br>shutdown -r now                                 立刻重启(root用户使用)<br>shutdown -r 10                                     过10分钟自动重启(root用户使用)<br>shutdown -r 20:35                                 在时间为20:35时候重启(root用户使用)<br>shutdown -c                                        取消上一次所做的命令<br>shutdown -k “I will shutdown the systemc”        发送警告信息给其他用户<br>shutdown -h +10 “I will shutdown the systemc”   10分钟后关机并发送提示消息<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;pve-常见问题&quot;&gt;&lt;a href=&quot;#pve-常见问题&quot; class=&quot;headerlink&quot; title=&quot;pve 常见问题&quot;&gt;&lt;/a&gt;pve 常见问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="pve" scheme="//website.cwzcfj.cn/tags/pve/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫之scrapy使用教程</title>
    <link href="//website.cwzcfj.cn/2022/10/12/python/"/>
    <id>//website.cwzcfj.cn/2022/10/12/python/</id>
    <published>2022-10-12T14:13:11.000Z</published>
    <updated>2023-04-26T13:28:50.895Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python-爬虫之scrapy使用教程"><a href="#python-爬虫之scrapy使用教程" class="headerlink" title="python 爬虫之scrapy使用教程"></a>python 爬虫之scrapy使用教程</h3><ul><li><p>pip3 install scrapy</p></li><li><p>scrapy startporject 爬虫名字</p></li><li><p>scrapy genspider 爬虫名字 域名</p></li><li><p>编写爬虫</p></li><li><p>运行爬虫scrapy crawl 爬虫名字</p></li></ul><h3 id="pip3修改源配置"><a href="#pip3修改源配置" class="headerlink" title="pip3修改源配置"></a>pip3修改源配置</h3><ul><li>文件存放位置<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\p</span>ip<span class="symbol">\p</span>ip.ini</span><br></pre></td></tr></table></figure></li></ul><p>其中Administrator更换为你当前的用户名</p><p>有些人可能没有pip文件夹和pip.ini文件，那就自己手动创建</p><p>在pip.ini文件中编辑以下内容<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="comment"># 源地址</span></span><br><span class="line"><span class="attr">index-url</span> = http://pypi.douban.com/simple</span><br><span class="line"><span class="comment"># 添加源主机为可信主机，要不然可能报错</span></span><br><span class="line"><span class="attr">trusted-host</span> = pypi.douban.com</span><br><span class="line"><span class="comment"># 取消pip版本检查，排除每次都报最新的pip</span></span><br><span class="line"><span class="attr">disable-pip-version-check</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 超时时间，可自行调整</span></span><br><span class="line"><span class="attr">timeout</span> = <span class="number">1200</span></span><br></pre></td></tr></table></figure></p><p>查看配置<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3<span class="built_in"> config </span>list</span><br></pre></td></tr></table></figure></p><p>更新pip3为最新版<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br></pre></td></tr></table></figure></p><ul><li>国内常用Python镜像源</li></ul><ul><li><p>阿里云</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/pypi/</span>simple<span class="regexp">/</span></span><br></pre></td></tr></table></figure></li><li><p>中国科学技术大学</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//pypi.mirrors.ustc.edu.cn/simple</span></span><br></pre></td></tr></table></figure></li><li><p>清华大学</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//pypi.tuna.tsinghua.edu.cn/simple</span></span><br></pre></td></tr></table></figure></li><li><p>豆瓣</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>pypi.douban.com<span class="regexp">/simple/</span></span><br></pre></td></tr></table></figure></li><li><p>华中理工大学</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//pypi.hustunique.com/simple</span></span><br></pre></td></tr></table></figure></li><li><p>山东理工大学</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>//pypi.sdutlinux<span class="meta">.org</span>/simple</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python-爬虫之scrapy使用教程&quot;&gt;&lt;a href=&quot;#python-爬虫之scrapy使用教程&quot; class=&quot;headerlink&quot; title=&quot;python 爬虫之scrapy使用教程&quot;&gt;&lt;/a&gt;python 爬虫之scrapy使用教程&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="后端" scheme="//website.cwzcfj.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="python" scheme="//website.cwzcfj.cn/tags/python/"/>
    
      <category term="scrapy" scheme="//website.cwzcfj.cn/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>cpu调速风扇</title>
    <link href="//website.cwzcfj.cn/2022/10/10/cpu%E8%B0%83%E9%80%9F%E9%A3%8E%E6%89%87/"/>
    <id>//website.cwzcfj.cn/2022/10/10/cpu调速风扇/</id>
    <published>2022-10-10T13:08:48.000Z</published>
    <updated>2023-04-26T13:10:23.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用3线4线cpu风扇机箱风扇接口定义"><a href="#常用3线4线cpu风扇机箱风扇接口定义" class="headerlink" title="常用3线4线cpu风扇机箱风扇接口定义"></a>常用3线4线cpu风扇机箱风扇接口定义</h3><p>4根线分别是GND、VCC、FG转速信号、PWM（调速）。 位置可能不同。 FG是转速信号，用于CPU侦测转速。转速=频率*30（4极风扇）。 PWM通过方波占空比控制转速。PWM接地–最低转速，PWM不接最高转速。频率25KHZ。一般Duty 0%-20%转速是相同的。可以用函数信号发生器提供信号测试Duty–转速曲线。 MCU可以控制PWM控制转速。可以通过FG做闭环控制。 注意接口都是开集电极输出，需要上拉电阻。</p><p><img src="https://cdn.jsdelivr.ren/gh/879733672/images@cdn/img/202210102114239.png" alt></p><ul><li><p>CPU 风扇 3针定义：1脚 接地（一般为黑色线）2脚 12V电压（红色线）3脚 测速线FG（监控风扇转速，一般黄色）。</p></li><li><p>CPU 风扇 4针定义：1脚 接地（一般为黑色线）2脚 12V电压（红色线）3脚 测速线FG（监控风扇转速，一般黄色）。3脚 调速线PWM（PWM调速，一般蓝色）如下图：</p></li></ul><p><img src="https://cdn.jsdelivr.ren/gh/879733672/images@cdn/img/202210102130842.png" alt></p><p>4针插座比3针多出一根第4针（用于转速调节控制）。</p><p>3针的插座，3针风扇的引脚中间是+12V电源，中间左边黑色的线（一般都是黑线）是地，最右边的是测速。</p><p><img src="https://cdn.jsdelivr.ren/gh/879733672/images@cdn/img/202210102131124.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用3线4线cpu风扇机箱风扇接口定义&quot;&gt;&lt;a href=&quot;#常用3线4线cpu风扇机箱风扇接口定义&quot; class=&quot;headerlink&quot; title=&quot;常用3线4线cpu风扇机箱风扇接口定义&quot;&gt;&lt;/a&gt;常用3线4线cpu风扇机箱风扇接口定义&lt;/h3&gt;&lt;p&gt;4根
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="风扇" scheme="//website.cwzcfj.cn/tags/%E9%A3%8E%E6%89%87/"/>
    
  </entry>
  
  <entry>
    <title>React Native 第三方组件react-native-side-menu -侧滑栏使用</title>
    <link href="//website.cwzcfj.cn/2021/08/27/side%E4%BE%A7%E6%BB%91%E6%A0%8F%E7%BB%84%E4%BB%B6/"/>
    <id>//website.cwzcfj.cn/2021/08/27/side侧滑栏组件/</id>
    <published>2021-08-27T15:21:15.290Z</published>
    <updated>2023-04-23T13:17:36.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Native-第三方组件react-native-side-menu-侧滑栏使用"><a href="#React-Native-第三方组件react-native-side-menu-侧滑栏使用" class="headerlink" title="React Native 第三方组件react-native-side-menu -侧滑栏使用"></a>React Native 第三方组件react-native-side-menu -侧滑栏使用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>  添加应用侧滑功能， 使用第三方组件。比如：react-native-side-menu。</p><p>  地址：<a href="https://github.com/react-native-community/react-native-side-menu" target="_blank">https://github.com/react-native-community/react-native-side-menu</a> </p><p>(1). 安装<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> react-<span class="keyword">native</span>-side-menu <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>(2). 导入<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SideMenu <span class="keyword">from</span> <span class="string">'react-native-side-menu'</span>;</span><br></pre></td></tr></table></figure></p><p>(3). 出现的错误<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: <span class="built_in">set</span>State(...): Cannot update during an existing <span class="keyword">state</span> transition (such as within `render` or another component's constructor). Render methods should be a pure function of props and <span class="keyword">state</span>; constructor side-effects are an anti-pattern, but can be moved <span class="keyword">to</span> `componentWillMount`.</span><br></pre></td></tr></table></figure></p><p>大体意思是说render 在这种需要props和state进行渲染的方法中，不能在对props和state进行更新。 React 会在state和props改变的时候调用render进行DOM diff然后渲染，如果渲染在对props和state进行更新，就进入死循环。</p><p>解决办法：在调用方法时创建一个匿名函数，再调用。</p><p>(4).代码示例</p><pre><code>homeUI.js</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    AppRegistry,</span><br><span class="line">    StyleSheet,</span><br><span class="line">    Text,</span><br><span class="line">    View,</span><br><span class="line">    Image,</span><br><span class="line">    WebView,</span><br><span class="line">    ListView,</span><br><span class="line">    ScrollView,</span><br><span class="line">    navigator,</span><br><span class="line">    TouchableOpacity,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"><span class="keyword">import</span> SideMenu <span class="keyword">from</span> <span class="string">'react-native-side-menu'</span></span><br><span class="line"><span class="keyword">import</span> Menu <span class="keyword">from</span> <span class="string">'./menu'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* SideMenu 使用示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@export <span class="variable">HomeUI</span></span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@class <span class="variable">HomeUI</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@extends <span class="type">&#123;Component&#125;</span></span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeUI</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">       <span class="keyword">super</span>(props);</span><br><span class="line">       <span class="keyword">this</span>.state = &#123;</span><br><span class="line">           isOpen: <span class="literal">false</span>,</span><br><span class="line">           selectedItem: <span class="string">'About'</span>,</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   onMenuItemSelected = <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">           isOpen: <span class="literal">false</span>,</span><br><span class="line">           selectedItem: item,</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   updateMenu(isOpen) &#123;</span><br><span class="line">       <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">           isOpen: isOpen</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   toggle() &#123;</span><br><span class="line">       <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">           isOpen: !<span class="keyword">this</span>.state.isOpen</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   render() &#123;</span><br><span class="line">       <span class="keyword">const</span> menu = <span class="xml"><span class="tag">&lt;<span class="name">Menu</span> <span class="attr">onItemSelected</span>=<span class="string">&#123;this.onMenuItemSelected&#125;</span> <span class="attr">navigator</span>=<span class="string">&#123;navigator&#125;</span> /&gt;</span></span>;</span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">           &lt;SideMenu</span><br><span class="line">               menu=&#123;menu&#125;</span><br><span class="line">               isOpen=&#123;<span class="keyword">this</span>.state.isOpen&#125;</span><br><span class="line">               onChange=&#123;(isOpen) =&gt; <span class="keyword">this</span>.updateMenu(isOpen)&#125;&gt;</span><br><span class="line">               &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                   &lt;Text style=&#123;&#123; <span class="attr">fontSize</span>: <span class="number">20</span>, <span class="attr">textAlign</span>: <span class="string">'center'</span>, <span class="attr">margin</span>: <span class="number">10</span> &#125;&#125;&gt;hello world react native&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">                   &lt;Text&gt;</span></span><br><span class="line"><span class="regexp">                       选中菜单是： &#123;this.state.selectedItem&#125;</span></span><br><span class="line"><span class="regexp">                   &lt;/</span>Text&gt;</span><br><span class="line">               &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">               &lt;TouchableOpacity style=&#123;styles.button&#125; onPress=&#123;() =&gt; this.toggle()&#125;&gt;</span></span><br><span class="line"><span class="regexp">                   &lt;Image style=&#123;&#123; width: 32, height: 32 &#125;&#125; source=&#123;require('./im</span>ages/image_menu.png<span class="string">')&#125; /&gt;</span></span><br><span class="line"><span class="string">               &lt;/TouchableOpacity&gt;</span></span><br><span class="line"><span class="string">           &lt;/SideMenu&gt;</span></span><br><span class="line"><span class="string">       )</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const styles = StyleSheet.create(&#123;</span></span><br><span class="line"><span class="string">   flex: &#123;</span></span><br><span class="line"><span class="string">       flex: 1,</span></span><br><span class="line"><span class="string">   &#125;,</span></span><br><span class="line"><span class="string">   ListView: &#123;</span></span><br><span class="line"><span class="string">       paddingTop: 20,</span></span><br><span class="line">       backgroundColor: '#F5FCFF',</span><br><span class="line">   &#125;,</span><br><span class="line">   container: &#123;</span><br><span class="line">       flex: <span class="number">1</span>,</span><br><span class="line">       backgroundColor: <span class="string">'#F5FCFF'</span>,</span><br><span class="line">       justifyContent: <span class="string">'center'</span>,</span><br><span class="line">       alignItems: <span class="string">'center'</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   button: &#123;</span><br><span class="line">       position: <span class="string">'absolute'</span>,</span><br><span class="line">       top: <span class="number">20</span>,</span><br><span class="line">       padding: <span class="number">10</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">menu.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">   AppRegistry,</span><br><span class="line">   StyleSheet,</span><br><span class="line">   Dimensions,</span><br><span class="line">   ScrollView,</span><br><span class="line">   Text,</span><br><span class="line">   Image,</span><br><span class="line">   View,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">window</span> = Dimensions.get(<span class="string">'window'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜单组件</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@class <span class="variable">Menu</span></span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@extends <span class="type">&#123;Component&#125;</span></span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">   <span class="keyword">static</span> PropTypes = &#123;</span><br><span class="line">       onItemSelected: React.PropTypes.func.isRequired,</span><br><span class="line">   &#125;;</span><br><span class="line">   render() &#123;</span><br><span class="line">       <span class="keyword">return</span>(</span><br><span class="line">           &lt;ScrollView scrollsToTop=&#123;<span class="literal">false</span>&#125; style=&#123;styles.menu&#125;&gt;</span><br><span class="line">               &lt;View style=&#123;styles.avatarConent&#125;&gt;</span><br><span class="line">                   &lt;Image style=&#123;styles.avatar&#125;</span><br><span class="line">                       source=&#123;<span class="built_in">require</span>(<span class="string">'./images/avatar.jpg'</span>)&#125; /&gt;</span><br><span class="line">                       &lt;Text style=&#123;styles.name&#125;&gt; 小程QQ昵称&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">               &lt;/</span>View&gt;</span><br><span class="line">               &lt;Text onPress=&#123;() =&gt; <span class="keyword">this</span>.props.onItemSelected(<span class="string">'作者'</span>)&#125; style=&#123;styles.item&#125;&gt;</span><br><span class="line">                   作者</span><br><span class="line">               &lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">               &lt;Text onPress=&#123;() =&gt; this.props.onItemSelected('联系美丽蓝天')&#125; style=&#123;styles.item&#125;&gt;</span></span><br><span class="line"><span class="regexp">                   联系美丽蓝天</span></span><br><span class="line"><span class="regexp">               &lt;/</span>Text&gt;</span><br><span class="line">           &lt;<span class="regexp">/ScrollView&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">       )</span></span><br><span class="line"><span class="regexp">   &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">const styles =  StyleSheet.create(&#123;</span></span><br><span class="line"><span class="regexp">   menu: &#123;</span></span><br><span class="line"><span class="regexp">       flex:1,</span></span><br><span class="line"><span class="regexp">       width: window.width,</span></span><br><span class="line"><span class="regexp">       height: window.height,</span></span><br><span class="line"><span class="regexp">       backgroundColor: 'gray',</span></span><br><span class="line"><span class="regexp">       padding: 20,</span></span><br><span class="line"><span class="regexp">   &#125;,</span></span><br><span class="line"><span class="regexp">   avatarConent: &#123;</span></span><br><span class="line"><span class="regexp">       marginBottom: 20,</span></span><br><span class="line"><span class="regexp">       marginTop:20,        </span></span><br><span class="line"><span class="regexp">   &#125;,</span></span><br><span class="line"><span class="regexp">   avatar: &#123;</span></span><br><span class="line"><span class="regexp">       width:48,</span></span><br><span class="line"><span class="regexp">       height:48,</span></span><br><span class="line"><span class="regexp">       borderRadius: 24,</span></span><br><span class="line"><span class="regexp">       flex:1,</span></span><br><span class="line"><span class="regexp">   &#125;,</span></span><br><span class="line"><span class="regexp">   name:&#123;</span></span><br><span class="line"><span class="regexp">       position: 'absolute',</span></span><br><span class="line"><span class="regexp">       left: 70,</span></span><br><span class="line"><span class="regexp">       top:20,</span></span><br><span class="line"><span class="regexp">   &#125;,</span></span><br><span class="line"><span class="regexp">   item: &#123;</span></span><br><span class="line"><span class="regexp">       fontSize:16,</span></span><br><span class="line"><span class="regexp">       fontWeight:'300',</span></span><br><span class="line"><span class="regexp">       paddingTop:10,</span></span><br><span class="line"><span class="regexp">   &#125;,</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Menu;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Native-第三方组件react-native-side-menu-侧滑栏使用&quot;&gt;&lt;a href=&quot;#React-Native-第三方组件react-native-side-menu-侧滑栏使用&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React Native" scheme="//website.cwzcfj.cn/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>前端如何进行npm发布？</title>
    <link href="//website.cwzcfj.cn/2019/05/14/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8Cnpm%E5%8F%91%E5%B8%83%EF%BC%9F/"/>
    <id>//website.cwzcfj.cn/2019/05/14/前端如何进行npm发布？/</id>
    <published>2019-05-14T14:50:16.000Z</published>
    <updated>2023-03-15T04:40:30.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端npm包发布"><a href="#前端npm包发布" class="headerlink" title="前端npm包发布"></a>前端npm包发布</h3><ol><li><p>在npm官网上注册一个账号，<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a>. 之后别忘了验证邮箱。</p></li><li><p>新建一个目录，比如all-web, 使用命令进入到这个目录，执行npm init, 初始化，按照提示填写对应的内容信息。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package name：填写你这个包的名字，默认是你这个文件夹的名字（nodeadd）</span><br><span class="line"></span><br><span class="line">version：填写你这个包的版本，默认1.0.0</span><br><span class="line"></span><br><span class="line">description：描述一下你这个包是干嘛用的</span><br><span class="line"></span><br><span class="line">entry point：入口文件，默认是index.js，你也可以自己填写你自己的文件名</span><br><span class="line"></span><br><span class="line"><span class="keyword">test </span>command：测试命令，默认为空，直接回车就行</span><br><span class="line"></span><br><span class="line">git repository：git仓库地址，如果你的包是先放到github上或者其他git仓库里，这时候你的文件夹里面会存在一个隐藏的.git目录，npm会读到这个目录作为这一项的默认值。如果没有的话，直接回车继续。</span><br><span class="line"></span><br><span class="line">keywords：关键词，方便别人搜到这个包</span><br><span class="line"></span><br><span class="line">author：你的账号</span><br><span class="line"></span><br><span class="line">license： 你的这个包遵循什么开源协议，直接回车就行</span><br></pre></td></tr></table></figure></li><li><p>编写自己的项目包，可以是脚手架等</p></li><li><p>发布npm包</p></li></ol><ul><li><p>npm源切换<br>注意一般因为网络速度，原因一般使用taobao镜像，发布时需要切换会官网镜像</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> <span class="keyword">http</span>://<span class="keyword">registry</span>.npmjs.org/</span><br></pre></td></tr></table></figure></li><li><p>npm登录</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> adduser     <span class="comment"># 添加账号</span></span><br><span class="line"><span class="built_in">npm</span> login       <span class="comment"># 登录账号</span></span><br></pre></td></tr></table></figure></li></ul><p>接下来会以问答形式向你了解你的用户名、密码以及公开的邮箱，之后输入：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> publish</span><br></pre></td></tr></table></figure></p><p>看到进度条，之后发布成功。</p><ol start="5"><li><p>查询发布的包<br>npm官网全局搜索即可，淘宝npm等镜像同步时间到搜索.</p></li><li><p>如何撤销发布的包(撤包有时间限制，24小时)<br>终端执行 npm unpublish<br>例如：<br>(1). npm unpublish <a href="mailto:all-web@1.0.0" target="_blank" rel="noopener">all-web@1.0.0</a> 删除某个版本<br>(2). npm unpublish all-web –force 删除整个npm市场的包</p></li></ol><p>npm unpublish的推荐替代命令：npm deprecate <pkg>[@<version>] <message><br>使用这个命令，并不会在社区里撤销你已有的包，但会在任何人尝试安装这个包的时候得到警告<br>例如：npm deprecate z-tool ‘这个包我已经不再维护了哟～’</message></version></pkg></p><p>【注意】如果报权限方面的错，加上–force</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端npm包发布&quot;&gt;&lt;a href=&quot;#前端npm包发布&quot; class=&quot;headerlink&quot; title=&quot;前端npm包发布&quot;&gt;&lt;/a&gt;前端npm包发布&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在npm官网上注册一个账号，&lt;a href=&quot;https://www.np
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="npm" scheme="//website.cwzcfj.cn/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>前端脚手架搭建</title>
    <link href="//website.cwzcfj.cn/2019/05/07/%E5%89%8D%E7%AB%AF%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <id>//website.cwzcfj.cn/2019/05/07/前端脚手架搭建/</id>
    <published>2019-05-07T13:25:14.000Z</published>
    <updated>2023-04-23T13:08:47.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端脚手架搭建"><a href="#前端脚手架搭建" class="headerlink" title="前端脚手架搭建"></a>前端脚手架搭建</h3><p>在实际开发过程中，从零开始建立项目的结构是一件让人头疼的事情，所以各种各样的脚手架工具运用而生。使用较多的yoeman,express-generato,create-react-appr和vue-cli便是当中之一。它们功能丰富，但最核心的功能都是能够快速搭建一个完整的项目结构，开发者只需要在生成的项目结构基础上进行开发即可，非常简单高效。</p><ol><li>为什么需要需要脚手架？</li></ol><ul><li>减少重复性的工作，不再需要复制其他项目再删除无关代码，或者从零创建一个项目和文件</li><li>根据交互动态生成项目结构和配置文件等。</li></ul><p>我们可以借鉴 vue-cli 的基本思路。vue-cli 是将项目模板放在 git 上，运行的时候再根据用户交互下载不同的模板，经过模板引擎渲染出来，生成项目。这样将模板和脚手架分离，就可以各自维护，即使模板有变动，只需要上传最新的模板即可，而不需要用户去更新脚手架就可以生成最新的项目。那么就可以按照这个思路来进行开发了。</p><ol start="2"><li>第三方库</li></ol><ul><li>commander.js，可以自动的解析命令和参数，用于处理用户输入的命令。</li><li>download-git-repo，下载并提取 git 仓库，用于下载项目模板。</li><li>Inquirer.js，通用的命令行用户界面集合，用于和用户进行交互。</li><li>handlebars.js，模板引擎，将用户提交的信息动态填充到文件中。</li><li>ora，下载过程久的话，可以用于显示下载中的动画效果。</li><li>chalk，可以给终端的字体加上颜色。</li><li>log-symbols，可以在终端上显示出 √ 或 × 等的图标。</li></ul><ol start="3"><li>初始化项目<br>首先创建一个空项目，暂时命名为 all-cli，然后新建一个 cli.js 文件，再执行 npm init 生成一个 package.json 文件。最后安装上面需要用到的依赖。</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> all-<span class="keyword">cli</span> &amp;&amp; <span class="keyword">cd</span> all-<span class="keyword">cli</span></span><br><span class="line"></span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line">npm install commander download-git-repo inquirer handlebars ora chalk <span class="keyword">log</span>-symbols -S</span><br></pre></td></tr></table></figure><ol start="4"><li>处理命令行<br>node.js 内置了对命令行操作的支持，在 package.json 中的 bin 字段可以定义命令名和关联的执行文件。<br>所以现在 package.json 中加上 bin 的内容：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"all-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"all-cli"</span>: <span class="string">"bin/cli.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"chalk"</span>: <span class="string">"^2.4.2"</span>,</span><br><span class="line">    <span class="attr">"commander"</span>: <span class="string">"^2.20.0"</span>,</span><br><span class="line">    <span class="attr">"download-git-repo"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">    <span class="attr">"handlebars"</span>: <span class="string">"^4.1.2"</span>,</span><br><span class="line">    <span class="attr">"inquirer"</span>: <span class="string">"^6.3.1"</span>,</span><br><span class="line">    <span class="attr">"log-symbols"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="attr">"ora"</span>: <span class="string">"^3.4.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后在cli.js中定义init命令：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#<span class="comment">!/usr/bin/env node</span></span><br><span class="line">const <span class="function"><span class="keyword">program</span></span> = require(<span class="string">'commander'</span>);</span><br><span class="line"><span class="function"><span class="keyword">program</span>.<span class="title">version</span><span class="params">('1.0.0', '-v, --version')</span></span></span><br><span class="line">    .command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">    .<span class="keyword">action</span>((<span class="keyword">name</span>) =&gt; &#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="keyword">name</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="function"><span class="keyword">program</span>.<span class="title">parse</span><span class="params">(process.argv)</span></span>;</span><br></pre></td></tr></table></figure></p><p>调用 version(‘1.0.0’, ‘-v, –version’) 会将 -v 和 –version 添加到命令中，可以通过这些选项打印出版本号。<br>调用 command(‘init <name>‘) 定义 init 命令，name 则是必传的参数，为项目名。<br>action() 则是执行 init 命令会发生的行为，要生成项目的过程就是在这里面执行的，这里暂时只打印出 name。<br>这里已经可以执行 init 命令了。执行：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">bin</span>/cli.js init HelloWorld</span><br></pre></td></tr></table></figure></name></p><p>可以看到命令行工具也打印出了 HelloWorld，那么很清楚， action((name) =&gt; {}) 这里的参数 name，就是我们执行 init 命令时输入的项目名称。<br>命令已经完成，接下来就要下载模板生成项目结构了。</p><ol start="5"><li><p>下载模板<br>download-git-repo 支持从 Github、Gitlab 和 Bitbucket 下载仓库，各自的具体用法可以参考官方文档。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env node</span></span><br><span class="line">const program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line">const download = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>);</span><br><span class="line">program.version(<span class="string">'1.0.0'</span>, <span class="string">'-v, --version'</span>)</span><br><span class="line">       .command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">       .action(<span class="function"><span class="params">(name)</span> =&gt;</span> &#123;</span><br><span class="line">           download(<span class="string">'gitlab:xx#master'</span>, name, &#123;clone: <span class="literal">true</span>&#125;, <span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err ? <span class="string">'Error'</span> : <span class="string">'Success'</span>)</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;);</span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure></li><li><p>命令行交互<br>命令行交互功能可以在用户执行 init 命令后，向用户提出问题，接收用户的输入并作出相应的处理。这里使用 inquirer.js 来实现。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line">inquirer.prompt([</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">'input'</span>,</span><br><span class="line">        name: <span class="string">'author'</span>,</span><br><span class="line">        message: <span class="string">'author'</span></span><br><span class="line">    &#125;</span><br><span class="line">]).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(answers.author);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>通过这里例子可以看出，问题就放在 prompt() 中，问题的类型为 input 就是输入类型，name 就是作为答案对象中的 key，message 就是问题了，用户输入的答案就在 answers 中，使用起来就是这么简单。更多的参数设置可以参考官方文档。<br>通过命令行交互，获得用户的输入，从而可以把答案渲染到模板中。</p><ol start="7"><li>渲染模板<br>这里用 handlebars 的语法对仓库的模板中的 package.json 文件做一些修改<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"&#123;&#123;name&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"&#123;&#123;author&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"&#123;&#123;version&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"&#123;&#123;description&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>并在下载模板完成之后将用户输入的答案渲染到 package.json 中<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">program.version(<span class="string">'1.0.0'</span>, <span class="string">'-v, --version'</span>)</span><br><span class="line">.command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">.action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    inquirer.prompt([</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'description'</span>,</span><br><span class="line">        message: <span class="string">'description'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'author'</span>,</span><br><span class="line">        message: <span class="string">'author'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">        download(<span class="string">'gitlab:xxxx#master'</span>,name,&#123;clone: <span class="literal">true</span>&#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> meta = &#123;</span><br><span class="line">                name,</span><br><span class="line">                description: answers.description,</span><br><span class="line">                author: answers.author</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class="line">            <span class="keyword">const</span> content = fs.readFileSync(fileName).toString();</span><br><span class="line">            <span class="keyword">const</span> result = handlebars.compile(content)(meta);</span><br><span class="line">            fs.writeFileSync(fileName, result);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这里使用了 node.js 的文件模块 fs，将 handlebars 渲染完后的模板重新写入到文件中。</p><ol start="8"><li>视觉美化<br>在用户输入答案之后，开始下载模板，这时候使用 ora 来提示用户正在下载中。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="comment">// 开始下载</span></span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'The template is being downloaded...'</span>);</span><br><span class="line">spinner.start();</span><br><span class="line"><span class="comment">// 下载失败调用</span></span><br><span class="line">spinner.fail();</span><br><span class="line"><span class="comment">// 下载成功调用</span></span><br><span class="line">spinner.succeed();</span><br></pre></td></tr></table></figure></li></ol><p>然后通过 chalk 来为打印信息加上样式，比如成功信息为绿色，失败信息为红色，这样子会让用户更加容易分辨，同时也让终端的显示更加的好看。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = require(<span class="string">'chalk'</span>);</span><br><span class="line">console.<span class="built_in">log</span>(chalk.<span class="built_in">green</span>(<span class="string">'Success'</span>));</span><br><span class="line">console.<span class="built_in">log</span>(chalk.<span class="built_in">red</span>(<span class="string">'Fail'</span>));</span><br></pre></td></tr></table></figure></p><p>除了给打印信息加上颜色之外，还可以使用 log-symbols 在信息前面加上 √ 或 × 等的图标。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> symbols = <span class="built_in">require</span>(<span class="string">'log-symbols'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(symbols.success, chalk.green(<span class="string">'Success'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(symbols.error, chalk.red(<span class="string">'Fail'</span>));</span><br></pre></td></tr></table></figure></p><ol start="9"><li>完整示例<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#! <span class="regexp">/usr/</span>bin/env node</span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>);</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"><span class="keyword">const</span> handlebars = <span class="built_in">require</span>(<span class="string">'handlebars'</span>);</span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">const</span> symbols = <span class="built_in">require</span>(<span class="string">'log-symbols'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line">program.version(<span class="string">'1.0.0'</span>, <span class="string">'-v'</span>, <span class="string">'--version'</span>)</span><br><span class="line">    .command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">    .action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!fs.existsSync(name)) &#123;</span><br><span class="line">            inquirer.prompt([</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">type</span>: <span class="string">'list'</span>,</span><br><span class="line">                    choices: [<span class="string">'umi'</span>, <span class="string">'react-webpack'</span>, <span class="string">'react-antd'</span>],</span><br><span class="line">                    name: <span class="string">'platform'</span>,</span><br><span class="line">                    message: <span class="string">'Please select the project you want to install.'</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    name: <span class="string">'version'</span>,</span><br><span class="line">                    message: <span class="string">'version:(1.0.0)'</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    name: <span class="string">'description'</span>,</span><br><span class="line">                    message: <span class="string">'description:'</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    name: <span class="string">'author'</span>,</span><br><span class="line">                    message: <span class="string">'author:'</span></span><br><span class="line">                &#125;]).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(answers.author);</span><br><span class="line">                    <span class="keyword">const</span> spinner = ora(<span class="string">'The template is being downloaded...'</span>);</span><br><span class="line">                    <span class="keyword">const</span> platform = answers.platform;</span><br><span class="line">                    spinner.start();</span><br><span class="line"></span><br><span class="line">                    download(<span class="string">'https://github.com/879733672/all-web-cli.git#&#123;platform&#125;'</span>, name, &#123; clone: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            spinner.fail();</span><br><span class="line">                            <span class="built_in">console</span>.log(symbols.error, chalk.red(err));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            spinner.succeed();</span><br><span class="line">                            <span class="keyword">const</span> fileName = <span class="string">`&#123;name&#125;/package.json`</span>;</span><br><span class="line">                            <span class="keyword">const</span> meta = &#123;</span><br><span class="line">                                name,</span><br><span class="line">                                description: answers.description,</span><br><span class="line">                                author: answers.author,</span><br><span class="line">                                version: answers.version || <span class="string">'1.0.0'</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (fs.existsSync(fileName)) &#123;</span><br><span class="line">                                <span class="keyword">const</span> content = fs.readdirSync(fileName).toString();</span><br><span class="line">                                <span class="keyword">const</span> result = handlebars.compile(content)(meta);</span><br><span class="line">                                fs.writeFileSync(fileName, result);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="built_in">console</span>.log(symbols.success, chalk.green(<span class="string">'Done'</span>))</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//错误提示项目已存在，避免覆盖原有项目</span></span><br><span class="line">            <span class="built_in">console</span>.log(symbols.error, chalk.red(<span class="string">"Already Existed."</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure></li></ol><p>完成之后，就可以把脚手架发布到 npm 上面，通过 -g 进行全局安装，就可以在自己本机上执行 ice init [name] 来初始化项目，这样便完成了一个简单的脚手架工具了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前端脚手架搭建&quot;&gt;&lt;a href=&quot;#前端脚手架搭建&quot; class=&quot;headerlink&quot; title=&quot;前端脚手架搭建&quot;&gt;&lt;/a&gt;前端脚手架搭建&lt;/h3&gt;&lt;p&gt;在实际开发过程中，从零开始建立项目的结构是一件让人头疼的事情，所以各种各样的脚手架工具运用而生。使用
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="脚手架" scheme="//website.cwzcfj.cn/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>IntersectionObserver介绍</title>
    <link href="//website.cwzcfj.cn/2019/04/20/IntersectionObserver%E4%BB%8B%E7%BB%8D/"/>
    <id>//website.cwzcfj.cn/2019/04/20/IntersectionObserver介绍/</id>
    <published>2019-04-20T13:33:12.000Z</published>
    <updated>2023-04-26T14:02:52.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IntersectionObserver简介"><a href="#IntersectionObserver简介" class="headerlink" title="IntersectionObserver简介"></a>IntersectionObserver简介</h2><p>在移动端，有个很重要的概念，叫做懒加载，适用于一些图片资源特别多，ajax数据特别多的页面中，经常会有动态加载数据的场景中，这个时候，我们通常是使用监听scroll或者使用setInterval来判断，元素是否进入视图，其中scroll由于其特别大的计算量，会有性能问题，而setInterval由于其有间歇期，也会出现体验问题。<br>浏览器的开发商，估计也发现了这个问题，所以在2016年初，chrome51率先提供了一个新的API，就是IntersectionObserver，它可以用来监听元素是否进入了设备的可视区域之内，而不需要频繁的计算来做这个判断。</p><p>毕竟是一个新兴的API，所以浏览器的支持性并不好，这里可以看看当前浏览器对于IntersectionObserver的支持性：<a href="http://caniuse.com/#search=IntersectionObserver" target="_blank" rel="noopener">IntersectionObserver</a></p><ol><li>Api简介<br>该API的调用非常简单：<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> <span class="type">IntersectionObserver</span>(callback,options);</span><br></pre></td></tr></table></figure></li></ol><p>IntersectionObserver支持两个参数：</p><ul><li>callback是当被监听元素的可见性变化时，触发的回调函数</li><li>options是一个配置参数，可选，有默认的属性值</li></ul><ol start="2"><li>应用</li></ol><ul><li>预加载（滚动加载，无限加载）</li><li>懒加载（图片后加载）</li><li>TAB滚动跟随</li></ul><ol start="3"><li>事件DOMContentLoaded和load的区别<br>区别是: 触发的时机不一样，先触发DOMContentLoaded事件，后触发load事件。</li></ol><p>DOM文档加载的步骤为</p><ol><li>解析HTML结构。</li><li>DOM树构建完成。//DOMContentLoaded</li><li>加载外部脚本和样式表文件。</li><li>解析并执行脚本代码。</li><li>加载图片等外部文件。</li><li>页面加载完毕。//load<br>在第2步，会触发DOMContentLoaded事件。在第6步，触发load事件。</li></ol><p>js原生写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不兼容老的浏览器，兼容写法见[jQuery中ready与load事件](http://www.imooc.com/code/3253)，或用jQuery</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// ...代码...</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...代码...</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>jQuery写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOMContentLoaded</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...代码...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//load</span></span><br><span class="line">$(<span class="built_in">document</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...代码...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IntersectionObserver简介&quot;&gt;&lt;a href=&quot;#IntersectionObserver简介&quot; class=&quot;headerlink&quot; title=&quot;IntersectionObserver简介&quot;&gt;&lt;/a&gt;IntersectionObserver
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="//website.cwzcfj.cn/tags/js/"/>
    
      <category term="IntersectionObserver" scheme="//website.cwzcfj.cn/tags/IntersectionObserver/"/>
    
  </entry>
  
  <entry>
    <title>debounce弹跳函数介绍</title>
    <link href="//website.cwzcfj.cn/2019/04/20/debounce%E5%BC%B9%E8%B7%B3%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
    <id>//website.cwzcfj.cn/2019/04/20/debounce弹跳函数介绍/</id>
    <published>2019-04-20T13:19:48.000Z</published>
    <updated>2023-04-26T14:03:07.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="debounce去弹跳函数-原lodash-debounce"><a href="#debounce去弹跳函数-原lodash-debounce" class="headerlink" title="debounce去弹跳函数 原lodash.debounce"></a>debounce去弹跳函数 原lodash.debounce</h2><p>debounce 强制函数再某段时间内只执行一次<br>throttle 强制函数以固定的频率触发的 DOM 事情的时候，他们都能极大提高用户体验.</p><p>dobounce 返回了一个闭包，这个闭包依然会被连续频繁地调用，但是在闭包内部，却限制了原始函数fn的执行，强制fn只在连续操作停止后只执行一次<br>大致核心代码如下：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function debounce(<span class="function"><span class="keyword">fun</span>, delay) &#123;</span></span><br><span class="line">  <span class="keyword">var</span> timer;</span><br><span class="line">  <span class="keyword">return</span> function() &#123;</span><br><span class="line">    <span class="keyword">var</span> content = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args =  arguments;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(function() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">fun</span>.<span class="title">apply</span><span class="params">(content, args)</span></span>;</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;debounce去弹跳函数-原lodash-debounce&quot;&gt;&lt;a href=&quot;#debounce去弹跳函数-原lodash-debounce&quot; class=&quot;headerlink&quot; title=&quot;debounce去弹跳函数 原lodash.debounce&quot;&gt;
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="//website.cwzcfj.cn/tags/js/"/>
    
      <category term="debounce" scheme="//website.cwzcfj.cn/tags/debounce/"/>
    
  </entry>
  
  <entry>
    <title>markdown简单使用</title>
    <link href="//website.cwzcfj.cn/2019/04/20/markdown%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>//website.cwzcfj.cn/2019/04/20/markdown简单使用/</id>
    <published>2019-04-20T12:07:14.000Z</published>
    <updated>2023-04-26T13:13:19.331Z</updated>
    
    <content type="html"><![CDATA[<h3 id="markdown简介"><a href="#markdown简介" class="headerlink" title="markdown简介"></a>markdown简介</h3><p>Markdown 的目标是实现「易读易写」。<br>Markdown 的特点就是，让写作变得更简单，我们不用再考虑如何排版，我们只要专心于写作就好了，这也是对我们的宗旨！！<br>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。</p><p>markdown命令：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>标题</span><br><span class="line"><span class="code">    # 一级标题</span></span><br><span class="line"><span class="code">    ## 二级标题</span></span><br><span class="line"><span class="code">    ### 三级标题</span></span><br><span class="line"><span class="code">    #### 四级标题</span></span><br><span class="line"><span class="code">    ##### 五级标题</span></span><br><span class="line"><span class="code">    ###### 六级标题</span></span><br><span class="line"></span><br><span class="line">![<span class="string">百度图片</span>](<span class="link">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3534940874,3350191940&amp;fm=27&amp;gp=0.jpg， '图片'</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">百度</span>](<span class="link">http://baidu.com</span>)</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://baidu.com"</span> <span class="attr">taget</span>=<span class="string">"_blank"</span>&gt;</span></span>百度链接地址<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">*在哪里*</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**加粗**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">***斜体加粗**</span>*</span><br><span class="line"></span><br><span class="line">~~删除线~~</span><br><span class="line"></span><br><span class="line">&gt;这是引用的内容</span><br><span class="line"></span><br><span class="line">&gt;&gt;这是引用的内容2</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line"></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">***</span>*</span><br><span class="line"></span><br><span class="line">表头|表头</span><br><span class="line">--|--</span><br><span class="line">内容|内容</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>在什么地方</span><br><span class="line"><span class="bullet">* </span>在干啥</span><br><span class="line"><span class="bullet">+ </span>明天做什么</span><br><span class="line"><span class="bullet">+ </span>副书记看风景</span><br><span class="line"><span class="bullet">- </span>开发驾考速度</span><br><span class="line"><span class="bullet">- </span>空间都是咖啡</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>电视剧法开始</span><br><span class="line"><span class="bullet">2. </span>的框架开发商的</span><br><span class="line"><span class="bullet">3. </span>插卡看的积分</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>1级无序列表</span><br><span class="line"><span class="bullet">    * </span>在什么地方</span><br><span class="line"><span class="bullet">    * </span>世界都是看得见</span><br><span class="line"><span class="bullet">    * </span>大家福建省客服</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>1级无序列表</span><br><span class="line"><span class="bullet">    1. </span>的框架侃大山</span><br><span class="line"><span class="bullet">    2. </span>附近富士康福建省</span><br><span class="line"><span class="bullet">    3. </span>发呆思考当升科技</span><br><span class="line"></span><br><span class="line">表头|表头|表头</span><br><span class="line">--|:--:|--:</span><br><span class="line">内容|内容|内容</span><br></pre></td></tr></table></figure></p><p>预览：</p><ol><li>标题<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li></ol><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3534940874,3350191940&amp;fm=27&amp;gp=0.jpg，" alt="百度图片" title="图片"></p><p><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><p><a href="http://baidu.com" taget="_blank" target="_blank" rel="noopener">百度链接地址</a></p><p><em>在哪里</em></p><p><strong>加粗</strong></p><p><strong><em>斜体加粗</em></strong></p><p><del>删除线</del></p><blockquote><p>这是引用的内容</p></blockquote><blockquote><blockquote><p>这是引用的内容2</p></blockquote></blockquote><hr><hr><hr><hr><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>内容</td><td>内容</td></tr></tbody></table><ul><li>在什么地方</li><li>在干啥</li></ul><ul><li>明天做什么</li><li>副书记看风景</li></ul><ul><li>开发驾考速度</li><li>空间都是咖啡</li></ul><ol><li>电视剧法开始</li><li>的框架开发商的</li><li>插卡看的积分</li></ol><ul><li>1级无序列表<ul><li>在什么地方</li><li>世界都是看得见</li><li>大家福建省客服</li></ul></li></ul><ul><li>1级无序列表<ol><li>的框架侃大山</li><li>附近富士康福建省</li><li>发呆思考当升科技</li></ol></li></ul><table><thead><tr><th>表头</th><th style="text-align:center">表头</th><th style="text-align:right">表头</th></tr></thead><tbody><tr><td>内容</td><td style="text-align:center">内容</td><td style="text-align:right">内容</td></tr></tbody></table><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> db</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;markdown简介&quot;&gt;&lt;a href=&quot;#markdown简介&quot; class=&quot;headerlink&quot; title=&quot;markdown简介&quot;&gt;&lt;/a&gt;markdown简介&lt;/h3&gt;&lt;p&gt;Markdown 的目标是实现「易读易写」。&lt;br&gt;Markdown 的特点
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="markdown" scheme="//website.cwzcfj.cn/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>docker学习</title>
    <link href="//website.cwzcfj.cn/2019/04/19/docker%E5%AD%A6%E4%B9%A0/"/>
    <id>//website.cwzcfj.cn/2019/04/19/docker学习/</id>
    <published>2019-04-19T14:24:14.000Z</published>
    <updated>2023-03-15T05:17:14.115Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-简介"><a href="#docker-简介" class="headerlink" title="docker 简介"></a>docker 简介</h2><p>2013年发布至今，docker一直广受瞩目，被认为可能会改变软件行业。</p><p>但是，许多人并不清楚 Docker 到底是什么，要解决什么问题，好处又在哪里？本文就来详细解释，帮助大家理解它，还带有简单易懂的实例，教你如何将它用于日常开发。</p><p><img src="https://raw.githubusercontent.com/879733672/images/cdn/img/202209042054487.jpeg" alt="docker"></p><p>1、环境配置的难题<br>软件开发最大的麻烦事之一，就是环境配置。用户计算机的环境都不相同，你怎么知道自家的软件，能在那些机器跑起来？</p><p>用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。举例来说，安装一个 Python 应用，计算机必须有 Python 引擎，还必须有各种依赖，可能还要配置环境变量。</p><p>如果某些老旧的模块与当前环境不兼容，那就麻烦了。开发者常常会说：”它在我的机器可以跑了”（It works on my machine），言下之意就是，其他机器很可能跑不了。</p><p>环境配置如此麻烦，换一台机器，就要重来一次，旷日费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。</p><p>2、虚拟机<br>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p><p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点</p><ul><li>资源占用多<br>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</li><li>冗余步骤多<br>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</li><li>启动慢<br>启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行</li></ul><p>对比传统虚拟机总结：</p><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为 MB</td><td>一般为 GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于</td></tr><tr><td>系统支持量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><p>3、Linux 容器<br>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p><p>由于容器是进程级别的，相比虚拟机有很多优势。</p><ul><li>启动快</li></ul><p>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</p><ul><li>资源占用少</li></ul><p>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</p><ul><li>体积小</li></ul><p>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</p><p>总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p><p>4、Docker 是什么？<br>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。</p><p>总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><p>5、docker架构<br>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>Docker 容器通过 Docker 镜像来创建。</p><p>容器与镜像的关系类似于面向对象编程中的对象与类。</p><table><thead><tr><th>docker</th><th>面向对象</th></tr></thead><tbody><tr><td>容器</td><td>对象</td></tr><tr><td>镜像</td><td>类</td></tr></tbody></table><ul><li><p>镜像<br>Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统<br>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p></li><li><p>容器<br>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p></li><li><p>仓库<br>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。</p></li></ul><p>一个 Docker Registry 中可以包含多个 仓库（Repository）；每个仓库可以包含多个 标签（Tag）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p><p>以 Ubuntu 镜像 为例，ubuntu 是仓库的名字，其内包含有不同的版本标签，如，16.04, 18.04。我们可以通过 ubuntu:14.04，或者 ubuntu:18.04 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 ubuntu，那将视为 ubuntu:latest。</p><p>仓库名经常以 两段式路径 形式出现，比如 jwilder/nginx-proxy，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p><p>6、docker的用途和安装</p><ul><li>提供一次性的环境。比如，本地测试他人的软件、持续集成的时候提供单元测试和构建的环境。</li><li>提供弹性的云服务。因为 Docker 容器可以随开随关，很适合动态扩容和缩容。 </li></ul><p>docker安装<br>Docker 是一个开源的商业产品，有两个版本：社区版（Community Edition，缩写为 CE）和企业版（Enterprise Edition，缩写为 EE）。企业版包含了一些收费服务，个人开发者一般用不到。下面的介绍都针对社区版。</p><p>Docker CE 的安装请参考官方文档。</p><p>安装完成后，运行下面的命令，验证是否安装成功。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">version</span><span class="comment"># 或者$ docker info</span></span><br></pre></td></tr></table></figure></p><p>docker 是服务器–客户端架构。命令行运行docker命令的时候，需要本机有docker服务，如果这项服务没有启动，可以用下面的命令启动（官方文档）。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># service 命令的用法</span></span><br><span class="line">$ sudo<span class="built_in"> service </span>docker start</span><br><span class="line"><span class="comment"># systemctl 命令的用法</span></span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></p><p>7、image文件<br>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。<br>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 列出本机的所有 <span class="keyword">image</span> 文件。</span><br><span class="line">$ docker <span class="keyword">image</span> <span class="keyword">ls</span></span><br><span class="line"># 删除 <span class="keyword">image</span> 文件</span><br><span class="line">$ docker <span class="keyword">image</span> rm[imageName]</span><br></pre></td></tr></table></figure></p><p>image 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。</p><p>为了方便共享，image 文件制作完成后，可以上传到网上的仓库。Docker 的官方仓库Docker Hub是最重要、最常用的 image 仓库。此外，出售自己制作的 image 文件也是可以的。</p><p>8、实例：hello world<br>下面，我们通过最简单的 image 文件”hello world”，感受一下 Docker。</p><p>首先，运行下面的命令，将 image 文件从仓库抓取到本地。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">image</span> pull library/hello-world</span><br></pre></td></tr></table></figure></p><p>上面代码中，docker image pull是抓取 image 文件的命令。library/hello-world是 image 文件在仓库里面的位置，其中library是 image 文件所在的组，hello-world是 image 文件的名字。  </p><p>由于 Docker 官方提供的 image 文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">image</span> pull hello-world</span><br></pre></td></tr></table></figure></p><p>抓取成功以后，就可以在本机看到这个 image 文件了<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">image</span> <span class="keyword">ls</span></span><br></pre></td></tr></table></figure></p><p>现在，运行这个 image 文件。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></p><p>docker container run命令会从 image 文件，生成一个正在运行的容器实例。<br>注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。</p><p>如果运行成功，你会在屏幕上读到下面的输出。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="builtin-name">run</span> hello-worldHello <span class="keyword">from</span> Docker!This message shows that your installation appears <span class="keyword">to</span> be working correctly<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure></p><p>输出这段提示以后，hello world就会停止运行，容器自动终止</p><p>有些容器不会自动终止，因为提供的是服务。比如，安装运行 Ubuntu 的 image，就可以在命令行体验 Ubuntu 系统。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="built_in">run</span>-<span class="keyword">it</span> ubuntu bash</span><br></pre></td></tr></table></figure></p><p>对于那些不会自动终止的容器，必须使用docker container kill命令手动终止。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> kill<span class="comment">[containID]</span></span><br></pre></td></tr></table></figure></p><p>9、容器文件<br>image 文件生成的容器实例，本身也是一个文件，称为容器文件。也就是说，一旦容器生成，就会同时存在两个文件： image 文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本机正在运行的容器</span></span><br><span class="line">$ docker container <span class="keyword">ls</span></span><br><span class="line"><span class="comment"># 列出本机所有容器，包括终止运行的容器</span></span><br><span class="line">$ docker container <span class="keyword">ls</span><span class="params">--all</span></span><br></pre></td></tr></table></figure></p><p>上面命令的输出结果之中，包括容器的 ID。很多地方都需要提供这个 ID，比如上一节终止容器运行的docker container kill命令。</p><p>终止运行的容器文件，依然会占据硬盘空间，可以使用docker container rm命令删除。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> rm<span class="comment">[containerID]</span></span><br></pre></td></tr></table></figure></p><p>运行上面的命令之后，再使用docker container ls –all命令，就会发现被删除的容器文件已经消失了。</p><p>10、Dockerfile文件<br>学会使用 image 文件以后，接下来的问题就是，如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。</p><p>这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。</p><p>下面通过一个实例，演示如何编写 Dockerfile 文件。</p><p>实例：制作自己的 Docker 容器<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:8.4 COPY./app WORKDIR/app <span class="builtin-name">RUN</span> npm <span class="attribute">install--registry</span>=https://registry.npm.taobao.org EXPOSE 3000</span><br></pre></td></tr></table></figure></p><p>上面代码一共五行，含义如下。</p><p>FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。</p><p>COPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。</p><p>WORKDIR /app：指定接下来的工作路径为/app。</p><p>RUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</p><p>EXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。</p><p>有了 Dockerfile 文件以后，就可以使用docker image build命令创建 image 文件了。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">image</span> build-t koa-<span class="built_in">demo</span>.</span><br><span class="line"># 或者</span><br><span class="line">$ docker <span class="built_in">image</span> build-t koa-<span class="built_in">demo</span>:<span class="number">0.0</span><span class="number">.1</span>.</span><br></pre></td></tr></table></figure></p><p>上面代码中，-t参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是latest。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点。<br>如果运行成功，就可以看到新生成的 image 文件koa-demo了。<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">image</span> <span class="keyword">ls</span></span><br></pre></td></tr></table></figure></p><p>生成容器<br>docker container run命令会从 image 文件生成容器。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="built_in">run</span> -p <span class="number">8000</span>:<span class="number">3000</span> -<span class="keyword">it</span> koa-demo/bin/bash</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ docker container <span class="built_in">run</span> -p <span class="number">8000</span>:<span class="number">3000</span> -<span class="keyword">it</span> koa-demo:<span class="number">0.0</span><span class="number">.1</span>/bin/bash</span><br></pre></td></tr></table></figure></p><p>上面命令的各个参数含义如下：<br>-p参数：容器的 3000 端口映射到本机的 8000 端口。</p><p>-it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</p><p>koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</p><p>/bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</p><p>如果一切正常，运行上面的命令以后，就会返回一个命令行提示符。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@66d80f4aaf1e</span><span class="symbol">:/app</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>也可以使用docker container run命令的–rm参数，在容器终止运行后自动删除容器文件。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker container <span class="built_in">run</span> <span class="comment">--rm -p 8000:3000 -it koa-demo /bin/bash</span></span><br></pre></td></tr></table></figure></p><p>发布 image 文件</p><p>容器运行成功后，就确认了 image 文件的有效性。这时，我们就可以考虑把 image 文件分享到网上，让其他人使用。</p><p>首先，去hub.docker.com或cloud.docker.com注册一个账户。然后，用下面的命令登录。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker login</span><br></pre></td></tr></table></figure></p><p>接着，为本地的 image 标注用户名和版本。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image tag[<span class="string">imageName</span>][<span class="symbol">username</span>]/[repository]:[tag]</span><br><span class="line"><span class="section"># 实例</span></span><br><span class="line">$ docker image tag koa-demos:0.0.1ruanyf/koa-demos:0.0.1</span><br></pre></td></tr></table></figure></p><p>也可以不标注用户名，重新构建一下 image 文件。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image build-t[username]/[repository]:[tag].</span><br></pre></td></tr></table></figure></p><p>最后，发布 image 文件。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image push<span class="comment">[username]</span>/<span class="comment">[repository]</span>:<span class="comment">[tag]</span></span><br></pre></td></tr></table></figure></p><p>发布成功以后，登录 hub.docker.com，就可以看到已经发布的 image 文件。</p><p>11、其他有用的命令<br>前面的docker container run命令是新建容器，每运行一次，就会新建一个容器。同样的命令运行两次，就会生成两个一模一样的容器文件。如果希望重复使用容器，就要使用docker container start命令，它用来启动已经生成、已经停止运行的容器文件</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> start<span class="comment">[containerID]</span></span><br></pre></td></tr></table></figure><p>前面的docker container kill命令终止容器运行，相当于向容器里面的主进程发出 SIGKILL 信号。而docker container stop命令也是用来终止容器运行，相当于向容器里面的主进程发出 SIGTERM 信号，然后过一段时间再发出 SIGKILL 信号。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bash <span class="keyword">container</span> stop<span class="comment">[containerID]</span></span><br></pre></td></tr></table></figure></p><p>这两个信号的差别是，应用程序收到 SIGTERM 信号以后，可以自行进行收尾清理工作，但也可以不理会这个信号。如果收到 SIGKILL 信号，就会强行立即终止，那些正在进行中的操作会全部丢失。</p><p>docker container logs命令用来查看 docker 容器的输出，即容器里面 Shell 的标准输出。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令查看输出。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> logs<span class="comment">[containerID]</span></span><br></pre></td></tr></table></figure></p><p>docker container exec命令用于进入一个正在运行的 docker 容器。如果docker run命令运行容器的时候，没有使用-it参数，就要用这个命令进入容器。一旦进入了容器，就可以在容器的 Shell 执行命令了。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> exec-it<span class="comment">[containerID]</span>/bin/bash</span><br></pre></td></tr></table></figure></p><p>docker container cp命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">container</span> cp<span class="comment">[containID]</span>:<span class="comment">[/path/to/file]</span>.</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/yeasy/docker_practice/blob/master/SUMMARY.md" target="_blank" rel="noopener">docker文档</a></p><p>命令合集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">docker pull [选项] [docker registry 地址[:端口号]/]仓库名[:标签]</span><br><span class="line">例如：docker pull ubuntu:16.04</span><br><span class="line">docekr run   //运行容器container</span><br><span class="line">例如：docker run -it <span class="comment">--rm ubuntu:16.04 \bash</span></span><br><span class="line">-it 这个两个参数，一个-i：交互式操作，-t 终端 bash 执行一些命令查看返回结果，因此需要交互式终端</span><br><span class="line"><span class="comment">--rm 容器退出后随之删除</span></span><br><span class="line"></span><br><span class="line">exit  //退出容器</span><br><span class="line">//启动一个nginx</span><br><span class="line">docker run -p 8080:80 -d nginx</span><br><span class="line">docker images   //列出所有image镜像</span><br><span class="line">docker build -t //创建image</span><br><span class="line"></span><br><span class="line">docker ps   //列出container</span><br><span class="line">docker cp index.html b08b3xx://usr/share/nginx/html</span><br><span class="line"></span><br><span class="line"><span class="comment">##提交保存一个镜像</span></span><br><span class="line">docker <span class="keyword">commit</span> -m <span class="string">'fun'</span> b08b3xx(容器<span class="keyword">id</span>) <span class="keyword">name</span>(名称)</span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi b08b3xx</span><br><span class="line"><span class="comment"># 显示之前运行的历史容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 删除容器container</span></span><br><span class="line">docker rm b08b3xx(容器<span class="keyword">id</span>) </span><br><span class="line"><span class="comment"># 在host和container之间拷贝文件</span></span><br><span class="line">docker cp</span><br><span class="line"><span class="comment"># 查看镜像和任务的详细信息</span></span><br><span class="line">docker inspect ubuntu:latest</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker exec -it d5ab172xx /<span class="keyword">bin</span>/bash</span><br><span class="line">docker attach d5ab172xx</span><br><span class="line">ssh方式进去</span><br><span class="line"><span class="comment"># 删除全部容器</span></span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line"><span class="comment"># 一条命令实现停用并删除容器</span></span><br><span class="line">docker <span class="keyword">stop</span> $(docker ps -q) &amp; docker rm $(docker ps -aq)</span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker <span class="keyword">logs</span> &lt;<span class="keyword">container</span> <span class="keyword">id</span>&gt;</span><br><span class="line"><span class="comment"># 查看容器内部运行的进程</span></span><br><span class="line">docker top [容器<span class="keyword">id</span>]</span><br><span class="line"><span class="comment"># 导出镜像</span></span><br><span class="line">docker expoer &gt; develop.tar</span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line">输入命令docker <span class="keyword">import</span>, 从文件夹中直接把ubuntu文件拖拽到命令行中</span><br><span class="line"><span class="comment"># 查看空间占用</span></span><br><span class="line">docker <span class="keyword">system</span> df -v</span><br><span class="line"><span class="comment"># 自动空间清理</span></span><br><span class="line">docker <span class="keyword">system</span> prune</span><br><span class="line"><span class="comment"># 挂载目录</span></span><br><span class="line">docker run -p <span class="number">8080</span>:<span class="number">80</span> -d -v $PWD/doc2:/<span class="keyword">var</span>/www/html cwz/nginx:<span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line">docker run <span class="comment">--volumed-from ...</span></span><br><span class="line"></span><br><span class="line">mkdir <span class="keyword">data</span></span><br><span class="line">docker <span class="keyword">create</span> -v $PWD/<span class="keyword">data</span>:/<span class="keyword">var</span>/mydata <span class="comment">--name data_container ubuntu</span></span><br><span class="line">产生一个仅有数据的容器</span><br><span class="line"></span><br><span class="line">docker run -it <span class="comment">--volumes-from data_container ubuntu /bin/base</span></span><br><span class="line">从一个容器挂载，运行并进入容器内部</span><br><span class="line"></span><br><span class="line">多容器app</span><br><span class="line">compose介绍</span><br><span class="line">  app名称：ghost，是一个博客平台程序，安装之后，可着急写文字或别人发布，架构：nginx-ghost app-mysql 分别分为三个容器</span><br><span class="line">  dcoker-compose.yml命令</span><br><span class="line">  <span class="keyword">build</span>: 本地构建镜像</span><br><span class="line">  command: 覆盖缺省命令</span><br><span class="line">  depends_on: 连接容器</span><br><span class="line">  ports: 暴露端口</span><br><span class="line">  volumes: 挂载卷组</span><br><span class="line">  image: 拉取镜像</span><br><span class="line">docker-compose命令</span><br><span class="line">  up：启动服务</span><br><span class="line">  <span class="keyword">stop</span>: 停止服务</span><br><span class="line">  rm: 删除服务中的各个容器</span><br><span class="line">  <span class="keyword">logs</span>: 观察各个容器中的日志</span><br><span class="line">  ps: 列出服务相关的容器</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>docker pull</td><td>获取image</td></tr><tr><td>docker build</td><td>创建image</td></tr><tr><td>docker run</td><td>运行container</td></tr><tr><td>docker ps</td><td>列出container</td></tr><tr><td>docker rm</td><td>删除container</td></tr><tr><td>docker rmi</td><td>删除image</td></tr><tr><td>docker ps</td><td>在host和container之间拷贝文件</td></tr><tr><td>docker commit</td><td>保存改动为新的image</td></tr></tbody></table><p>Dockerfile 语法</p><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td>FROM</td><td>base image</td></tr><tr><td>RUN</td><td>执行命令</td></tr><tr><td>ADD</td><td>添加文件</td></tr><tr><td>COPY</td><td>拷贝文件</td></tr><tr><td>CMD</td><td>执行命令</td></tr><tr><td>EXPOSE</td><td>暴露端口</td></tr><tr><td>WORKDIR</td><td>指定路径</td></tr><tr><td>MAINTAINER</td><td>维护者</td></tr><tr><td>ENV</td><td>指定环境变量</td></tr><tr><td>ENTRYPOINT</td><td>容器入口</td></tr><tr><td>USER</td><td>指定用户</td></tr><tr><td>VOLUME</td><td>mount point</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;docker-简介&quot;&gt;&lt;a href=&quot;#docker-简介&quot; class=&quot;headerlink&quot; title=&quot;docker 简介&quot;&gt;&lt;/a&gt;docker 简介&lt;/h2&gt;&lt;p&gt;2013年发布至今，docker一直广受瞩目，被认为可能会改变软件行业。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="docker" scheme="//website.cwzcfj.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>前端常用命令集</title>
    <link href="//website.cwzcfj.cn/2019/04/17/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86/"/>
    <id>//website.cwzcfj.cn/2019/04/17/前端常用命令集/</id>
    <published>2019-04-17T15:44:33.000Z</published>
    <updated>2023-04-26T14:03:24.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端常用命令"><a href="#前端常用命令" class="headerlink" title="前端常用命令"></a>前端常用命令</h2><p>搜集一些经常使用到的命令，整理到一起，方便查阅。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">mac常用快捷键</span><br><span class="line"></span><br><span class="line">control+command+f <span class="comment"># 最大化最小化切换</span></span><br><span class="line">command+option+i  <span class="comment"># 打开开发者工具</span></span><br><span class="line">command+H         <span class="comment"># 隐藏窗口</span></span><br><span class="line">command+M         <span class="comment"># 最小化当前窗口</span></span><br><span class="line">command+option+H  <span class="comment"># 最小化当前程序之外所有程序窗口</span></span><br><span class="line">command+option+M+H <span class="comment"># 快速隐藏所有应用程序窗口</span></span><br><span class="line"></span><br><span class="line">ctrl+shift+L <span class="comment"># 同时选中所有匹配</span></span><br><span class="line"></span><br><span class="line">mac常用命令</span><br><span class="line"></span><br><span class="line">pwd  <span class="comment"># 查看当前工作目录</span></span><br><span class="line">cd   <span class="comment"># 进入root</span></span><br><span class="line">cd folder <span class="comment"># 进入文件夹</span></span><br><span class="line">cd ..    <span class="comment"># 上级目录</span></span><br><span class="line">cd ~     <span class="comment"># 返回root</span></span><br><span class="line">rm 文件名  <span class="comment"># 删除</span></span><br><span class="line">ls        <span class="comment"># 列出目录下所有文件</span></span><br><span class="line">cp 文件名 目标目录   <span class="comment"># 拷贝到目标目录</span></span><br><span class="line">ps -ef|grep nginx   <span class="comment"># 查询服务</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">losf -i :7001</span><br><span class="line"><span class="keyword">kill</span> <span class="number">-9</span> <span class="number">83908</span>       <span class="comment"># 查询端口占用，并杀掉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ln</span> -s 使用路径 希望的路径   <span class="comment"># 链接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//查询日志</span><br><span class="line">control+f  <span class="comment"># 翻页</span></span><br><span class="line">//查询日志关键信息</span><br><span class="line">cat -n test.log | grep <span class="string">"地形"</span></span><br><span class="line">//日志输出到屏幕</span><br><span class="line">cat *.log</span><br><span class="line"></span><br><span class="line">more *.log <span class="comment"># 同cat命令差不多，只不过时会把内容分页，通过空格向下翻页</span></span><br><span class="line"></span><br><span class="line">通过<span class="keyword">less</span> *.log 进入文件</span><br><span class="line"> <span class="number">1.</span> 可以通过/txt或者?txt来定位文件，并且通过n(向上)或者N(向下)来定位下一个匹配记录</span><br><span class="line"> <span class="number">2.</span> 通过<span class="keyword">less</span> *.log | grep <span class="string">'txt'</span> 关键字查找</span><br><span class="line"> <span class="number">3.</span> 通过F来开启实时监控</span><br><span class="line"><span class="keyword">head</span> 命令</span><br><span class="line"><span class="keyword">head</span> *.log 默认查看前<span class="number">10</span>行日志</span><br><span class="line"><span class="keyword">head</span> -n <span class="number">20</span> *.log 查看前<span class="number">20</span>行日志</span><br><span class="line"></span><br><span class="line">tail命令(常用)</span><br><span class="line">tail <span class="comment"># 默认查看末尾几行的日志</span></span><br><span class="line">tail -n <span class="number">10</span> *.log <span class="comment"># 默认查看后10行日志</span></span><br><span class="line">tail -f *.log 实时监控日志</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">idea</span><br><span class="line">alt + <span class="number">1</span> 快速移动到上一个错误</span><br><span class="line">alt + <span class="number">2</span> 快速移动到下一个错误</span><br><span class="line">alt + enter 修改错误</span><br><span class="line">alt + control + o 删除多余jar</span><br><span class="line">command + <span class="keyword">option</span> + L  格式化代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git</span><br><span class="line">//强制更新到本地</span><br><span class="line">git <span class="keyword">fetch</span> -<span class="keyword">all</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard origin/master  //远程分支名称</span></span><br><span class="line">git <span class="keyword">fetch</span></span><br><span class="line"></span><br><span class="line">git remote -v  <span class="comment"># 查看远程仓库地址</span></span><br><span class="line">git remote <span class="keyword">add</span> origin <span class="keyword">url</span> <span class="comment"># 添加远程原仓库地址</span></span><br><span class="line">git branch -r <span class="comment"># 获取所有远程分支</span></span><br><span class="line">git chekout -b 本地分支名x origin/远程分支x     <span class="comment"># 拉取远程分支到本地分支并创建分支x，并切换到本地分支x 注：此方法会和远程分支建立映射关系</span></span><br><span class="line">git <span class="keyword">fetch</span> origin 远程分支x:本地分支x  <span class="comment"># 使用此方法不会切换到改本地分支x，需要手动checkout。并且没有和远程有映射关系。</span></span><br><span class="line">git branch -vv <span class="comment"># 查看本地分支和远程分支映射关系</span></span><br><span class="line">git branch -u origin/addFile || git branch <span class="comment">--set-upstrean-to origin/addFile  # 添加当前分支和远程分支关系</span></span><br><span class="line">git branch <span class="comment">--unset-upstream # 撤销本地分支于远程分支映射关系</span></span><br><span class="line"></span><br><span class="line">git checkout <span class="comment">-- readne.txt # 撤销本地单个文件</span></span><br><span class="line">git branch     <span class="comment"># 列出本地所有分支</span></span><br><span class="line">git chekcout <span class="keyword">name</span> <span class="comment"># 检出分支名，切换分支，本地文件不会改变</span></span><br><span class="line">git <span class="keyword">add</span> dir   <span class="comment"># 提交目录</span></span><br><span class="line">git diff      <span class="comment"># 显示本地和暂存区的差异</span></span><br><span class="line">git diff <span class="comment">--cached file  # 显示暂存区和上一个commit的差异</span></span><br><span class="line">git diff <span class="keyword">HEAD</span> <span class="comment"># 显示工作区和单亲分支最新commit 之间差异</span></span><br><span class="line">git push origin 本地分支:远程分支   <span class="comment"># 推送到远程</span></span><br><span class="line">git chekcout -f <span class="keyword">name</span>    <span class="comment"># 强制切换分支， 会抛弃已修改的</span></span><br><span class="line">git branch -d <span class="keyword">name</span>  <span class="comment"># 删除分支</span></span><br><span class="line">git stash <span class="keyword">list</span>  <span class="comment"># 查询缓存列表</span></span><br><span class="line">git stash       <span class="comment"># 暂存起来</span></span><br><span class="line">git stash <span class="keyword">apply</span> stash@&#123;<span class="number">0</span>&#125;   <span class="comment"># 重新获取刚才变更</span></span><br><span class="line">git stash <span class="keyword">drop</span> stash@&#123;<span class="number">0</span>&#125;   <span class="comment"># 删除对应的名字</span></span><br><span class="line">git stash <span class="keyword">clear</span>     <span class="comment"># 删除</span></span><br><span class="line">git <span class="keyword">log</span> -p <span class="number">-2</span> <span class="comment"># 查看最近提交的两次更新</span></span><br><span class="line">git push origin <span class="comment">--delete [branch-name]  # 删除远程分支</span></span><br><span class="line"></span><br><span class="line">brew 常用命令</span><br><span class="line"></span><br><span class="line">brew <span class="comment">--version  # 版本</span></span><br><span class="line">which brew      <span class="comment"># 安装路径</span></span><br><span class="line">brew <span class="keyword">install</span>    <span class="comment"># 安装包</span></span><br><span class="line">brew <span class="keyword">search</span>     <span class="comment"># 搜索</span></span><br><span class="line">brew <span class="keyword">update</span>     <span class="comment"># 更新</span></span><br><span class="line">brew <span class="keyword">list</span>       <span class="comment"># 列表</span></span><br><span class="line">brew info []    <span class="comment"># 包信息</span></span><br><span class="line">brew deps []    <span class="comment"># 包依赖</span></span><br><span class="line">brew <span class="keyword">server</span>     <span class="comment"># web 服务</span></span><br><span class="line">brew -<span class="keyword">help</span>      <span class="comment"># 帮助</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mongoldb</span><br><span class="line"></span><br><span class="line">mongod      <span class="comment"># 启动服务</span></span><br><span class="line">mongo       <span class="comment"># 进入命令</span></span><br><span class="line">mongod <span class="comment">--logpath /data/db/mongod.log # 设置日志位置</span></span><br><span class="line"><span class="keyword">show</span> dbs    <span class="comment"># 查询所有数据列表</span></span><br><span class="line">db          <span class="comment"># 显示单亲数据库对象或集合</span></span><br><span class="line"><span class="keyword">use</span>         <span class="comment"># 连接到指定的数据库</span></span><br><span class="line">db.runoob.insert(&#123;&#125;) <span class="comment"># 插入数据runoob数据库名集合</span></span><br><span class="line">db.dropDatabase();  <span class="comment"># 删除单亲数据库，默认test，db命令可以查看单亲数据库名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql</span><br><span class="line">查询多个字段中任一个</span><br><span class="line">and CONCAT(IFNULL(a.problem,''),IFNULL(answers,'')) like '%制度%'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node利用n进行升级</span><br><span class="line">sudo npm <span class="keyword">install</span> -g n   <span class="comment"># 全局安装升级node工具包n</span></span><br><span class="line">sudo n stable           <span class="comment"># 安装最新稳定版node</span></span><br><span class="line">n                       <span class="comment"># 显示已安装的node</span></span><br><span class="line">n latest                <span class="comment"># 安装最新版本node</span></span><br><span class="line">n lts                   <span class="comment"># 安装最新长期维护版(LTS)node</span></span><br><span class="line">n &lt;<span class="keyword">version</span>&gt;             <span class="comment"># 根据提供的版本号安装node</span></span><br><span class="line"></span><br><span class="line">npm升级</span><br><span class="line">npm <span class="keyword">install</span> -g npm-<span class="keyword">check</span>   <span class="comment"># 全局安装npm升级工具包</span></span><br><span class="line"></span><br><span class="line">npm-<span class="keyword">check</span> -gu              <span class="comment"># 检查更新全局依赖包</span></span><br><span class="line">npm-<span class="keyword">check</span> -u               <span class="comment"># 检查当前项目依赖</span></span><br><span class="line"></span><br><span class="line">npm config ls          <span class="comment"># 查询npm配置</span></span><br><span class="line"></span><br><span class="line">npm config <span class="keyword">set</span> registry <span class="keyword">http</span>://registry.npmjs.org/  <span class="comment"># 全局切换官网镜像</span></span><br><span class="line">npm config <span class="keyword">set</span> registry https://registry.npm.taobao.org  <span class="comment"># 全局切换到淘宝镜像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布模块</span></span><br><span class="line">$ npm publish [<span class="keyword">name</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除模块 </span></span><br><span class="line">$ npm unpublish [<span class="keyword">name</span>]</span><br><span class="line"></span><br><span class="line">yarn 包管理器</span><br><span class="line"></span><br><span class="line">yarn init          <span class="comment"># 初始化项目</span></span><br><span class="line">yarn <span class="keyword">add</span> [<span class="keyword">package</span>]          <span class="comment"># 添加依赖</span></span><br><span class="line">yarn <span class="keyword">add</span> [<span class="keyword">package</span>]@[<span class="keyword">version</span>]</span><br><span class="line">yarn <span class="keyword">add</span> [<span class="keyword">package</span>]@[tag]</span><br><span class="line"></span><br><span class="line">yarn <span class="keyword">upgrade</span> [<span class="keyword">package</span>] <span class="comment"># 升级依赖</span></span><br><span class="line">yarn remove [<span class="keyword">package</span>]  <span class="comment"># 移除依赖</span></span><br><span class="line">yarn <span class="keyword">install</span> 或者yarn   <span class="comment"># 安装项目所有依赖</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端常用命令&quot;&gt;&lt;a href=&quot;#前端常用命令&quot; class=&quot;headerlink&quot; title=&quot;前端常用命令&quot;&gt;&lt;/a&gt;前端常用命令&lt;/h2&gt;&lt;p&gt;搜集一些经常使用到的命令，整理到一起，方便查阅。&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="git" scheme="//website.cwzcfj.cn/tags/git/"/>
    
      <category term="命令" scheme="//website.cwzcfj.cn/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>kubenetes集群环境</title>
    <link href="//website.cwzcfj.cn/2019/04/17/kubenetes%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83/"/>
    <id>//website.cwzcfj.cn/2019/04/17/kubenetes集群环境/</id>
    <published>2019-04-17T13:59:27.000Z</published>
    <updated>2023-03-15T05:19:16.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Minikube-安装"><a href="#Minikube-安装" class="headerlink" title="Minikube 安装"></a>Minikube 安装</h2><p>Minikube是一个快速搭建单节点kubeneter集群的工具<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew cask install minikube</span><br><span class="line"><span class="comment">//查看系统版本</span></span><br><span class="line">minikube <span class="keyword">version</span></span><br></pre></td></tr></table></figure></p><h2 id="kubectl-安装"><a href="#kubectl-安装" class="headerlink" title="kubectl 安装"></a>kubectl 安装</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># curl -LO https://stroage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/darwin/amd64/kubectl   安装最新版</span></span><br><span class="line"><span class="comment"># chmod +x ./kubectl  赋二进制文件执行权限</span></span><br><span class="line"><span class="comment"># sudo mv ./kubectl /usr/local/bin/kubectl   将二进制文件移到path中</span></span><br><span class="line"><span class="comment"># kubectl version</span></span><br><span class="line"></span><br><span class="line">minikube <span class="keyword">start</span> //去创建k8s环境</span><br><span class="line"></span><br><span class="line">//执行结束可以通过kubectl cluster-info 查看集群信息 去连一下k8s api <span class="keyword">server</span></span><br><span class="line">minikube ssh //进入虚拟机，进入集群，查看<span class="keyword">container</span>运行起来了</span><br><span class="line">docker ps</span><br><span class="line">//退出，运行</span><br><span class="line">minikube dashboard  <span class="comment"># UI界面</span></span><br><span class="line">minikube <span class="keyword">delete</span>   <span class="comment"># 删除已运行的Minikube实例</span></span><br><span class="line">minikube <span class="keyword">stop</span>     <span class="comment"># 停止已运行的Minikube实例</span></span><br><span class="line">minikube <span class="keyword">logs</span>     <span class="comment"># 查看日志</span></span><br><span class="line"></span><br><span class="line">//运行nginx</span><br><span class="line"><span class="comment"># 运行一个nginx的pod, 然后导出运行的nginx服务</span></span><br><span class="line">kubectl run hello <span class="comment">--image=nginx --port=80</span></span><br><span class="line">kubectl expose deployment hello <span class="comment">--type=NodePort</span></span><br><span class="line"></span><br><span class="line">//命令</span><br><span class="line">minikube <span class="keyword">status</span></span><br><span class="line">minikube docker-env</span><br><span class="line">kubectl <span class="keyword">get</span> nodes <span class="comment"># 显示本地节点</span></span><br><span class="line">kubectl <span class="keyword">get</span> <span class="keyword">all</span>   <span class="comment"># 显示所有资源 包括Pod, Service, Deployment, RS 等</span></span><br><span class="line">kubectl <span class="keyword">get</span> <span class="keyword">all</span> -o wide <span class="comment"># 展示更多的信息, 包括镜像地址等</span></span><br><span class="line">kubectl <span class="keyword">get</span> pod <span class="comment">--all-namespaces   //查看所有服务就绪</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>) 命令行直接创建namespace</span><br><span class="line">kubectl <span class="keyword">create</span> namespace <span class="keyword">new</span>-namespace</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) 通过文件创建</span><br><span class="line">cat my-namespace.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line"><span class="keyword">name</span>: <span class="keyword">new</span>-namespace</span><br><span class="line">kubectl <span class="keyword">create</span> -f ./my-namespace.yaml</span><br><span class="line">kubectl <span class="keyword">apply</span> -f</span><br><span class="line">kubectl -n kub-<span class="keyword">system</span> edit service kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">kubectl <span class="keyword">delete</span> -f kubernetes-dashboard.yaml</span><br><span class="line">//删除</span><br><span class="line">kubectl <span class="keyword">delete</span> namespace <span class="keyword">new</span>-namespace <span class="comment"># 删除一个namespace会自动删除所有属于该namespace的资源，default和kube-system 命名空间不可删除。</span></span><br><span class="line"></span><br><span class="line">kubectl <span class="keyword">get</span> pod <span class="comment"># 显示所有pod</span></span><br><span class="line">kubectl <span class="keyword">get</span> serveice <span class="comment"># 显示所有server</span></span><br><span class="line">kubectl <span class="keyword">describe</span> pods <span class="comment"># 查看错误log</span></span><br><span class="line">kubectl <span class="keyword">get</span> rc  <span class="comment"># 显示所有rc</span></span><br><span class="line">kubectl <span class="keyword">delete</span> rc rcname <span class="comment"># 删除rc</span></span><br><span class="line">kubectl <span class="keyword">delete</span> service servicename <span class="comment"># 删除server</span></span><br><span class="line">kubectl <span class="keyword">delete</span> pod podname <span class="comment"># 删除pod 触发了replicas的确保机制，那么我们删除deployment deployment进行删除，则全部删除.</span></span><br><span class="line">kubectl <span class="keyword">delete</span> deployment podname</span><br><span class="line"></span><br><span class="line">kubectl <span class="keyword">delete</span> pod -<span class="keyword">all</span> <span class="comment"># 删除所有</span></span><br><span class="line"></span><br><span class="line">启动cluster</span><br><span class="line">minikube <span class="keyword">start</span></span><br><span class="line">kubectl <span class="keyword">get</span> pods <span class="comment">--all-namespace</span></span><br><span class="line">kubectl <span class="keyword">get</span> nodes</span><br><span class="line">eval $(minikube docker-env)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 创建并启动minikube虚拟机</span><br><span class="line">$ minikube <span class="keyword">start</span></span><br><span class="line"><span class="keyword">Starting</span> <span class="keyword">local</span> Kubernetes cluster...</span><br><span class="line">Running pre-<span class="keyword">create</span> checks...</span><br><span class="line">Creating machine...</span><br><span class="line"><span class="keyword">Starting</span> <span class="keyword">local</span> Kubernetes cluster...</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 创建 hello-minikube 部署</span><br><span class="line">$ kubectl run hello-minikube <span class="comment">--image=tomcat:8.0 --port=8080</span></span><br><span class="line">deployment <span class="string">"hello-minikube"</span> created</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 发布服务 hello-minikube</span><br><span class="line">$ kubectl expose deployment hello-minikube <span class="comment">--type=NodePort</span></span><br><span class="line">service <span class="string">"hello-minikube"</span> exposed</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 查看 pods</span><br><span class="line">$ kubectl <span class="keyword">get</span> pods</span><br><span class="line"><span class="keyword">NAME</span>                             READY    <span class="keyword">STATUS</span>             RESTARTS  AGE</span><br><span class="line">hello-minikube<span class="number">-598805112</span><span class="number">-3</span>bzmf    <span class="number">1</span>/<span class="number">1</span>     ContainerCreating    <span class="number">0</span>       <span class="number">5</span>s</span><br><span class="line">注意：刚开始时， pod 没有完全创建好的时候，状态是ContainerCreating, 当部署完成，状态就变成了Running.</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="keyword">get</span> pods</span><br><span class="line"><span class="keyword">NAME</span>                             READY    <span class="keyword">STATUS</span>             RESTARTS  AGE</span><br><span class="line">hello-minikube<span class="number">-598805112</span><span class="number">-3</span>bzmf    <span class="number">1</span>/<span class="number">1</span>     Running              <span class="number">0</span>       <span class="number">25</span>s</span><br><span class="line"></span><br><span class="line">用<span class="keyword">describe</span> 可以查询失败的pod</span><br><span class="line">kubectl <span class="keyword">describe</span> pod hello-minikube<span class="number">-598805112</span><span class="number">-3</span>bzmf</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 获取服务地址</span><br><span class="line">$ minikube service hello-minikube <span class="comment">--url</span></span><br><span class="line"><span class="keyword">http</span>:xx.xx.xx.xx:<span class="number">30724</span></span><br><span class="line">$ minikube service hello-minikube   将直接打开地址到默认浏览器上。</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> 停止minikube虚拟机</span><br><span class="line">$ minikube <span class="keyword">stop</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Minikube-安装&quot;&gt;&lt;a href=&quot;#Minikube-安装&quot; class=&quot;headerlink&quot; title=&quot;Minikube 安装&quot;&gt;&lt;/a&gt;Minikube 安装&lt;/h2&gt;&lt;p&gt;Minikube是一个快速搭建单节点kubeneter集群的工具&lt;b
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="环境搭建" scheme="//website.cwzcfj.cn/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="k8s" scheme="//website.cwzcfj.cn/tags/k8s/"/>
    
      <category term="kubenetes" scheme="//website.cwzcfj.cn/tags/kubenetes/"/>
    
  </entry>
  
  <entry>
    <title>javaScript 正则表达式</title>
    <link href="//website.cwzcfj.cn/2019/04/15/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>//website.cwzcfj.cn/2019/04/15/js正则表达式/</id>
    <published>2019-04-15T15:57:20.000Z</published>
    <updated>2023-03-15T03:49:50.129Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式规则"><a href="#正则表达式规则" class="headerlink" title="正则表达式规则"></a>正则表达式规则</h3><ol><li><p>普通字符</p><p> 字母、数字、汉子、下划线、以及没有特殊定义的标点符号，都是普通字符。</p></li><li><p>简单转义字符</p><p>  采用前面加”/“的方法进行。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">\r,</span> <span class="string">\n</span>  代表回车和换行符</span><br><span class="line"></span><br><span class="line"><span class="string">\t</span>      制表符 </span><br><span class="line"></span><br><span class="line"><span class="string">\/</span>      代表 <span class="string">"/"</span> 本身</span><br><span class="line"></span><br><span class="line">^, $ 都有特殊意义，如果要想匹配字符串中 <span class="string">"^"</span> 和 <span class="string">"$"</span> 字符，则表达式就需要写成 <span class="string">"\^"</span> 和 <span class="string">"\$"</span>。</span><br><span class="line"></span><br><span class="line"><span class="string">\^</span>   匹配 ^ 符号本身</span><br><span class="line"></span><br><span class="line"><span class="string">\$</span>匹配 $ 符号本身</span><br><span class="line"></span><br><span class="line">.匹配小数点（.）本身</span><br></pre></td></tr></table></figure></li><li><p>能够与 ‘多种字符’ 匹配的表达式</p><p>  正则表达式中的一些表示方法，可以匹配’多种字符’其中的任意一个字符，比如”\d”可以匹配任意一个数字。虽然可以匹配其中任意的字符，但是只能是一个，不是多个。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\d   任意一个数字，<span class="number">0</span>~<span class="number">9</span>中的任意一个</span><br><span class="line">\w   任意一个字母、数字、下划线，A~Z,a~z,<span class="number">0</span>~<span class="number">9</span>,_中的任意一个</span><br><span class="line">\s   包含空格、制表符、换页符等空白字符的其中任意一个</span><br><span class="line">.    小数点可以匹配除换行符（/n）以外任意一个字符</span><br></pre></td></tr></table></figure></li><li><p>自定义能够匹配’多种字符’的表达式</p><p>  使用方括号[]包含一系列字符，能够匹配其中任意一个字符。[^]包含一系列，则能够匹配其中字符之外的任意一个字符。同样，虽然匹配但只匹配一个，不是多个。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">ab5@</span>]   匹配<span class="string">"a"</span>或<span class="string">"b"</span>或<span class="string">"5"</span>或<span class="string">"@"</span></span><br><span class="line">[<span class="meta">^abc</span>]   匹配<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>之外的任意一个字符</span><br><span class="line">[<span class="meta">f-k</span>]    匹配<span class="string">"f"</span>~<span class="string">"k"</span>之间的任意字母</span><br><span class="line">[<span class="meta">^A-F0~3</span>]  匹配<span class="string">"A"</span>~<span class="string">"F"</span>,<span class="string">"0"</span>~<span class="string">"3"</span>之外的任意字符</span><br></pre></td></tr></table></figure></li><li><p>修饰匹配次数的特殊符号</p><p>  无论是只能匹配一种字符的表达式，还是可以匹配多种字符其中任意一个的表达式，都只能匹配一次。如果使用表达式再加上修饰匹配次数的特殊符号，那么不用重复书写表达式就可以重复匹配。</p><p>  使用方法是：”次数修饰”放在”被修饰的表达式”后边。比如：”[bcd][bcd]” 可以写成 “[bcd]{2}”。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;n&#125;    表达式重复n次，比如：<span class="string">"\w&#123;2&#125;"</span> 相当于 <span class="string">"\w\w"</span>；<span class="string">"a&#123;5&#125;"</span> 相当于 <span class="string">"aaaaa"</span></span><br><span class="line">&#123;m,n&#125;  表达式至少重复m次，最多重复n次，比如：<span class="string">"ba&#123;1,3&#125;"</span>可以匹配 <span class="string">"ba"</span>或<span class="string">"baa"</span>或<span class="string">"baaa"</span></span><br><span class="line">&#123;m,&#125;   表达式至少重复m次，比如：<span class="string">"\w\d&#123;2,&#125;"</span>可以匹配 <span class="string">"a12"</span>,<span class="string">"_456"</span>,<span class="string">"M12344"</span>...</span><br><span class="line">?      匹配表达式<span class="number">0</span>次或者<span class="number">1</span>次，相当于 &#123;<span class="number">0</span>,<span class="number">1</span>&#125;，比如：<span class="string">"a[cd]?"</span>可以匹配 <span class="string">"a"</span>,<span class="string">"ac"</span>,<span class="string">"ad"</span></span><br><span class="line">+      表达式至少出现<span class="number">1</span>次，相当于 &#123;<span class="number">1</span>,&#125;，比如：<span class="string">"a+b"</span>可以匹配 <span class="string">"ab"</span>,<span class="string">"aab"</span>,<span class="string">"aaab"</span>...</span><br><span class="line">*      表达式不出现或出现任意次，相当于 &#123;<span class="number">0</span>,&#125;，比如：<span class="string">"\^*b"</span>可以匹配 <span class="string">"b"</span>,<span class="string">"^^^b"</span>...</span><br></pre></td></tr></table></figure></li><li><p>其他一些代表抽象意义的特殊符号</p><p>  一些符号在表达式中代表抽象的特殊意义：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^    字符开始的地方匹配，不匹配任何字符</span><br><span class="line">$    字符串结束的地方匹配，不匹配任何字符</span><br><span class="line">\<span class="keyword">b </span>  匹配一个单词的边界，也就是单词和空格直接的位置，不匹配任何字符</span><br></pre></td></tr></table></figure><p> 一些符号可以影响表达式内部子表达式之间的关系：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|    左右两边表达式直接<span class="string">"或"</span>关系，匹配左边或者右边</span><br><span class="line">()   <span class="number">1.</span>在被修饰匹配次数时，括号内的表达式可以作为整体被修饰 <span class="number">2.</span>取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到</span><br></pre></td></tr></table></figure></li><li><p>定义表达式</p><p>  定义正则表达式有两种形式，一种是普通方式，一种是构造函数方式。</p><p>普通方式： var reg = /表达式/附加参数<br>附加参数：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">g:</span>    匹配全局</span><br><span class="line"><span class="symbol">i:</span>    不区分大小写匹配</span><br><span class="line"><span class="symbol">m:</span>    多行匹配</span><br></pre></td></tr></table></figure><p>构造函数方式： var reg = new RegExp(“表达式”，”附加参数”)；</p></li></ol><ul><li>()、[]、{}区别<ul><li>() 作用提取匹配的字符串，表达式中有几个()就会得到几个相应的匹配字符串.如(\s+)表示连续的空格字符串</li><li>[] 定义范围.如[a-zA-Z0-9]表示要匹配英文字母和数字</li><li>{} 一般用来匹配长度.如\d{3}表示3个空格，\d[1,3]，匹配1-3个空格</li></ul></li><li>^和$<ul><li>^ 匹配一个字符串的开头，如(^a)就是a开头的字符串</li><li>$ 匹配一个字符串结尾，如(b$)以b为结尾的字符串</li><li>^ 还有一个作用取反，如[^xyz]表示不包含xyz的字符</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;正则表达式规则&quot;&gt;&lt;a href=&quot;#正则表达式规则&quot; class=&quot;headerlink&quot; title=&quot;正则表达式规则&quot;&gt;&lt;/a&gt;正则表达式规则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;普通字符&lt;/p&gt;
&lt;p&gt; 字母、数字、汉子、下划线、以及没有特殊定义的标点符号，都
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="//website.cwzcfj.cn/tags/js/"/>
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="正则" scheme="//website.cwzcfj.cn/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>H5 Audio 对象介绍</title>
    <link href="//website.cwzcfj.cn/2019/04/15/Audio/"/>
    <id>//website.cwzcfj.cn/2019/04/15/Audio/</id>
    <published>2019-04-15T15:47:20.000Z</published>
    <updated>2023-03-15T04:59:25.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Audio-对象介绍"><a href="#Audio-对象介绍" class="headerlink" title="Audio 对象介绍"></a>Audio 对象介绍</h2><p><a href="http://www.w3school.com.cn/jsref/dom_obj_audio.asp" target="_blank" rel="noopener">详细AIP, 参w3school教程</a></p><ol><li><p>创建Audio对象，可以通过下面两种方式得到。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//方法一</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"music"</span> <span class="attr">src</span>=<span class="string">".map3"</span>&gt;</span>Your browser does not support it<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">var audio = document.getElementById('#music');</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">//方法二</span><br><span class="line">var audio = new Audio(<span class="string">'.map3'</span>);</span><br></pre></td></tr></table></figure></li><li><p>方法和属性介绍</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">audio.play();   <span class="comment">//开始播放</span></span><br><span class="line">audio.pause();  <span class="comment">//暂停</span></span><br><span class="line">audio.autoPlay = <span class="literal">true</span>/<span class="literal">false</span>  <span class="comment">//设置播放状态</span></span><br><span class="line"><span class="built_in">console</span>.log(audio.autoPlay);  <span class="comment">//获取播放状态</span></span><br><span class="line">audio.src    <span class="comment">//获取或者设置播放地址</span></span><br><span class="line">audio.volume = <span class="number">0.5</span>/<span class="number">1</span>  <span class="comment">//设置音量，最大为1,0为静音,获取音量</span></span><br><span class="line"><span class="built_in">console</span>.log(audio.volume);</span><br><span class="line">audio.loop = <span class="literal">true</span>  <span class="comment">//设置或者获取循环状态</span></span><br><span class="line"><span class="built_in">console</span>.log(audio.loop);</span><br><span class="line">audio.duration  <span class="comment">//获取音乐的长度，单位秒</span></span><br><span class="line">audio.currentTime  <span class="comment">//设置或者获取播放时间</span></span><br><span class="line">audio.ended   <span class="comment">//判断音乐是否播放完毕，只读属性</span></span><br><span class="line"></span><br><span class="line">事件</span><br><span class="line"></span><br><span class="line">playing</span><br><span class="line">当音乐开始播放，暂停后重新开始播放，设置currentTime后开始播放时触发</span><br><span class="line">audio.addEventListener(<span class="string">'playing'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'playing'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pause</span><br><span class="line">当音乐暂停时和结束时触发</span><br><span class="line">audio.addEventListener(<span class="string">'pause'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'pause'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ended</span><br><span class="line">当音乐结束时触发</span><br><span class="line">audio.addEventListener(<span class="string">'ended'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ended'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">timeupdate</span><br><span class="line"><span class="comment">//当currentTime更新时会触发timeupdate事件。</span></span><br><span class="line">audio.ontimeupdate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'timeupdate'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">volumechange</span><br><span class="line">当音量改变时触发</span><br><span class="line">audio.onvolumechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'volumechange'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Audio-对象介绍&quot;&gt;&lt;a href=&quot;#Audio-对象介绍&quot; class=&quot;headerlink&quot; title=&quot;Audio 对象介绍&quot;&gt;&lt;/a&gt;Audio 对象介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3school.com.cn/js
      
    
    </summary>
    
      <category term="前端" scheme="//website.cwzcfj.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="//website.cwzcfj.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="h5" scheme="//website.cwzcfj.cn/tags/h5/"/>
    
      <category term="audio" scheme="//website.cwzcfj.cn/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>Centos 笔记</title>
    <link href="//website.cwzcfj.cn/2019/04/15/centos%E7%AC%94%E8%AE%B0/"/>
    <id>//website.cwzcfj.cn/2019/04/15/centos笔记/</id>
    <published>2019-04-15T15:37:40.000Z</published>
    <updated>2023-03-15T04:59:50.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Centos使用笔记"><a href="#Centos使用笔记" class="headerlink" title="Centos使用笔记"></a>Centos使用笔记</h2><h3 id="Centos6忘记密码解决办法，root和普通用户均可"><a href="#Centos6忘记密码解决办法，root和普通用户均可" class="headerlink" title="Centos6忘记密码解决办法，root和普通用户均可?"></a>Centos6忘记密码解决办法，root和普通用户均可?</h3><p>参考地址: <a href="http://www.cnblogs.com/ljmjjy0820/p/6129893.html" target="_blank">http://www.cnblogs.com/ljmjjy0820/p/6129893.html</a></p><ol><li><p>连接ssh</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入命令：rpm -qa | grep ssh</span><br><span class="line">注：若没安装SSH则可输入：yum <span class="keyword">install</span> openssh-<span class="keyword">server</span>安装</span><br><span class="line"></span><br><span class="line">启动SSH服务</span><br><span class="line"></span><br><span class="line">输入命令：service sshd restart  重启SSH服务。</span><br><span class="line"> 命令：service sshd <span class="keyword">start</span> 启动服务 |  命令：service sshd <span class="keyword">stop</span> 停止服务  </span><br><span class="line"> 重启后可输入：netstat -antp | grep sshd 查看是否启动<span class="number">22</span>端口（可略）</span><br><span class="line"></span><br><span class="line">如何设置SSH服务为开机启动？</span><br><span class="line"></span><br><span class="line">输入命令：chkconfig sshd <span class="keyword">on</span> 即可。</span><br><span class="line">注：若是chkconfig sshd <span class="keyword">off</span>则禁止SSH开机启动。</span><br></pre></td></tr></table></figure></li><li><p>在安装完CentOS6.5以后,通过ifconfig来查看IP来使用putty软件来实现远程链接,但发现没有eth0,只有l0？</p><p> 解决参考：<a href="http://www.linuxidc.com/Linux/2015-01/111265.htm" target="_blank">http://www.linuxidc.com/Linux/2015-01/111265.htm</a></p></li></ol><p>查询\安装SSH服务<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#rpm -qa |grep ssh 检查是否装了SSH包</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#yum install openssh-server 没有的话，安装SSH服务</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#chkconfig --list sshd 检查SSHD是否在本运行级别下设置为开机启动</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#chkconfig --level 2345 sshd on  如果没设置启动就设置下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#service sshd restart  重新启动SSHD</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#netstat -antp |grep sshd  看看是否启动了22端口，需要确认下</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#iptables -nL  看看是否放行了22口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#iptables -I INPUT -p tcp --dport 22 -j ACCEPT 没有的话放行22端口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#iptables save 保存防火墙规则</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># vi /etc/ssh/sshd_config　   用vi打开SSH的配置文件，在这里我们先保持默认（允许普通用户通过口令登录）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#useradd lhc    添加普通用户（lhc）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#passwd lhc     修改lhc密码</span></span><br></pre></td></tr></table></figure></p><p> 3.centos ping不通外网域名，能ping通地址？<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">主机名配置</span><br><span class="line">假如要设置主机名为：centos</span><br><span class="line">1.修改network</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line">HOSTNAME=centos</span><br><span class="line">:x   <span class="comment">#保存退出</span></span><br><span class="line"></span><br><span class="line">2.VM虚拟网络，采用桥接模式</span><br><span class="line">3.vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">配置好对应的ip，GETWAY，HOSTNAME，DSN1等参数，如下所示：</span><br><span class="line"></span><br><span class="line">BOOTPROTO=static  <span class="comment">#启用静态ip地址</span></span><br><span class="line">ONBOOT=yes             <span class="comment">#开启自动启用网络连接</span></span><br><span class="line">IPADDR=192.168.79.129  <span class="comment">#设置ip地址</span></span><br><span class="line">NETMASK=255.255.255.0 <span class="comment">#设置子网掩码</span></span><br><span class="line">GATEWAY=192.168.79.2   <span class="comment">#设置网关</span></span><br><span class="line">DNS1=8.8.8.8        <span class="comment">#设置主DNS</span></span><br><span class="line">DNS2=8.8.4.4     <span class="comment">#设置备DNS</span></span><br><span class="line">IPV6INIT=no            <span class="comment">#禁用ipv6</span></span><br><span class="line">HWADDR=00:0C:29:A9:91:42</span><br><span class="line"></span><br><span class="line">service ip6tables stop   <span class="comment">#停止IPV6服务</span></span><br><span class="line">chkconfig ip6tables off      <span class="comment">#禁止ipv6开机启动</span></span><br><span class="line"></span><br><span class="line">//重启network</span><br><span class="line">service netwrok restart</span><br><span class="line">4.检查虚拟机里面网络编辑Ant配置，是否和对应本地配置匹配。这里就不截图了。</span><br></pre></td></tr></table></figure></p><p>  4.常用的命令</p><p>  地址:<a href="http://www.cnblogs.com/wangpd/p/6876825.html" target="_blank"> http://www.cnblogs.com/wangpd/p/6876825.html</a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum命令安装</span><br><span class="line">epel是社区强烈打造的免费开源发行软件包版本库。</span><br><span class="line">yum <span class="keyword">install</span> epel-<span class="keyword">release</span> -y</span><br></pre></td></tr></table></figure></p><p>yum命令<br>  地址:</p><p><a href="http://man.linuxde.net/yum" target="_blank">http://man.linuxde.net/yum</a></p><p>centos7<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">查询是否自启动</span><br><span class="line"><span class="string">systemctl </span><span class="built_in">list-unit-files</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">查询所有已启动服务</span></span><br><span class="line"><span class="string">systemctl </span><span class="built_in">list-units</span> <span class="built_in">--type=service</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">使某服务自动启动</span></span><br><span class="line"><span class="built_in">systemctl</span> <span class="string">enable </span>  <span class="string">httpd.</span><span class="string">service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使</span>某服务不自动启动</span><br><span class="line"><span class="string">systemctl </span><span class="string">disable </span><span class="string">httpd.</span><span class="string">service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">启</span>动某服务</span><br><span class="line"><span class="string">systemctl </span><span class="string">start </span><span class="string">httpd.</span><span class="string">service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">停</span>止某服务</span><br><span class="line"><span class="string">systemctl </span><span class="string">stop </span><span class="string">httpd.</span><span class="string">service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">重</span>启某服务</span><br><span class="line"><span class="string">systemctl </span><span class="string">restart </span><span class="string">httpd.</span><span class="string">service</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">TCP </span><span class="string">listen</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span> <span class="string">ss </span>-<span class="string">lt</span></span><br><span class="line"><span class="string">UDP </span><span class="string">listen</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span> <span class="string">ss </span>-<span class="string">ul</span></span><br><span class="line"><span class="string">TCP连</span>线</span><br><span class="line"></span><br><span class="line"><span class="comment"># ss -t</span></span><br><span class="line"></span><br><span class="line">//查看端口使用情况</span><br><span class="line"><span class="string">ss </span>-<span class="string">tln</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ss </span>-a    查看所有服务端口</span><br></pre></td></tr></table></figure></p><p>centos firewalld简单使用</p><p>  <a href="http://blog.csdn.net/y534560449/article/details/65626183" target="_blank">http://blog.csdn.net/y534560449/article/details/65626183</a></p><p>centos PHP环境搭建</p><p><a href="http://www.cnblogs.com/zhaosiwen/p/5157757.html" target="_blank">http://www.cnblogs.com/zhaosiwen/p/5157757.html</a></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">//查看安装的模块</span><br><span class="line">php -m</span><br><span class="line">php -i | grep php.ini</span><br><span class="line"><span class="comment">#apache主配置文件</span></span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line"><span class="comment">#相关配置 比如vhost文件就可以创建在该目录下</span></span><br><span class="line">/etc/httpd/conf.d/</span><br><span class="line"><span class="comment">#模块配置文件 比如你要开启rewrite模块，可能你就需要到这个目录下面做一些配置了</span></span><br><span class="line">/etc/httpd/conf.modules.d/</span><br><span class="line"><span class="comment">#web可访问目录 网站根目录</span></span><br><span class="line">/var/www/html</span><br><span class="line"><span class="comment">#apache日志文件目录</span></span><br><span class="line">/var/<span class="built_in">log</span>/httpd/</span><br><span class="line"></span><br><span class="line">//查看php包</span><br><span class="line">rpm -qa | grep php</span><br><span class="line"></span><br><span class="line">rpm -qa |grep -i mysql</span><br><span class="line"></span><br><span class="line">//删除包</span><br><span class="line">yum remove php</span><br><span class="line"></span><br><span class="line">//查询是否有残留目录</span><br><span class="line">whereis php</span><br><span class="line"></span><br><span class="line">//删除查看的php包</span><br><span class="line">rpm -e *</span><br><span class="line"></span><br><span class="line">//安装php需要先添加EPEL 包的仓库源</span><br><span class="line">yum -y install epel-release</span><br><span class="line"></span><br><span class="line">//安装nginx</span><br><span class="line">yum -y install nginx</span><br><span class="line"></span><br><span class="line">//查看源目录</span><br><span class="line">cd /etc/yum.repos.d</span><br><span class="line">ls</span><br><span class="line">//清除缓存</span><br><span class="line">yum clean all</span><br><span class="line">//重新生成缓存</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>安装</span><br><span class="line">yum -y install mariadb*</span><br><span class="line"><span class="number">2.</span>开启MySQL服务</span><br><span class="line">systemctl <span class="built_in">start</span> mariadb.service</span><br><span class="line"><span class="number">3.</span>设置开机启动MySQL服务</span><br><span class="line">systemctl enable mariadb.service</span><br><span class="line"><span class="number">4.</span>设置root帐户的密码</span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line">//php7-fpm 添加另外一个仓库</span><br><span class="line">//PHP7-FPM webtatic 仓库：</span><br><span class="line">rpm -Uvh <span class="keyword">https</span>://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line"></span><br><span class="line">yum -y install php70w-fpm php70w-cli php70w-gd php70w-mcrypt php70w-mysql php70w-pear php70w-xml php70w-mbstring php70w-pdo php70w-json php70w-pecl-apcu php70w-pecl-apcu-devel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apache</span><br><span class="line">启动</span><br><span class="line">systemctl <span class="built_in">start</span> httpd</span><br><span class="line">停止</span><br><span class="line">systemctl <span class="built_in">stop</span> httpd</span><br><span class="line">重启</span><br><span class="line">systemctl restart httpd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql</span><br><span class="line">启动</span><br><span class="line">systemctl <span class="built_in">start</span> mysqld</span><br><span class="line">停止</span><br><span class="line">systemctl <span class="built_in">stop</span> mysqld</span><br><span class="line">重启</span><br><span class="line">systemctl restart mysqld</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">php-fpm</span><br><span class="line">启动</span><br><span class="line">systemctl <span class="built_in">start</span> php-fpm</span><br><span class="line">停止</span><br><span class="line">systemctl <span class="built_in">stop</span> php-fpm</span><br><span class="line">重启</span><br><span class="line">systemctl restart php-fpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nginx</span><br><span class="line">启动</span><br><span class="line">systemctl <span class="built_in">start</span> nginx</span><br><span class="line">停止</span><br><span class="line">systemctl <span class="built_in">stop</span> nginx</span><br><span class="line">重启</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><p> <a href="http://www.jianshu.com/p/999949f8fbf3" tareget="_blank" target="_blank" rel="noopener">http://www.jianshu.com/p/999949f8fbf3</a></p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">查看所有打开的端口：</span> <span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> --<span class="comment">zone=public</span> --<span class="comment">list</span><span class="literal">-</span><span class="comment">ports</span></span><br><span class="line"><span class="comment">更新防火墙规则：</span> <span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> --<span class="comment">reload</span></span><br><span class="line"><span class="comment">添加</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> --<span class="comment">zone=public</span> --<span class="comment">add</span><span class="literal">-</span><span class="comment">port=80/tcp</span> --<span class="comment">permanent</span>    <span class="comment">（</span>--<span class="comment">permanent永久生效，没有此参数重启后失效）</span></span><br><span class="line"><span class="comment">删除</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> --<span class="comment">zone=</span> <span class="comment">public</span> --<span class="comment">remove</span><span class="literal">-</span><span class="comment">port=80/tcp</span> --<span class="comment">permanent</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> --<span class="comment">permanent</span> --<span class="comment">zone=public</span> --<span class="comment">add</span><span class="literal">-</span><span class="comment">port=3306/tcp</span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> --<span class="comment">permanent</span> --<span class="comment">zone=public</span> --<span class="comment">add</span><span class="literal">-</span><span class="comment">port=3306/udp</span></span><br><span class="line"><span class="comment">这样就开放了相应的端口。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> --<span class="comment">reload</span></span><br></pre></td></tr></table></figure><p>mysql文章</p><p><a href="http://blog.csdn.net/gebitan505/article/details/54613549" target="_blank">http://blog.csdn.net/gebitan505/article/details/54613549</a></p><p>centos7重置密码。<br><a href="http://blog.csdn.net/keepd/article/details/77151006" target="_blank">http://blog.csdn.net/keepd/article/details/77151006</a></p><p>mysql:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>用户名和密码： root root</span><br><span class="line"><span class="number">2.</span>远程连接用户名和密码： admin admin</span><br></pre></td></tr></table></figure></p><p>添加用户名和密码方法：<br><a href="http://www.cnblogs.com/chenggege/p/7761255.html" target="_blank">http://www.cnblogs.com/chenggege/p/7761255.html</a>    </p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql 语法：</span><br><span class="line"></span><br><span class="line">show databases;  <span class="comment">//查询所有db</span></span><br><span class="line">use db;  <span class="comment">//选中要操作的数据库</span></span><br><span class="line">create table tableName (</span><br><span class="line">id number,</span><br><span class="line">bookName varchar(<span class="number">20</span>),</span><br><span class="line">price varchar(<span class="number">20</span>)</span><br><span class="line">);<span class="comment">//创建表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">select</span> * <span class="keyword">from</span> tableName;<span class="comment">//查询所有信息</span></span><br><span class="line"></span><br><span class="line">slecet * <span class="keyword">from</span> tableName where <span class="built_in">type</span>=xxx;<span class="comment">//根据条件查询所有信息</span></span><br><span class="line"></span><br><span class="line">update tableName <span class="built_in">set</span> <span class="built_in">type</span>=<span class="string">'xxx'</span> where <span class="built_in">name</span>=<span class="string">"shuigu"</span>;<span class="comment">//根据条件更新某条数据</span></span><br><span class="line"></span><br><span class="line">delete <span class="keyword">from</span> tableName where <span class="built_in">name</span>=<span class="string">'xxx'</span> <span class="comment">//删除单条数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="built_in">DROP</span> DATABASE 库名;  <span class="comment">//删除db数据库</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">DROP</span> TABLE 表名；  <span class="comment">//删除表</span></span><br><span class="line"></span><br><span class="line">DELETE <span class="keyword">FROM</span> 表名;  <span class="comment">//清空表</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Centos使用笔记&quot;&gt;&lt;a href=&quot;#Centos使用笔记&quot; class=&quot;headerlink&quot; title=&quot;Centos使用笔记&quot;&gt;&lt;/a&gt;Centos使用笔记&lt;/h2&gt;&lt;h3 id=&quot;Centos6忘记密码解决办法，root和普通用户均可&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="centos7" scheme="//website.cwzcfj.cn/tags/centos7/"/>
    
      <category term="环境搭建" scheme="//website.cwzcfj.cn/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>curl常用命令</title>
    <link href="//website.cwzcfj.cn/2019/04/15/curl%E5%91%BD%E4%BB%A4/"/>
    <id>//website.cwzcfj.cn/2019/04/15/curl命令/</id>
    <published>2019-04-15T15:31:23.000Z</published>
    <updated>2023-04-23T13:12:03.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="curl使用常用命令"><a href="#curl使用常用命令" class="headerlink" title="curl使用常用命令"></a>curl使用常用命令</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">curl -o/O pathName url   <span class="string">//</span>下载文件o下载到本地并命名pathName O默认url 如下：</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 将文件下载到本地并命名为mygettext.html</span></span><br><span class="line">curl -o mygettext.html http:<span class="string">//www.gnu.org/software/gettext/manual/gettext.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件保存到本地并命名为gettext.html</span></span><br><span class="line"> curl -O http:<span class="string">//www.gnu.org/software/gettext/manual/gettext.html</span></span><br><span class="line"></span><br><span class="line"> curl -O URL1 -O URL2  <span class="string">//</span>同时获取多个</span><br><span class="line"></span><br><span class="line">断点续传，通过使用-C选项可对大文件使用断点续传功能</span><br><span class="line"><span class="comment"># 当文件在下载完成之前结束该进程</span></span><br><span class="line"> $ curl -O http:<span class="string">//www.gnu.org/software/</span>gettext/manual/gettext.html</span><br><span class="line"> <span class="comment">##############             20.1%</span></span><br><span class="line"></span><br><span class="line">Head请求：curl -l http:<span class="string">//www.mzwu.com/</span> -I</span><br><span class="line">GET请求：curl -l http:<span class="string">//www.mzwu.com/</span>?domain=mzwu.com</span><br><span class="line">curl example.com/form.cgi?data=xxx</span><br><span class="line">GET方法相对简单，只要把数据附在网址后面就行</span><br><span class="line"></span><br><span class="line">POST请求：curl -l http:<span class="string">//www.mzwu.com/</span> -d <span class="string">"domain=mzwu.com"</span></span><br><span class="line">POST方法必须把数据和网址分开，curl就要用到<span class="params">--data</span>参数。</span><br><span class="line">curl -X POST <span class="params">--data</span> <span class="string">"data=xxx"</span> example.com/form.cgi</span><br><span class="line"></span><br><span class="line">如果你的数据没有经过表单编码，还可以让curl为你编码，参数是`<span class="params">--data-urlencode</span>`。</span><br><span class="line">curl -X POST<span class="params">--data-urlencode</span> <span class="string">"date=April 1"</span> example.com/form.cgi</span><br><span class="line"></span><br><span class="line">curl默认的HTTP动词是GET，使用`-X`参数可以支持其他动词。</span><br><span class="line">curl -X POST www.example.com</span><br><span class="line">curl -X DELETE www.example.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">添加HTTP头：curl -l http:<span class="string">//www.mzwu.com/</span> -H <span class="string">"name:dnawo"</span> -H <span class="string">"sex:boy"</span></span><br><span class="line">伪造referer：curl -l http:<span class="string">//www.mzwu.com/</span> -e <span class="string">"http://www.baidu.com/"</span></span><br><span class="line">Referer字段</span><br><span class="line">有时你需要在http request头信息中，提供一个referer字段，表示你是从哪里跳转过来的。</span><br><span class="line">curl <span class="params">--referer</span> http:<span class="string">//www.example.com</span> http:<span class="string">//www.example.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -v url <span class="string">//</span>打印更多信息，包括发送的请求信息，这在调试脚本是特别有用,`-v`参数可以显示一次http通信的整个过程，包括端口连接和http request头信息。</span><br><span class="line"></span><br><span class="line">http request之中，自行增加一个头信息。`<span class="params">--header</span>`参数就可以起到这个作用</span><br><span class="line">curl <span class="params">--header</span> <span class="string">"Content-Type:application/json"</span> http:<span class="string">//example.com</span></span><br><span class="line"></span><br><span class="line">网域需要HTTP认证，这时curl需要用到`<span class="params">--user</span>`参数</span><br><span class="line">curl <span class="params">--user</span> name<span class="function">:password</span> example.com</span><br><span class="line"></span><br><span class="line">可以显示更详细的通信过程</span><br><span class="line">curl <span class="params">--trace</span> output.txt www.sina.com 或者</span><br><span class="line">curl <span class="params">--trace-ascii</span> output.txt www.sina.com  </span><br><span class="line"></span><br><span class="line">curl -I url <span class="string">//</span>查看响应头</span><br><span class="line"></span><br><span class="line">curl -i url <span class="string">//</span>`-i`参数可以显示http response的头信息，连同网页代码一起。`-I`参数则是只显示http response的头信息。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;curl使用常用命令&quot;&gt;&lt;a href=&quot;#curl使用常用命令&quot; class=&quot;headerlink&quot; title=&quot;curl使用常用命令&quot;&gt;&lt;/a&gt;curl使用常用命令&lt;/h2&gt;&lt;figure class=&quot;highlight jboss-cli&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="curl" scheme="//website.cwzcfj.cn/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>git配置用户密码</title>
    <link href="//website.cwzcfj.cn/2019/04/15/git%E9%85%8D%E7%BD%AE/"/>
    <id>//website.cwzcfj.cn/2019/04/15/git配置/</id>
    <published>2019-04-15T15:28:34.000Z</published>
    <updated>2023-03-15T05:00:57.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>TortoiseGit 远程上传push代码，配置不用每次输入用户名和密码方法</li></ol></blockquote><p>配置方法：<br>    打开目录C:\Documents and Settings\Administrator\，找到.gitconfig文件，里面已经存在你已经配置好的name和email,只需在下面加人一行<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">credential</span>]  </span><br><span class="line">    helper = store</span><br></pre></td></tr></table></figure></p><p>下次只需在输入一次用户名和密码，git就会记住，而在目录C:\Documents and Settings\Administrator\目录下，有.git-credentials文件，里面就保存你的用户名和密码(注意是明文)</p><p>这样以后再链接时，就不需要输入用户名和密码.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;TortoiseGit 远程上传push代码，配置不用每次输入用户名和密码方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;配置方法：&lt;br&gt;    打开目录C:&#92;Documents and Settings&#92;Adminis
      
    
    </summary>
    
      <category term="工具" scheme="//website.cwzcfj.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="//website.cwzcfj.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="git" scheme="//website.cwzcfj.cn/tags/git/"/>
    
  </entry>
  
</feed>
